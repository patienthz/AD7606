
AD7606.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08008e58  08008e58  00018e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009354  08009354  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800935c  0800935c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800935c  0800935c  0001935c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009360  08009360  00019360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  200001e0  08009544  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  08009544  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5be  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a3  00000000  00000000  0002e7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002614d  00000000  00000000  00031e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de73  00000000  00000000  00057f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee13b  00000000  00000000  00065dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004254  00000000  00000000  00153f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e40 	.word	0x08008e40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08008e40 	.word	0x08008e40

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <AD7606_SETOS>:
#include <stm32g4xx.h>
#include <AD7606.h>


void AD7606_SETOS(uint8_t osv)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	switch(osv)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b06      	cmp	r3, #6
 8001056:	f200 8084 	bhi.w	8001162 <AD7606_SETOS+0x11a>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <AD7606_SETOS+0x18>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	0800107d 	.word	0x0800107d
 8001064:	0800109d 	.word	0x0800109d
 8001068:	080010bd 	.word	0x080010bd
 800106c:	080010dd 	.word	0x080010dd
 8001070:	080010fd 	.word	0x080010fd
 8001074:	0800111f 	.word	0x0800111f
 8001078:	08001141 	.word	0x08001141
	  {
	  case 0://000  200Kbps
	    AD7606OS0_L;
 800107c:	2200      	movs	r2, #0
 800107e:	2120      	movs	r1, #32
 8001080:	483a      	ldr	r0, [pc, #232]	; (800116c <AD7606_SETOS+0x124>)
 8001082:	f001 fb2d 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_L;
 8001086:	2200      	movs	r2, #0
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4838      	ldr	r0, [pc, #224]	; (800116c <AD7606_SETOS+0x124>)
 800108c:	f001 fb28 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_L;
 8001090:	2200      	movs	r2, #0
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4835      	ldr	r0, [pc, #212]	; (800116c <AD7606_SETOS+0x124>)
 8001096:	f001 fb23 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 800109a:	e062      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 1://001
	    AD7606OS0_H;
 800109c:	2201      	movs	r2, #1
 800109e:	2120      	movs	r1, #32
 80010a0:	4832      	ldr	r0, [pc, #200]	; (800116c <AD7606_SETOS+0x124>)
 80010a2:	f001 fb1d 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_L;
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4830      	ldr	r0, [pc, #192]	; (800116c <AD7606_SETOS+0x124>)
 80010ac:	f001 fb18 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_L;
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	482d      	ldr	r0, [pc, #180]	; (800116c <AD7606_SETOS+0x124>)
 80010b6:	f001 fb13 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 80010ba:	e052      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 2://010
	    AD7606OS0_L;
 80010bc:	2200      	movs	r2, #0
 80010be:	2120      	movs	r1, #32
 80010c0:	482a      	ldr	r0, [pc, #168]	; (800116c <AD7606_SETOS+0x124>)
 80010c2:	f001 fb0d 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_H;
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4828      	ldr	r0, [pc, #160]	; (800116c <AD7606_SETOS+0x124>)
 80010cc:	f001 fb08 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_L;
 80010d0:	2200      	movs	r2, #0
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4825      	ldr	r0, [pc, #148]	; (800116c <AD7606_SETOS+0x124>)
 80010d6:	f001 fb03 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 80010da:	e042      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 3://011
	    AD7606OS0_H;
 80010dc:	2201      	movs	r2, #1
 80010de:	2120      	movs	r1, #32
 80010e0:	4822      	ldr	r0, [pc, #136]	; (800116c <AD7606_SETOS+0x124>)
 80010e2:	f001 fafd 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_H;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	4820      	ldr	r0, [pc, #128]	; (800116c <AD7606_SETOS+0x124>)
 80010ec:	f001 faf8 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_L;
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <AD7606_SETOS+0x124>)
 80010f6:	f001 faf3 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 80010fa:	e032      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 4://100
	    AD7606OS0_L;
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	481a      	ldr	r0, [pc, #104]	; (800116c <AD7606_SETOS+0x124>)
 8001102:	f001 faed 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_L;
 8001106:	2200      	movs	r2, #0
 8001108:	2140      	movs	r1, #64	; 0x40
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <AD7606_SETOS+0x124>)
 800110c:	f001 fae8 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_H;
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	4815      	ldr	r0, [pc, #84]	; (800116c <AD7606_SETOS+0x124>)
 8001118:	f001 fae2 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 800111c:	e021      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 5://101
	    AD7606OS0_H;
 800111e:	2201      	movs	r2, #1
 8001120:	2120      	movs	r1, #32
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <AD7606_SETOS+0x124>)
 8001124:	f001 fadc 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_L;
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <AD7606_SETOS+0x124>)
 800112e:	f001 fad7 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_H;
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <AD7606_SETOS+0x124>)
 800113a:	f001 fad1 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 800113e:	e010      	b.n	8001162 <AD7606_SETOS+0x11a>
	  case 6://110
	    AD7606OS0_L;
 8001140:	2200      	movs	r2, #0
 8001142:	2120      	movs	r1, #32
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <AD7606_SETOS+0x124>)
 8001146:	f001 facb 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS1_H;
 800114a:	2201      	movs	r2, #1
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <AD7606_SETOS+0x124>)
 8001150:	f001 fac6 	bl	80026e0 <HAL_GPIO_WritePin>
	    AD7606OS2_H;
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <AD7606_SETOS+0x124>)
 800115c:	f001 fac0 	bl	80026e0 <HAL_GPIO_WritePin>
	    break;
 8001160:	bf00      	nop
	  }
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	48000800 	.word	0x48000800

08001170 <Delay>:




void Delay(uint32_t nCount)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8001178:	e002      	b.n	8001180 <Delay+0x10>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3b01      	subs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f9      	bne.n	800117a <Delay+0xa>
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <AD7606_RESET>:




void AD7606_RESET(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  AD7606_RESET_H;
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <AD7606_RESET+0x28>)
 80011a0:	f001 fa9e 	bl	80026e0 <HAL_GPIO_WritePin>
  Delay(0xFF);
 80011a4:	20ff      	movs	r0, #255	; 0xff
 80011a6:	f7ff ffe3 	bl	8001170 <Delay>
  AD7606_RESET_L;
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <AD7606_RESET+0x28>)
 80011b2:	f001 fa95 	bl	80026e0 <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	48000400 	.word	0x48000400

080011c0 <ad7606_ReadBytes>:




uint16_t ad7606_ReadBytes(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  uint16_t usData = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	80fb      	strh	r3, [r7, #6]
  for (uint8_t i = 0; i < 16; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	717b      	strb	r3, [r7, #5]
 80011ce:	e01d      	b.n	800120c <ad7606_ReadBytes+0x4c>
  {
    AD7606_SCLK_L;
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <ad7606_ReadBytes+0x5c>)
 80011d8:	f001 fa82 	bl	80026e0 <HAL_GPIO_WritePin>
    usData = usData << 1;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	80fb      	strh	r3, [r7, #6]
    if(AD7606_DOUTA)
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f001 fa62 	bl	80026b0 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <ad7606_ReadBytes+0x3a>
    {
      usData |= 0x0001;
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	80fb      	strh	r3, [r7, #6]
    }
    AD7606_SCLK_H;
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <ad7606_ReadBytes+0x5c>)
 8001202:	f001 fa6d 	bl	80026e0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 16; i++)
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	3301      	adds	r3, #1
 800120a:	717b      	strb	r3, [r7, #5]
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d9de      	bls.n	80011d0 <ad7606_ReadBytes+0x10>
  }
  return usData;
 8001212:	88fb      	ldrh	r3, [r7, #6]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	48000400 	.word	0x48000400

08001220 <AD7606_STARTCONV>:

void AD7606_STARTCONV(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  AD7606_CONVST_A_L;
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f001 fa57 	bl	80026e0 <HAL_GPIO_WritePin>
  AD7606_CONVST_B_L;
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f001 fa50 	bl	80026e0 <HAL_GPIO_WritePin>
  Delay(0xF);
 8001240:	200f      	movs	r0, #15
 8001242:	f7ff ff95 	bl	8001170 <Delay>
  AD7606_CONVST_A_H;
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f001 fa46 	bl	80026e0 <HAL_GPIO_WritePin>
  AD7606_CONVST_B_H;
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f001 fa3f 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}

08001266 <AD7606_Init>:


void AD7606_Init(uint8_t os )
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
	  AD7606_SETOS(os);//200Kbps
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fee8 	bl	8001048 <AD7606_SETOS>
	  AD7606_RESET();
 8001278:	f7ff ff8c 	bl	8001194 <AD7606_RESET>
	  AD7606_CONVST_A_H;
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f001 fa2b 	bl	80026e0 <HAL_GPIO_WritePin>
	  AD7606_CONVST_B_H;
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fa24 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <AD7606_RANGE10>:

void AD7606_RANGE10(float vol_data[])
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b091      	sub	sp, #68	; 0x44
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint16_t datatemp[8];//AD7606 data acquisition TEMP
	int data[8];
	if(!AD7606_BUSY)
 80012a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ac:	4852      	ldr	r0, [pc, #328]	; (80013f8 <AD7606_RANGE10+0x158>)
 80012ae:	f001 f9ff 	bl	80026b0 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 809a 	bne.w	80013ee <AD7606_RANGE10+0x14e>
	 {
	   AD7606_CS_L;
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c0:	484d      	ldr	r0, [pc, #308]	; (80013f8 <AD7606_RANGE10+0x158>)
 80012c2:	f001 fa0d 	bl	80026e0 <HAL_GPIO_WritePin>
	   for(uint8_t i = 0;i < 8;i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80012cc:	e07a      	b.n	80013c4 <AD7606_RANGE10+0x124>
	   {
		 datatemp[i]=ad7606_ReadBytes();//Read ADC data
 80012ce:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 80012d2:	f7ff ff75 	bl	80011c0 <ad7606_ReadBytes>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	0063      	lsls	r3, r4, #1
 80012dc:	3340      	adds	r3, #64	; 0x40
 80012de:	443b      	add	r3, r7
 80012e0:	f823 2c14 	strh.w	r2, [r3, #-20]
		 if(datatemp[i]>32767)
 80012e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3340      	adds	r3, #64	; 0x40
 80012ec:	443b      	add	r3, r7
 80012ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da2d      	bge.n	8001354 <AD7606_RANGE10+0xb4>
		 {
		   datatemp[i]=65536-datatemp[i];
 80012f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3340      	adds	r3, #64	; 0x40
 8001300:	443b      	add	r3, r7
 8001302:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800130a:	4252      	negs	r2, r2
 800130c:	b292      	uxth	r2, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	3340      	adds	r3, #64	; 0x40
 8001312:	443b      	add	r3, r7
 8001314:	f823 2c14 	strh.w	r2, [r3, #-20]
		   data[i]=datatemp[i];
 8001318:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3340      	adds	r3, #64	; 0x40
 8001320:	443b      	add	r3, r7
 8001322:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	3340      	adds	r3, #64	; 0x40
 800132e:	443b      	add	r3, r7
 8001330:	f843 2c34 	str.w	r2, [r3, #-52]
		   data[i]=-data[i];
 8001334:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	3340      	adds	r3, #64	; 0x40
 800133c:	443b      	add	r3, r7
 800133e:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8001342:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001346:	4252      	negs	r2, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	3340      	adds	r3, #64	; 0x40
 800134c:	443b      	add	r3, r7
 800134e:	f843 2c34 	str.w	r2, [r3, #-52]
 8001352:	e00d      	b.n	8001370 <AD7606_RANGE10+0xd0>
		 }
		 else
		 {
			 data[i]=datatemp[i];
 8001354:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	3340      	adds	r3, #64	; 0x40
 800135c:	443b      	add	r3, r7
 800135e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	3340      	adds	r3, #64	; 0x40
 800136a:	443b      	add	r3, r7
 800136c:	f843 2c34 	str.w	r2, [r3, #-52]
		 }
		 vol_data[i]=data[i]/32768.0*10.0;
 8001370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	3340      	adds	r3, #64	; 0x40
 8001378:	443b      	add	r3, r7
 800137a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8f8 	bl	8000574 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <AD7606_RANGE10+0x15c>)
 800138a:	f7ff fa87 	bl	800089c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <AD7606_RANGE10+0x160>)
 800139c:	f7ff f954 	bl	8000648 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	18d4      	adds	r4, r2, r3
 80013b2:	f7ff fc41 	bl	8000c38 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	6023      	str	r3, [r4, #0]
	   for(uint8_t i = 0;i < 8;i++)
 80013ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013be:	3301      	adds	r3, #1
 80013c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80013c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	d980      	bls.n	80012ce <AD7606_RANGE10+0x2e>
	   }
	   AD7606_CS_H;
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d2:	4809      	ldr	r0, [pc, #36]	; (80013f8 <AD7606_RANGE10+0x158>)
 80013d4:	f001 f984 	bl	80026e0 <HAL_GPIO_WritePin>
	   AD7606_STARTCONV();
 80013d8:	f7ff ff22 	bl	8001220 <AD7606_STARTCONV>
	   while(AD7606_BUSY);
 80013dc:	bf00      	nop
 80013de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <AD7606_RANGE10+0x158>)
 80013e4:	f001 f964 	bl	80026b0 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f7      	bne.n	80013de <AD7606_RANGE10+0x13e>
	 }

}
 80013ee:	bf00      	nop
 80013f0:	3744      	adds	r7, #68	; 0x44
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400
 80013fc:	40e00000 	.word	0x40e00000
 8001400:	40240000 	.word	0x40240000

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fc63 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f838 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 f952 	bl	80016b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001414:	f000 f8ba 	bl	800158c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001418:	f000 f902 	bl	8001620 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 800141c:	f000 f87c 	bl	8001518 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */


AD7606_Init(0X00);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff ff20 	bl	8001266 <AD7606_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AD7606_RANGE10(vol_data);
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <main+0x68>)
 8001428:	f7ff ff3a 	bl	80012a0 <AD7606_RANGE10>
      printf("a=%.3f\r\n",vol_data[0]);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <main+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8b1 	bl	8000598 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <main+0x6c>)
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <main+0x70>)
 800143e:	f003 ff0d 	bl	800525c <siprintf>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <main+0x70>)
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <main+0x74>)
 800144e:	f002 fa09 	bl	8003864 <HAL_UART_Transmit>
      printf("  \r\n");
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <main+0x78>)
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <main+0x70>)
 8001456:	f003 ff01 	bl	800525c <siprintf>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001462:	4904      	ldr	r1, [pc, #16]	; (8001474 <main+0x70>)
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <main+0x74>)
 8001466:	f002 f9fd 	bl	8003864 <HAL_UART_Transmit>
	  AD7606_RANGE10(vol_data);
 800146a:	e7dc      	b.n	8001426 <main+0x22>
 800146c:	200005fc 	.word	0x200005fc
 8001470:	08008e58 	.word	0x08008e58
 8001474:	200001fc 	.word	0x200001fc
 8001478:	200006c0 	.word	0x200006c0
 800147c:	08008e64 	.word	0x08008e64

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0318 	add.w	r3, r7, #24
 800148a:	2238      	movs	r2, #56	; 0x38
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f85c 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f001 f958 	bl	8002758 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2340      	movs	r3, #64	; 0x40
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014be:	2304      	movs	r3, #4
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014c2:	2355      	movs	r3, #85	; 0x55
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 f9f2 	bl	80028c0 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014e2:	f000 f99f 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ea:	2303      	movs	r3, #3
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2104      	movs	r1, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fcf6 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800150a:	f000 f98b 	bl	8001824 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2230      	movs	r2, #48	; 0x30
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f811 	bl	800454c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_DAC1_Init+0x6c>)
 800152c:	4a16      	ldr	r2, [pc, #88]	; (8001588 <MX_DAC1_Init+0x70>)
 800152e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_DAC1_Init+0x6c>)
 8001532:	f000 fd70 	bl	8002016 <HAL_DAC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800153c:	f000 f972 	bl	8001824 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001540:	2302      	movs	r3, #2
 8001542:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800155c:	2301      	movs	r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_DAC1_Init+0x6c>)
 800156c:	f000 fd76 	bl	800205c <HAL_DAC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001576:	f000 f955 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	; 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000061c 	.word	0x2000061c
 8001588:	50000800 	.word	0x50000800

0800158c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <MX_LPUART1_UART_Init+0x90>)
 8001594:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015ce:	4812      	ldr	r0, [pc, #72]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015d0:	f002 f8f8 	bl	80037c4 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 f923 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015e2:	f002 febf 	bl	8004364 <HAL_UARTEx_SetTxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80015ec:	f000 f91a 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f0:	2100      	movs	r1, #0
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 80015f4:	f002 fef4 	bl	80043e0 <HAL_UARTEx_SetRxFifoThreshold>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80015fe:	f000 f911 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_LPUART1_UART_Init+0x8c>)
 8001604:	f002 fe75 	bl	80042f2 <HAL_UARTEx_DisableFifoMode>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800160e:	f000 f909 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000630 	.word	0x20000630
 800161c:	40008000 	.word	0x40008000

08001620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <MX_USART1_UART_Init+0x94>)
 8001628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800166a:	f002 f8ab 	bl	80037c4 <HAL_UART_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 f8d6 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800167c:	f002 fe72 	bl	8004364 <HAL_UARTEx_SetTxFifoThreshold>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 f8cd 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800168e:	f002 fea7 	bl	80043e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 f8c4 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_USART1_UART_Init+0x90>)
 800169e:	f002 fe28 	bl	80042f2 <HAL_UARTEx_DisableFifoMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 f8bc 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200006c0 	.word	0x200006c0
 80016b4:	40013800 	.word	0x40013800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <MX_GPIO_Init+0x160>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <MX_GPIO_Init+0x160>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <MX_GPIO_Init+0x160>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <MX_GPIO_Init+0x160>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <MX_GPIO_Init+0x160>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <MX_GPIO_Init+0x160>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b46      	ldr	r3, [pc, #280]	; (8001818 <MX_GPIO_Init+0x160>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a45      	ldr	r2, [pc, #276]	; (8001818 <MX_GPIO_Init+0x160>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <MX_GPIO_Init+0x160>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <MX_GPIO_Init+0x160>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <MX_GPIO_Init+0x160>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <MX_GPIO_Init+0x160>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|FRST_Pin|ST_A_Pin|ST_B_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f000 ffd2 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OS0_Pin|OS1_Pin|OS2_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001742:	4836      	ldr	r0, [pc, #216]	; (800181c <MX_GPIO_Init+0x164>)
 8001744:	f000 ffcc 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CLK_Pin|RST_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800174e:	4834      	ldr	r0, [pc, #208]	; (8001820 <MX_GPIO_Init+0x168>)
 8001750:	f000 ffc6 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	482c      	ldr	r0, [pc, #176]	; (800181c <MX_GPIO_Init+0x164>)
 800176c:	f000 fe1e 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin FRST_Pin ST_A_Pin ST_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|FRST_Pin|ST_A_Pin|ST_B_Pin;
 8001770:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f000 fe0e 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB8_Pin */
  GPIO_InitStruct.Pin = DB7_Pin|DB8_Pin;
 8001790:	23c0      	movs	r3, #192	; 0xc0
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f000 fe01 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OS0_Pin OS1_Pin OS2_Pin */
  GPIO_InitStruct.Pin = OS0_Pin|OS1_Pin|OS2_Pin;
 80017aa:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4816      	ldr	r0, [pc, #88]	; (800181c <MX_GPIO_Init+0x164>)
 80017c4:	f000 fdf2 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CLK_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CLK_Pin|RST_Pin;
 80017c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	480f      	ldr	r0, [pc, #60]	; (8001820 <MX_GPIO_Init+0x168>)
 80017e2:	f000 fde3 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80017e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_GPIO_Init+0x168>)
 80017fc:	f000 fdd6 	bl	80023ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2028      	movs	r0, #40	; 0x28
 8001806:	f000 fbd2 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800180a:	2028      	movs	r0, #40	; 0x28
 800180c:	f000 fbe9 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	48000800 	.word	0x48000800
 8001820:	48000400 	.word	0x48000400

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>
	...

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	; 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001866:	f001 f81b 	bl	80028a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_DAC_MspInit+0x74>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d124      	bne.n	80018e4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_DAC_MspInit+0x78>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ca:	2310      	movs	r3, #16
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f000 fd64 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	50000800 	.word	0x50000800
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a2      	sub	sp, #136	; 0x88
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	2254      	movs	r2, #84	; 0x54
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fe19 	bl	800454c <memset>
  if(huart->Instance==LPUART1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_UART_MspInit+0x164>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d139      	bne.n	8001998 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001924:	2320      	movs	r3, #32
 8001926:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001928:	2300      	movs	r3, #0
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fcf9 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800193c:	f7ff ff72 	bl	8001824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_UART_MspInit+0x168>)
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_UART_MspInit+0x168>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800194c:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_UART_MspInit+0x168>)
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_UART_MspInit+0x168>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_UART_MspInit+0x168>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_UART_MspInit+0x168>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001970:	230c      	movs	r3, #12
 8001972:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001982:	230c      	movs	r3, #12
 8001984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f000 fd0b 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001996:	e05a      	b.n	8001a4e <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_UART_MspInit+0x16c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d155      	bne.n	8001a4e <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 fcba 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_UART_MspInit+0xca>
      Error_Handler();
 80019ba:	f7ff ff33 	bl	8001824 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_UART_MspInit+0x168>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a06:	2310      	movs	r3, #16
 8001a08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a22:	4619      	mov	r1, r3
 8001a24:	480f      	ldr	r0, [pc, #60]	; (8001a64 <HAL_UART_MspInit+0x170>)
 8001a26:	f000 fcc1 	bl	80023ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_UART_MspInit+0x174>)
 8001a4a:	f000 fcaf 	bl	80023ac <HAL_GPIO_Init>
}
 8001a4e:	bf00      	nop
 8001a50:	3788      	adds	r7, #136	; 0x88
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40008000 	.word	0x40008000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40013800 	.word	0x40013800
 8001a64:	48000800 	.word	0x48000800
 8001a68:	48000400 	.word	0x48000400

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab8:	f000 f95e 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ac4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ac8:	f000 fe22 	bl	8002710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aea:	f002 fd05 	bl	80044f8 <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
  }

  return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e009      	b.n	8001b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	60ba      	str	r2, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf1      	blt.n	8001b60 <_write+0x12>
  }
  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_close>:

int _close(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_isatty>:

int _isatty(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f002 fc6a 	bl	80044f8 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20020000 	.word	0x20020000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000750 	.word	0x20000750
 8001c58:	20000768 	.word	0x20000768

08001c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c86:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c9c:	4c0b      	ldr	r4, [pc, #44]	; (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001caa:	f7ff ffd7 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f002 fc29 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7ff fba7 	bl	8001404 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   r0, =_estack
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cc4:	08009364 	.word	0x08009364
  ldr r2, =_sbss
 8001cc8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ccc:	20000768 	.word	0x20000768

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>

08001cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f95b 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f80e 	bl	8001d04 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf4:	f7ff fd9c 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_InitTick+0x68>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d022      	beq.n	8001d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_InitTick+0x68>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f966 	bl	8001ffe <HAL_SYSTICK_Config>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d809      	bhi.n	8001d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295
 8001d46:	f000 f932 	bl	8001fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_InitTick+0x70>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e004      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x20>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000754 	.word	0x20000754
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000754 	.word	0x20000754

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d004      	beq.n	8001dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_Delay+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd8:	bf00      	nop
 8001dda:	f7ff ffdf 	bl	8001d9c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f7      	bhi.n	8001dda <HAL_Delay+0x26>
  {
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000008 	.word	0x20000008

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff40 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff90 	bl	8001eec <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5f 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff33 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa4 	bl	8001f54 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e014      	b.n	8002052 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	791b      	ldrb	r3, [r3, #4]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fc1d 	bl	8001878 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_DAC_ConfigChannel+0x18>
 8002070:	2302      	movs	r3, #2
 8002072:	e192      	b.n	800239a <HAL_DAC_ConfigChannel+0x33e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2202      	movs	r2, #2
 800207e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d174      	bne.n	8002172 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002088:	f7ff fe88 	bl	8001d9c <HAL_GetTick>
 800208c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d134      	bne.n	80020fe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002094:	e011      	b.n	80020ba <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002096:	f7ff fe81 	bl	8001d9c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d90a      	bls.n	80020ba <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f043 0208 	orr.w	r2, r3, #8
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2203      	movs	r2, #3
 80020b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e16f      	b.n	800239a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e6      	bne.n	8002096 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fe73 	bl	8001db4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
 80020d8:	e01e      	b.n	8002118 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020da:	f7ff fe5f 	bl	8001d9c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d90a      	bls.n	80020fe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f043 0208 	orr.w	r2, r3, #8
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2203      	movs	r2, #3
 80020f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e14d      	b.n	800239a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	dbe8      	blt.n	80020da <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002108:	2001      	movs	r0, #1
 800210a:	f7ff fe53 	bl	8001db4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	ea02 0103 	and.w	r1, r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	21ff      	movs	r1, #255	; 0xff
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	ea02 0103 	and.w	r1, r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11d      	bne.n	80021b6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	4013      	ands	r3, r2
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	4313      	orrs	r3, r2
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2207      	movs	r2, #7
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ce:	4013      	ands	r3, r2
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
 80021de:	e00f      	b.n	8002200 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d102      	bne.n	80021ee <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80021e8:	2301      	movs	r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	e008      	b.n	8002200 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	e001      	b.n	8002200 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	6a3a      	ldr	r2, [r7, #32]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	4013      	ands	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	791b      	ldrb	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_DAC_ConfigChannel+0x1d8>
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	e000      	b.n	8002236 <HAL_DAC_ConfigChannel+0x1da>
 8002234:	2300      	movs	r3, #0
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	4013      	ands	r3, r2
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	795b      	ldrb	r3, [r3, #5]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_DAC_ConfigChannel+0x204>
 800225a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800225e:	e000      	b.n	8002262 <HAL_DAC_ConfigChannel+0x206>
 8002260:	2300      	movs	r3, #0
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d114      	bne.n	80022a2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002278:	f000 ffd8 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800227c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_DAC_ConfigChannel+0x348>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d904      	bls.n	8002290 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e00f      	b.n	80022b0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4a45      	ldr	r2, [pc, #276]	; (80023a8 <HAL_DAC_ConfigChannel+0x34c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d90a      	bls.n	80022ae <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	e006      	b.n	80022b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	4313      	orrs	r3, r2
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	e000      	b.n	80022b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80022ae:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	4313      	orrs	r3, r2
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	400a      	ands	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	4013      	ands	r3, r2
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	4313      	orrs	r3, r2
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	22c0      	movs	r2, #192	; 0xc0
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43da      	mvns	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	400a      	ands	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	ea02 0103 	and.w	r1, r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	09896800 	.word	0x09896800
 80023a8:	04c4b400 	.word	0x04c4b400

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ba:	e15a      	b.n	8002672 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 814c 	beq.w	800266c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0201 	and.w	r2, r3, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a6 	beq.w	800266c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6613      	str	r3, [r2, #96]	; 0x60
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_GPIO_Init+0x2e4>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002538:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_GPIO_Init+0x2e8>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002562:	d01f      	beq.n	80025a4 <HAL_GPIO_Init+0x1f8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a4c      	ldr	r2, [pc, #304]	; (8002698 <HAL_GPIO_Init+0x2ec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d019      	beq.n	80025a0 <HAL_GPIO_Init+0x1f4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4b      	ldr	r2, [pc, #300]	; (800269c <HAL_GPIO_Init+0x2f0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d013      	beq.n	800259c <HAL_GPIO_Init+0x1f0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <HAL_GPIO_Init+0x2f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00d      	beq.n	8002598 <HAL_GPIO_Init+0x1ec>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <HAL_GPIO_Init+0x2f8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d007      	beq.n	8002594 <HAL_GPIO_Init+0x1e8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <HAL_GPIO_Init+0x2fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_GPIO_Init+0x1e4>
 800258c:	2305      	movs	r3, #5
 800258e:	e00a      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002590:	2306      	movs	r3, #6
 8002592:	e008      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002594:	2304      	movs	r3, #4
 8002596:	e006      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 8002598:	2303      	movs	r3, #3
 800259a:	e004      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 800259c:	2302      	movs	r3, #2
 800259e:	e002      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_GPIO_Init+0x1fa>
 80025a4:	2300      	movs	r3, #0
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	f002 0203 	and.w	r2, r2, #3
 80025ac:	0092      	lsls	r2, r2, #2
 80025ae:	4093      	lsls	r3, r2
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_GPIO_Init+0x2e8>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025e8:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_GPIO_Init+0x300>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_GPIO_Init+0x300>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x300>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002666:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f ae9d 	bne.w	80023bc <HAL_GPIO_Init+0x10>
  }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	40010000 	.word	0x40010000
 8002698:	48000400 	.word	0x48000400
 800269c:	48000800 	.word	0x48000800
 80026a0:	48000c00 	.word	0x48000c00
 80026a4:	48001000 	.word	0x48001000
 80026a8:	48001400 	.word	0x48001400
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e001      	b.n	80026d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f806 	bl	8002740 <HAL_GPIO_EXTI_Callback>
  }
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d141      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002766:	4b4b      	ldr	r3, [pc, #300]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d131      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277a:	4a46      	ldr	r2, [pc, #280]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800278c:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002794:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2232      	movs	r2, #50	; 0x32
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	4a3f      	ldr	r2, [pc, #252]	; (800289c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	3301      	adds	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027aa:	e002      	b.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027be:	d102      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f2      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d2:	d158      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e057      	b.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d8:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e8:	e04d      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f0:	d141      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d131      	bne.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002806:	4a23      	ldr	r2, [pc, #140]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002818:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2232      	movs	r2, #50	; 0x32
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c9b      	lsrs	r3, r3, #18
 8002832:	3301      	adds	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002836:	e002      	b.n	800283e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3b01      	subs	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d102      	bne.n	8002852 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f2      	bne.n	8002838 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	d112      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e011      	b.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002874:	e007      	b.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40007000 	.word	0x40007000
 8002898:	20000000 	.word	0x20000000
 800289c:	431bde83 	.word	0x431bde83

080028a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ae:	6093      	str	r3, [r2, #8]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e306      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d075      	beq.n	80029ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4b97      	ldr	r3, [pc, #604]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e8:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d102      	bne.n	80028fe <HAL_RCC_OscConfig+0x3e>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_OscConfig+0x44>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d10b      	bne.n	800291c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4b8d      	ldr	r3, [pc, #564]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05b      	beq.n	80029c8 <HAL_RCC_OscConfig+0x108>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d157      	bne.n	80029c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e2e1      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x74>
 8002926:	4b85      	ldr	r3, [pc, #532]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a84      	ldr	r2, [pc, #528]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x98>
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7e      	ldr	r2, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b7c      	ldr	r3, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7b      	ldr	r2, [pc, #492]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xb0>
 8002958:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a77      	ldr	r2, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a74      	ldr	r2, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fa10 	bl	8001d9c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fa0c 	bl	8001d9c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2a6      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002992:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xc0>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7ff f9fc 	bl	8001d9c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7ff f9f8 	bl	8001d9c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e292      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0xe8>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d075      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d6:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e0:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_OscConfig+0x136>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_OscConfig+0x13c>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11f      	bne.n	8002a3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_OscConfig+0x154>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e265      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	4946      	ldr	r1, [pc, #280]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a28:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f969 	bl	8001d04 <HAL_InitTick>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e251      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff f9a4 	bl	8001d9c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a58:	f7ff f9a0 	bl	8001d9c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e23a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	492d      	ldr	r1, [pc, #180]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
 8002a8a:	e01a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7ff f980 	bl	8001d9c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7ff f97c 	bl	8001d9c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e216      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1e0>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d041      	beq.n	8002b52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002adc:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7ff f959 	bl	8001d9c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aee:	f7ff f955 	bl	8001d9c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1ef      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ef      	beq.n	8002aee <HAL_RCC_OscConfig+0x22e>
 8002b0e:	e020      	b.n	8002b52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff f93c 	bl	8001d9c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b26:	e00d      	b.n	8002b44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b28:	f7ff f938 	bl	8001d9c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d906      	bls.n	8002b44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1d2      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b44:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ea      	bne.n	8002b28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a6 	beq.w	8002cac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2b4>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x2b6>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b96:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <HAL_RCC_OscConfig+0x4bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_OscConfig+0x4bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a75      	ldr	r2, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x4bc>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7ff f8f5 	bl	8001d9c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7ff f8f1 	bl	8001d9c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e18b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <HAL_RCC_OscConfig+0x4bc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d108      	bne.n	8002bee <HAL_RCC_OscConfig+0x32e>
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bec:	e024      	b.n	8002c38 <HAL_RCC_OscConfig+0x378>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d110      	bne.n	8002c18 <HAL_RCC_OscConfig+0x358>
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x378>
 8002c18:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7ff f8ac 	bl	8001d9c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7ff f8a8 	bl	8001d9c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e140      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ed      	beq.n	8002c48 <HAL_RCC_OscConfig+0x388>
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f895 	bl	8001d9c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7ff f891 	bl	8001d9c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e129      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ed      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a34      	ldr	r2, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01c      	beq.n	8002cfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f864 	bl	8001d9c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd8:	f7ff f860 	bl	8001d9c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0fa      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ef      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x418>
 8002cf8:	e01b      	b.n	8002d32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7ff f847 	bl	8001d9c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d12:	f7ff f843 	bl	8001d9c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0dd      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ef      	bne.n	8002d12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80d1 	beq.w	8002ede <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	f000 808b 	beq.w	8002e60 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d15e      	bne.n	8002e10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_OscConfig+0x4b8>)
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7ff f81d 	bl	8001d9c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d64:	e00c      	b.n	8002d80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7ff f819 	bl	8001d9c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d905      	bls.n	8002d80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0b3      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ec      	bne.n	8002d66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4b56      	ldr	r3, [pc, #344]	; (8002eec <HAL_RCC_OscConfig+0x62c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6a11      	ldr	r1, [r2, #32]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002da6:	0212      	lsls	r2, r2, #8
 8002da8:	4311      	orrs	r1, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dae:	0852      	lsrs	r2, r2, #1
 8002db0:	3a01      	subs	r2, #1
 8002db2:	0552      	lsls	r2, r2, #21
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dba:	0852      	lsrs	r2, r2, #1
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	0652      	lsls	r2, r2, #25
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dc6:	06d2      	lsls	r2, r2, #27
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4947      	ldr	r1, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a44      	ldr	r2, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a41      	ldr	r2, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe ffd8 	bl	8001d9c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe ffd4 	bl	8001d9c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e06e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x530>
 8002e0e:	e066      	b.n	8002ede <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a34      	ldr	r2, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e2e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffb0 	bl	8001d9c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe ffac 	bl	8001d9c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e046      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x580>
 8002e5e:	e03e      	b.n	8002ede <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e039      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x628>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d12c      	bne.n	8002eda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d123      	bne.n	8002eda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d11b      	bne.n	8002eda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d113      	bne.n	8002eda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	019f800c 	.word	0x019f800c

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e11e      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b91      	ldr	r3, [pc, #580]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	498c      	ldr	r1, [pc, #560]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e106      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d073      	beq.n	800302c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d129      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f4      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f5c:	f000 f99e 	bl	800329c <RCC_GetSysClockFreqFromPLLSource>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4a7c      	ldr	r2, [pc, #496]	; (8003158 <HAL_RCC_ClockConfig+0x268>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d93f      	bls.n	8002fea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d033      	beq.n	8002fea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d12f      	bne.n	8002fea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f8a:	4b72      	ldr	r3, [pc, #456]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	4a70      	ldr	r2, [pc, #448]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e024      	b.n	8002fea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0c6      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb8:	4b66      	ldr	r3, [pc, #408]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0be      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fc8:	f000 f8ce 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a61      	ldr	r2, [pc, #388]	; (8003158 <HAL_RCC_ClockConfig+0x268>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d909      	bls.n	8002fea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fde:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b5a      	ldr	r3, [pc, #360]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4957      	ldr	r1, [pc, #348]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fece 	bl	8001d9c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe feca 	bl	8001d9c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e095      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b4e      	ldr	r3, [pc, #312]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d023      	beq.n	8003080 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a42      	ldr	r2, [pc, #264]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800304a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800304e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800305c:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003064:	4a3b      	ldr	r2, [pc, #236]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800306a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4936      	ldr	r1, [pc, #216]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	e008      	b.n	8003092 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d105      	bne.n	8003092 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 800308c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003090:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003092:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d21d      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 020f 	bic.w	r2, r3, #15
 80030a8:	4929      	ldr	r1, [pc, #164]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fe74 	bl	8001d9c <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe fe70 	bl	8001d9c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e03b      	b.n	8003146 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_ClockConfig+0x260>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1ed      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4917      	ldr	r1, [pc, #92]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	490f      	ldr	r1, [pc, #60]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311a:	f000 f825 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_ClockConfig+0x264>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	490c      	ldr	r1, [pc, #48]	; (800315c <HAL_RCC_ClockConfig+0x26c>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x270>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fde0 	bl	8001d04 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
 8003158:	04c4b400 	.word	0x04c4b400
 800315c:	08008e6c 	.word	0x08008e6c
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d102      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_GetSysClockFreq+0xbc>)
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e047      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d102      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800318c:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e03e      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d136      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3301      	adds	r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031bc:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	0a12      	lsrs	r2, r2, #8
 80031ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
      break;
 80031d4:	e00c      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	0a12      	lsrs	r2, r2, #8
 80031e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
      break;
 80031ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0e5b      	lsrs	r3, r3, #25
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e001      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003210:	693b      	ldr	r3, [r7, #16]
}
 8003212:	4618      	mov	r0, r3
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	00f42400 	.word	0x00f42400
 8003228:	016e3600 	.word	0x016e3600

0800322c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_RCC_GetHCLKFreq+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003248:	f7ff fff0 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08008e7c 	.word	0x08008e7c

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003274:	f7ff ffda 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0adb      	lsrs	r3, r3, #11
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	08008e7c 	.word	0x08008e7c

0800329c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d10c      	bne.n	80032da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ca:	68d2      	ldr	r2, [r2, #12]
 80032cc:	0a12      	lsrs	r2, r2, #8
 80032ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	617b      	str	r3, [r7, #20]
    break;
 80032d8:	e00c      	b.n	80032f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	4a0e      	ldr	r2, [pc, #56]	; (800331c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	0a12      	lsrs	r2, r2, #8
 80032e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    break;
 80032f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800330e:	687b      	ldr	r3, [r7, #4]
}
 8003310:	4618      	mov	r0, r3
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000
 8003320:	016e3600 	.word	0x016e3600
 8003324:	00f42400 	.word	0x00f42400

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003330:	2300      	movs	r3, #0
 8003332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003334:	2300      	movs	r3, #0
 8003336:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8098 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003372:	4b3a      	ldr	r3, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a39      	ldr	r2, [pc, #228]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337e:	f7fe fd0d 	bl	8001d9c <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003384:	e009      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe fd09 	bl	8001d9c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d902      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	74fb      	strb	r3, [r7, #19]
        break;
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ef      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d159      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fcc9 	bl	8001d9c <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fcc5 	bl	8001d9c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	4903      	ldr	r1, [pc, #12]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003450:	e008      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	74bb      	strb	r3, [r7, #18]
 8003456:	e005      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7c7b      	ldrb	r3, [r7, #17]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4ba7      	ldr	r3, [pc, #668]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	4aa6      	ldr	r2, [pc, #664]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003482:	4ba1      	ldr	r3, [pc, #644]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f023 0203 	bic.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	499d      	ldr	r1, [pc, #628]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4b98      	ldr	r3, [pc, #608]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 020c 	bic.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4995      	ldr	r1, [pc, #596]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c6:	4b90      	ldr	r3, [pc, #576]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	498c      	ldr	r1, [pc, #560]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e8:	4b87      	ldr	r3, [pc, #540]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	4984      	ldr	r1, [pc, #528]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350a:	4b7f      	ldr	r3, [pc, #508]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	497b      	ldr	r1, [pc, #492]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b76      	ldr	r3, [pc, #472]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	4973      	ldr	r1, [pc, #460]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354e:	4b6e      	ldr	r3, [pc, #440]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	496a      	ldr	r1, [pc, #424]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003570:	4b65      	ldr	r3, [pc, #404]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4962      	ldr	r1, [pc, #392]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003592:	4b5d      	ldr	r3, [pc, #372]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	4959      	ldr	r1, [pc, #356]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b4:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	4951      	ldr	r1, [pc, #324]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4948      	ldr	r1, [pc, #288]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d015      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4940      	ldr	r1, [pc, #256]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003616:	d105      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003622:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003630:	4b35      	ldr	r3, [pc, #212]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	4932      	ldr	r1, [pc, #200]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364e:	d105      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4924      	ldr	r1, [pc, #144]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003686:	d105      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003692:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	4916      	ldr	r1, [pc, #88]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d019      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d109      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a02      	ldr	r2, [pc, #8]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e002      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4926      	ldr	r1, [pc, #152]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003736:	d105      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003738:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003742:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	4918      	ldr	r1, [pc, #96]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d105      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e042      	b.n	800385c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe f883 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	; 0x24
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8c2 	bl	8003990 <UART_SetConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e022      	b.n	800385c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fbb2 	bl	8003f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fc39 	bl	80040cc <UART_CheckIdleState>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 8083 	bne.w	8003986 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Transmit+0x28>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e07b      	b.n	8003988 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UART_Transmit+0x3a>
 800389a:	2302      	movs	r3, #2
 800389c:	e074      	b.n	8003988 <HAL_UART_Transmit+0x124>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2221      	movs	r2, #33	; 0x21
 80038b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b6:	f7fe fa71 	bl	8001d9c <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d108      	bne.n	80038e8 <HAL_UART_Transmit+0x84>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	e003      	b.n	80038f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038f8:	e02c      	b.n	8003954 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fc2c 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e039      	b.n	8003988 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3302      	adds	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e007      	b.n	8003942 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3301      	adds	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1cc      	bne.n	80038fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	2140      	movs	r1, #64	; 0x40
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fbf9 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e006      	b.n	8003988 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b08c      	sub	sp, #48	; 0x30
 8003996:	af00      	add	r7, sp, #0
 8003998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4baa      	ldr	r3, [pc, #680]	; (8003c68 <UART_SetConfig+0x2d8>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a9f      	ldr	r2, [pc, #636]	; (8003c6c <UART_SetConfig+0x2dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f8:	4313      	orrs	r3, r2
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f023 010f 	bic.w	r1, r3, #15
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a90      	ldr	r2, [pc, #576]	; (8003c70 <UART_SetConfig+0x2e0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d125      	bne.n	8003a80 <UART_SetConfig+0xf0>
 8003a34:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d81a      	bhi.n	8003a78 <UART_SetConfig+0xe8>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0xb8>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003a69 	.word	0x08003a69
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a71 	.word	0x08003a71
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e116      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a66:	e112      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e10e      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003a70:	2308      	movs	r3, #8
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e10a      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7e:	e106      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <UART_SetConfig+0x2e8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d138      	bne.n	8003afc <UART_SetConfig+0x16c>
 8003a8a:	4b7a      	ldr	r3, [pc, #488]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d82d      	bhi.n	8003af4 <UART_SetConfig+0x164>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x110>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003af5 	.word	0x08003af5
 8003aa8:	08003af5 	.word	0x08003af5
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003af5 	.word	0x08003af5
 8003ab8:	08003af5 	.word	0x08003af5
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	08003af5 	.word	0x08003af5
 8003ac8:	08003af5 	.word	0x08003af5
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e0d8      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003adc:	2302      	movs	r3, #2
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e0d4      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e0d0      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003aec:	2308      	movs	r3, #8
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e0cc      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003af4:	2310      	movs	r3, #16
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afa:	e0c8      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5e      	ldr	r2, [pc, #376]	; (8003c7c <UART_SetConfig+0x2ec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d125      	bne.n	8003b52 <UART_SetConfig+0x1c2>
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b10:	2b30      	cmp	r3, #48	; 0x30
 8003b12:	d016      	beq.n	8003b42 <UART_SetConfig+0x1b2>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d818      	bhi.n	8003b4a <UART_SetConfig+0x1ba>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d00a      	beq.n	8003b32 <UART_SetConfig+0x1a2>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d814      	bhi.n	8003b4a <UART_SetConfig+0x1ba>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <UART_SetConfig+0x19a>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d008      	beq.n	8003b3a <UART_SetConfig+0x1aa>
 8003b28:	e00f      	b.n	8003b4a <UART_SetConfig+0x1ba>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b30:	e0ad      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b32:	2302      	movs	r3, #2
 8003b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b38:	e0a9      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b40:	e0a5      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b42:	2308      	movs	r3, #8
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b48:	e0a1      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b50:	e09d      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <UART_SetConfig+0x2f0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d125      	bne.n	8003ba8 <UART_SetConfig+0x218>
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b66:	2bc0      	cmp	r3, #192	; 0xc0
 8003b68:	d016      	beq.n	8003b98 <UART_SetConfig+0x208>
 8003b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b6c:	d818      	bhi.n	8003ba0 <UART_SetConfig+0x210>
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d00a      	beq.n	8003b88 <UART_SetConfig+0x1f8>
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d814      	bhi.n	8003ba0 <UART_SetConfig+0x210>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <UART_SetConfig+0x1f0>
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d008      	beq.n	8003b90 <UART_SetConfig+0x200>
 8003b7e:	e00f      	b.n	8003ba0 <UART_SetConfig+0x210>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e082      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8e:	e07e      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b90:	2304      	movs	r3, #4
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b96:	e07a      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003b98:	2308      	movs	r3, #8
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9e:	e076      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba6:	e072      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <UART_SetConfig+0x2f4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12a      	bne.n	8003c08 <UART_SetConfig+0x278>
 8003bb2:	4b30      	ldr	r3, [pc, #192]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc0:	d01a      	beq.n	8003bf8 <UART_SetConfig+0x268>
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc6:	d81b      	bhi.n	8003c00 <UART_SetConfig+0x270>
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d00c      	beq.n	8003be8 <UART_SetConfig+0x258>
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd2:	d815      	bhi.n	8003c00 <UART_SetConfig+0x270>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <UART_SetConfig+0x250>
 8003bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bdc:	d008      	beq.n	8003bf0 <UART_SetConfig+0x260>
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x270>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e052      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e04e      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e04a      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e046      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c00:	2310      	movs	r3, #16
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e042      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <UART_SetConfig+0x2dc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d13a      	bne.n	8003c88 <UART_SetConfig+0x2f8>
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <UART_SetConfig+0x2e4>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c20:	d01a      	beq.n	8003c58 <UART_SetConfig+0x2c8>
 8003c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c26:	d81b      	bhi.n	8003c60 <UART_SetConfig+0x2d0>
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d00c      	beq.n	8003c48 <UART_SetConfig+0x2b8>
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c32:	d815      	bhi.n	8003c60 <UART_SetConfig+0x2d0>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <UART_SetConfig+0x2b0>
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d008      	beq.n	8003c50 <UART_SetConfig+0x2c0>
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x2d0>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c46:	e022      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	e01e      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e01a      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e016      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x2fe>
 8003c68:	cfff69f3 	.word	0xcfff69f3
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4aae      	ldr	r2, [pc, #696]	; (8003f4c <UART_SetConfig+0x5bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	f040 8097 	bne.w	8003dc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d823      	bhi.n	8003cea <UART_SetConfig+0x35a>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x318>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003cdb 	.word	0x08003cdb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7ff faba 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b9e      	ldr	r3, [pc, #632]	; (8003f50 <UART_SetConfig+0x5c0>)
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7ff fa45 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8130 	beq.w	8003f5e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	4a94      	ldr	r2, [pc, #592]	; (8003f54 <UART_SetConfig+0x5c4>)
 8003d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d34:	e113      	b.n	8003f5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	60fa      	str	r2, [r7, #12]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	4a84      	ldr	r2, [pc, #528]	; (8003f54 <UART_SetConfig+0x5c4>)
 8003d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d58:	f7fc ffbe 	bl	8000cd8 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	020b      	lsls	r3, r1, #8
 8003d6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d72:	0202      	lsls	r2, r0, #8
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	6849      	ldr	r1, [r1, #4]
 8003d78:	0849      	lsrs	r1, r1, #1
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	4605      	mov	r5, r0
 8003d80:	eb12 0804 	adds.w	r8, r2, r4
 8003d84:	eb43 0905 	adc.w	r9, r3, r5
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	469a      	mov	sl, r3
 8003d90:	4693      	mov	fp, r2
 8003d92:	4652      	mov	r2, sl
 8003d94:	465b      	mov	r3, fp
 8003d96:	4640      	mov	r0, r8
 8003d98:	4649      	mov	r1, r9
 8003d9a:	f7fc ff9d 	bl	8000cd8 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dac:	d308      	bcc.n	8003dc0 <UART_SetConfig+0x430>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d204      	bcs.n	8003dc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e0ce      	b.n	8003f5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dc6:	e0ca      	b.n	8003f5e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d166      	bne.n	8003ea0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d827      	bhi.n	8003e2a <UART_SetConfig+0x49a>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x450>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2b 	.word	0x08003e2b
 8003df0:	08003e1b 	.word	0x08003e1b
 8003df4:	08003e2b 	.word	0x08003e2b
 8003df8:	08003e2b 	.word	0x08003e2b
 8003dfc:	08003e2b 	.word	0x08003e2b
 8003e00:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7ff fa1e 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e0a:	e014      	b.n	8003e36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7ff fa30 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e12:	e010      	b.n	8003e36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4e      	ldr	r3, [pc, #312]	; (8003f50 <UART_SetConfig+0x5c0>)
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7ff f9a5 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e20:	e009      	b.n	8003e36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e28:	e005      	b.n	8003e36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8090 	beq.w	8003f5e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	4a44      	ldr	r2, [pc, #272]	; (8003f54 <UART_SetConfig+0x5c4>)
 8003e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e50:	005a      	lsls	r2, r3, #1
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	441a      	add	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	d916      	bls.n	8003e98 <UART_SetConfig+0x508>
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d212      	bcs.n	8003e98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	8bfb      	ldrh	r3, [r7, #30]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	8bfa      	ldrh	r2, [r7, #30]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	e062      	b.n	8003f5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e9e:	e05e      	b.n	8003f5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d828      	bhi.n	8003efa <UART_SetConfig+0x56a>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0x520>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003eeb 	.word	0x08003eeb
 8003ec4:	08003efb 	.word	0x08003efb
 8003ec8:	08003efb 	.word	0x08003efb
 8003ecc:	08003efb 	.word	0x08003efb
 8003ed0:	08003ef3 	.word	0x08003ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7ff f9b6 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eda:	e014      	b.n	8003f06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7ff f9c8 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ee2:	e010      	b.n	8003f06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <UART_SetConfig+0x5c0>)
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ee8:	e00d      	b.n	8003f06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eea:	f7ff f93d 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef0:	e009      	b.n	8003f06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ef8:	e005      	b.n	8003f06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f04:	bf00      	nop
    }

    if (pclk != 0U)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <UART_SetConfig+0x5c4>)
 8003f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	441a      	add	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	d910      	bls.n	8003f58 <UART_SetConfig+0x5c8>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d20c      	bcs.n	8003f58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e009      	b.n	8003f5e <UART_SetConfig+0x5ce>
 8003f4a:	bf00      	nop
 8003f4c:	40008000 	.word	0x40008000
 8003f50:	00f42400 	.word	0x00f42400
 8003f54:	08008e84 	.word	0x08008e84
      }
      else
      {
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2200      	movs	r2, #0
 8003f78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3730      	adds	r7, #48	; 0x30
 8003f82:	46bd      	mov	sp, r7
 8003f84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d10a      	bne.n	800409e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040dc:	f7fd fe5e 	bl	8001d9c <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d10e      	bne.n	800410e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f82f 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e025      	b.n	800415a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d10e      	bne.n	800413a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f819 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e00f      	b.n	800415a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b09c      	sub	sp, #112	; 0x70
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e0a9      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	f000 80a5 	beq.w	80042c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fd fe0d 	bl	8001d9c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <UART_WaitOnFlagUntilTimeout+0x32>
 800418e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004190:	2b00      	cmp	r3, #0
 8004192:	d140      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041a8:	667b      	str	r3, [r7, #100]	; 0x64
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e6      	bne.n	8004194 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3308      	adds	r3, #8
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	663b      	str	r3, [r7, #96]	; 0x60
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e5      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e069      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d051      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d149      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800423c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
 800425e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	66bb      	str	r3, [r7, #104]	; 0x68
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004290:	623a      	str	r2, [r7, #32]
 8004292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	6a3a      	ldr	r2, [r7, #32]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	61bb      	str	r3, [r7, #24]
   return(result);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e010      	b.n	80042ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	f43f af46 	beq.w	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3770      	adds	r7, #112	; 0x70
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_UARTEx_DisableFifoMode+0x16>
 8004304:	2302      	movs	r3, #2
 8004306:	e027      	b.n	8004358 <HAL_UARTEx_DisableFifoMode+0x66>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004336:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e02d      	b.n	80043d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f84f 	bl	800445c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e02d      	b.n	8004454 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	; 0x24
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f811 	bl	800445c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004468:	2b00      	cmp	r3, #0
 800446a:	d108      	bne.n	800447e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800447c:	e031      	b.n	80044e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800447e:	2308      	movs	r3, #8
 8004480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004482:	2308      	movs	r3, #8
 8004484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	0e5b      	lsrs	r3, r3, #25
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	0f5b      	lsrs	r3, r3, #29
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	7b3a      	ldrb	r2, [r7, #12]
 80044aa:	4911      	ldr	r1, [pc, #68]	; (80044f0 <UARTEx_SetNbDataToProcess+0x94>)
 80044ac:	5c8a      	ldrb	r2, [r1, r2]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044b2:	7b3a      	ldrb	r2, [r7, #12]
 80044b4:	490f      	ldr	r1, [pc, #60]	; (80044f4 <UARTEx_SetNbDataToProcess+0x98>)
 80044b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	7b7a      	ldrb	r2, [r7, #13]
 80044c8:	4909      	ldr	r1, [pc, #36]	; (80044f0 <UARTEx_SetNbDataToProcess+0x94>)
 80044ca:	5c8a      	ldrb	r2, [r1, r2]
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044d0:	7b7a      	ldrb	r2, [r7, #13]
 80044d2:	4908      	ldr	r1, [pc, #32]	; (80044f4 <UARTEx_SetNbDataToProcess+0x98>)
 80044d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	08008e9c 	.word	0x08008e9c
 80044f4:	08008ea4 	.word	0x08008ea4

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	2000000c 	.word	0x2000000c

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4d0d      	ldr	r5, [pc, #52]	; (800453c <__libc_init_array+0x38>)
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	2600      	movs	r6, #0
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	4d0b      	ldr	r5, [pc, #44]	; (8004544 <__libc_init_array+0x40>)
 8004516:	4c0c      	ldr	r4, [pc, #48]	; (8004548 <__libc_init_array+0x44>)
 8004518:	f004 fc92 	bl	8008e40 <_init>
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	2600      	movs	r6, #0
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	f855 3b04 	ldr.w	r3, [r5], #4
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	f855 3b04 	ldr.w	r3, [r5], #4
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	0800935c 	.word	0x0800935c
 8004540:	0800935c 	.word	0x0800935c
 8004544:	0800935c 	.word	0x0800935c
 8004548:	08009360 	.word	0x08009360

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <__cvt>:
 800455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	ec55 4b10 	vmov	r4, r5, d0
 8004564:	2d00      	cmp	r5, #0
 8004566:	460e      	mov	r6, r1
 8004568:	4619      	mov	r1, r3
 800456a:	462b      	mov	r3, r5
 800456c:	bfbb      	ittet	lt
 800456e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004572:	461d      	movlt	r5, r3
 8004574:	2300      	movge	r3, #0
 8004576:	232d      	movlt	r3, #45	; 0x2d
 8004578:	700b      	strb	r3, [r1, #0]
 800457a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800457c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004580:	4691      	mov	r9, r2
 8004582:	f023 0820 	bic.w	r8, r3, #32
 8004586:	bfbc      	itt	lt
 8004588:	4622      	movlt	r2, r4
 800458a:	4614      	movlt	r4, r2
 800458c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004590:	d005      	beq.n	800459e <__cvt+0x42>
 8004592:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004596:	d100      	bne.n	800459a <__cvt+0x3e>
 8004598:	3601      	adds	r6, #1
 800459a:	2102      	movs	r1, #2
 800459c:	e000      	b.n	80045a0 <__cvt+0x44>
 800459e:	2103      	movs	r1, #3
 80045a0:	ab03      	add	r3, sp, #12
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	ab02      	add	r3, sp, #8
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	ec45 4b10 	vmov	d0, r4, r5
 80045ac:	4653      	mov	r3, sl
 80045ae:	4632      	mov	r2, r6
 80045b0:	f001 fdae 	bl	8006110 <_dtoa_r>
 80045b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045b8:	4607      	mov	r7, r0
 80045ba:	d102      	bne.n	80045c2 <__cvt+0x66>
 80045bc:	f019 0f01 	tst.w	r9, #1
 80045c0:	d022      	beq.n	8004608 <__cvt+0xac>
 80045c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045c6:	eb07 0906 	add.w	r9, r7, r6
 80045ca:	d110      	bne.n	80045ee <__cvt+0x92>
 80045cc:	783b      	ldrb	r3, [r7, #0]
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d10a      	bne.n	80045e8 <__cvt+0x8c>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fc fa9d 	bl	8000b18 <__aeabi_dcmpeq>
 80045de:	b918      	cbnz	r0, 80045e8 <__cvt+0x8c>
 80045e0:	f1c6 0601 	rsb	r6, r6, #1
 80045e4:	f8ca 6000 	str.w	r6, [sl]
 80045e8:	f8da 3000 	ldr.w	r3, [sl]
 80045ec:	4499      	add	r9, r3
 80045ee:	2200      	movs	r2, #0
 80045f0:	2300      	movs	r3, #0
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 80045fa:	b108      	cbz	r0, 8004600 <__cvt+0xa4>
 80045fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004600:	2230      	movs	r2, #48	; 0x30
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	454b      	cmp	r3, r9
 8004606:	d307      	bcc.n	8004618 <__cvt+0xbc>
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800460c:	1bdb      	subs	r3, r3, r7
 800460e:	4638      	mov	r0, r7
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	b004      	add	sp, #16
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	9103      	str	r1, [sp, #12]
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e7f0      	b.n	8004602 <__cvt+0xa6>

08004620 <__exponent>:
 8004620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004622:	4603      	mov	r3, r0
 8004624:	2900      	cmp	r1, #0
 8004626:	bfb8      	it	lt
 8004628:	4249      	neglt	r1, r1
 800462a:	f803 2b02 	strb.w	r2, [r3], #2
 800462e:	bfb4      	ite	lt
 8004630:	222d      	movlt	r2, #45	; 0x2d
 8004632:	222b      	movge	r2, #43	; 0x2b
 8004634:	2909      	cmp	r1, #9
 8004636:	7042      	strb	r2, [r0, #1]
 8004638:	dd2a      	ble.n	8004690 <__exponent+0x70>
 800463a:	f10d 0407 	add.w	r4, sp, #7
 800463e:	46a4      	mov	ip, r4
 8004640:	270a      	movs	r7, #10
 8004642:	46a6      	mov	lr, r4
 8004644:	460a      	mov	r2, r1
 8004646:	fb91 f6f7 	sdiv	r6, r1, r7
 800464a:	fb07 1516 	mls	r5, r7, r6, r1
 800464e:	3530      	adds	r5, #48	; 0x30
 8004650:	2a63      	cmp	r2, #99	; 0x63
 8004652:	f104 34ff 	add.w	r4, r4, #4294967295
 8004656:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800465a:	4631      	mov	r1, r6
 800465c:	dcf1      	bgt.n	8004642 <__exponent+0x22>
 800465e:	3130      	adds	r1, #48	; 0x30
 8004660:	f1ae 0502 	sub.w	r5, lr, #2
 8004664:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004668:	1c44      	adds	r4, r0, #1
 800466a:	4629      	mov	r1, r5
 800466c:	4561      	cmp	r1, ip
 800466e:	d30a      	bcc.n	8004686 <__exponent+0x66>
 8004670:	f10d 0209 	add.w	r2, sp, #9
 8004674:	eba2 020e 	sub.w	r2, r2, lr
 8004678:	4565      	cmp	r5, ip
 800467a:	bf88      	it	hi
 800467c:	2200      	movhi	r2, #0
 800467e:	4413      	add	r3, r2
 8004680:	1a18      	subs	r0, r3, r0
 8004682:	b003      	add	sp, #12
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800468e:	e7ed      	b.n	800466c <__exponent+0x4c>
 8004690:	2330      	movs	r3, #48	; 0x30
 8004692:	3130      	adds	r1, #48	; 0x30
 8004694:	7083      	strb	r3, [r0, #2]
 8004696:	70c1      	strb	r1, [r0, #3]
 8004698:	1d03      	adds	r3, r0, #4
 800469a:	e7f1      	b.n	8004680 <__exponent+0x60>

0800469c <_printf_float>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	ed2d 8b02 	vpush	{d8}
 80046a4:	b08d      	sub	sp, #52	; 0x34
 80046a6:	460c      	mov	r4, r1
 80046a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046ac:	4616      	mov	r6, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	4605      	mov	r5, r0
 80046b2:	f002 fe8b 	bl	80073cc <_localeconv_r>
 80046b6:	f8d0 a000 	ldr.w	sl, [r0]
 80046ba:	4650      	mov	r0, sl
 80046bc:	f7fb fdb0 	bl	8000220 <strlen>
 80046c0:	2300      	movs	r3, #0
 80046c2:	930a      	str	r3, [sp, #40]	; 0x28
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f8d8 3000 	ldr.w	r3, [r8]
 80046cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046d0:	3307      	adds	r3, #7
 80046d2:	f023 0307 	bic.w	r3, r3, #7
 80046d6:	f103 0208 	add.w	r2, r3, #8
 80046da:	f8c8 2000 	str.w	r2, [r8]
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046ee:	9307      	str	r3, [sp, #28]
 80046f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80046f4:	ee08 0a10 	vmov	s16, r0
 80046f8:	4b9f      	ldr	r3, [pc, #636]	; (8004978 <_printf_float+0x2dc>)
 80046fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	f7fc fa3b 	bl	8000b7c <__aeabi_dcmpun>
 8004706:	bb88      	cbnz	r0, 800476c <_printf_float+0xd0>
 8004708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470c:	4b9a      	ldr	r3, [pc, #616]	; (8004978 <_printf_float+0x2dc>)
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	f7fc fa15 	bl	8000b40 <__aeabi_dcmple>
 8004716:	bb48      	cbnz	r0, 800476c <_printf_float+0xd0>
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fc fa04 	bl	8000b2c <__aeabi_dcmplt>
 8004724:	b110      	cbz	r0, 800472c <_printf_float+0x90>
 8004726:	232d      	movs	r3, #45	; 0x2d
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472c:	4b93      	ldr	r3, [pc, #588]	; (800497c <_printf_float+0x2e0>)
 800472e:	4894      	ldr	r0, [pc, #592]	; (8004980 <_printf_float+0x2e4>)
 8004730:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004734:	bf94      	ite	ls
 8004736:	4698      	movls	r8, r3
 8004738:	4680      	movhi	r8, r0
 800473a:	2303      	movs	r3, #3
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	9b05      	ldr	r3, [sp, #20]
 8004740:	f023 0204 	bic.w	r2, r3, #4
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	f04f 0900 	mov.w	r9, #0
 800474a:	9700      	str	r7, [sp, #0]
 800474c:	4633      	mov	r3, r6
 800474e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 f9d8 	bl	8004b08 <_printf_common>
 8004758:	3001      	adds	r0, #1
 800475a:	f040 8090 	bne.w	800487e <_printf_float+0x1e2>
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	b00d      	add	sp, #52	; 0x34
 8004764:	ecbd 8b02 	vpop	{d8}
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fc fa02 	bl	8000b7c <__aeabi_dcmpun>
 8004778:	b140      	cbz	r0, 800478c <_printf_float+0xf0>
 800477a:	464b      	mov	r3, r9
 800477c:	2b00      	cmp	r3, #0
 800477e:	bfbc      	itt	lt
 8004780:	232d      	movlt	r3, #45	; 0x2d
 8004782:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004786:	487f      	ldr	r0, [pc, #508]	; (8004984 <_printf_float+0x2e8>)
 8004788:	4b7f      	ldr	r3, [pc, #508]	; (8004988 <_printf_float+0x2ec>)
 800478a:	e7d1      	b.n	8004730 <_printf_float+0x94>
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004792:	9206      	str	r2, [sp, #24]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	d13f      	bne.n	8004818 <_printf_float+0x17c>
 8004798:	2306      	movs	r3, #6
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	9b05      	ldr	r3, [sp, #20]
 800479e:	6861      	ldr	r1, [r4, #4]
 80047a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047a4:	2300      	movs	r3, #0
 80047a6:	9303      	str	r3, [sp, #12]
 80047a8:	ab0a      	add	r3, sp, #40	; 0x28
 80047aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047ae:	ab09      	add	r3, sp, #36	; 0x24
 80047b0:	ec49 8b10 	vmov	d0, r8, r9
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6022      	str	r2, [r4, #0]
 80047b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047bc:	4628      	mov	r0, r5
 80047be:	f7ff fecd 	bl	800455c <__cvt>
 80047c2:	9b06      	ldr	r3, [sp, #24]
 80047c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047c6:	2b47      	cmp	r3, #71	; 0x47
 80047c8:	4680      	mov	r8, r0
 80047ca:	d108      	bne.n	80047de <_printf_float+0x142>
 80047cc:	1cc8      	adds	r0, r1, #3
 80047ce:	db02      	blt.n	80047d6 <_printf_float+0x13a>
 80047d0:	6863      	ldr	r3, [r4, #4]
 80047d2:	4299      	cmp	r1, r3
 80047d4:	dd41      	ble.n	800485a <_printf_float+0x1be>
 80047d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80047da:	fa5f fb8b 	uxtb.w	fp, fp
 80047de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047e2:	d820      	bhi.n	8004826 <_printf_float+0x18a>
 80047e4:	3901      	subs	r1, #1
 80047e6:	465a      	mov	r2, fp
 80047e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047ec:	9109      	str	r1, [sp, #36]	; 0x24
 80047ee:	f7ff ff17 	bl	8004620 <__exponent>
 80047f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047f4:	1813      	adds	r3, r2, r0
 80047f6:	2a01      	cmp	r2, #1
 80047f8:	4681      	mov	r9, r0
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	dc02      	bgt.n	8004804 <_printf_float+0x168>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	07d2      	lsls	r2, r2, #31
 8004802:	d501      	bpl.n	8004808 <_printf_float+0x16c>
 8004804:	3301      	adds	r3, #1
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800480c:	2b00      	cmp	r3, #0
 800480e:	d09c      	beq.n	800474a <_printf_float+0xae>
 8004810:	232d      	movs	r3, #45	; 0x2d
 8004812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004816:	e798      	b.n	800474a <_printf_float+0xae>
 8004818:	9a06      	ldr	r2, [sp, #24]
 800481a:	2a47      	cmp	r2, #71	; 0x47
 800481c:	d1be      	bne.n	800479c <_printf_float+0x100>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1bc      	bne.n	800479c <_printf_float+0x100>
 8004822:	2301      	movs	r3, #1
 8004824:	e7b9      	b.n	800479a <_printf_float+0xfe>
 8004826:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800482a:	d118      	bne.n	800485e <_printf_float+0x1c2>
 800482c:	2900      	cmp	r1, #0
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	dd0b      	ble.n	800484a <_printf_float+0x1ae>
 8004832:	6121      	str	r1, [r4, #16]
 8004834:	b913      	cbnz	r3, 800483c <_printf_float+0x1a0>
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	07d0      	lsls	r0, r2, #31
 800483a:	d502      	bpl.n	8004842 <_printf_float+0x1a6>
 800483c:	3301      	adds	r3, #1
 800483e:	440b      	add	r3, r1
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	65a1      	str	r1, [r4, #88]	; 0x58
 8004844:	f04f 0900 	mov.w	r9, #0
 8004848:	e7de      	b.n	8004808 <_printf_float+0x16c>
 800484a:	b913      	cbnz	r3, 8004852 <_printf_float+0x1b6>
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	07d2      	lsls	r2, r2, #31
 8004850:	d501      	bpl.n	8004856 <_printf_float+0x1ba>
 8004852:	3302      	adds	r3, #2
 8004854:	e7f4      	b.n	8004840 <_printf_float+0x1a4>
 8004856:	2301      	movs	r3, #1
 8004858:	e7f2      	b.n	8004840 <_printf_float+0x1a4>
 800485a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800485e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004860:	4299      	cmp	r1, r3
 8004862:	db05      	blt.n	8004870 <_printf_float+0x1d4>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	6121      	str	r1, [r4, #16]
 8004868:	07d8      	lsls	r0, r3, #31
 800486a:	d5ea      	bpl.n	8004842 <_printf_float+0x1a6>
 800486c:	1c4b      	adds	r3, r1, #1
 800486e:	e7e7      	b.n	8004840 <_printf_float+0x1a4>
 8004870:	2900      	cmp	r1, #0
 8004872:	bfd4      	ite	le
 8004874:	f1c1 0202 	rsble	r2, r1, #2
 8004878:	2201      	movgt	r2, #1
 800487a:	4413      	add	r3, r2
 800487c:	e7e0      	b.n	8004840 <_printf_float+0x1a4>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	055a      	lsls	r2, r3, #21
 8004882:	d407      	bmi.n	8004894 <_printf_float+0x1f8>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	4642      	mov	r2, r8
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	d12c      	bne.n	80048ec <_printf_float+0x250>
 8004892:	e764      	b.n	800475e <_printf_float+0xc2>
 8004894:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004898:	f240 80e0 	bls.w	8004a5c <_printf_float+0x3c0>
 800489c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048a0:	2200      	movs	r2, #0
 80048a2:	2300      	movs	r3, #0
 80048a4:	f7fc f938 	bl	8000b18 <__aeabi_dcmpeq>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d034      	beq.n	8004916 <_printf_float+0x27a>
 80048ac:	4a37      	ldr	r2, [pc, #220]	; (800498c <_printf_float+0x2f0>)
 80048ae:	2301      	movs	r3, #1
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f af51 	beq.w	800475e <_printf_float+0xc2>
 80048bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c0:	429a      	cmp	r2, r3
 80048c2:	db02      	blt.n	80048ca <_printf_float+0x22e>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	07d8      	lsls	r0, r3, #31
 80048c8:	d510      	bpl.n	80048ec <_printf_float+0x250>
 80048ca:	ee18 3a10 	vmov	r3, s16
 80048ce:	4652      	mov	r2, sl
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f af41 	beq.w	800475e <_printf_float+0xc2>
 80048dc:	f04f 0800 	mov.w	r8, #0
 80048e0:	f104 091a 	add.w	r9, r4, #26
 80048e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	4543      	cmp	r3, r8
 80048ea:	dc09      	bgt.n	8004900 <_printf_float+0x264>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	079b      	lsls	r3, r3, #30
 80048f0:	f100 8105 	bmi.w	8004afe <_printf_float+0x462>
 80048f4:	68e0      	ldr	r0, [r4, #12]
 80048f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048f8:	4298      	cmp	r0, r3
 80048fa:	bfb8      	it	lt
 80048fc:	4618      	movlt	r0, r3
 80048fe:	e730      	b.n	8004762 <_printf_float+0xc6>
 8004900:	2301      	movs	r3, #1
 8004902:	464a      	mov	r2, r9
 8004904:	4631      	mov	r1, r6
 8004906:	4628      	mov	r0, r5
 8004908:	47b8      	blx	r7
 800490a:	3001      	adds	r0, #1
 800490c:	f43f af27 	beq.w	800475e <_printf_float+0xc2>
 8004910:	f108 0801 	add.w	r8, r8, #1
 8004914:	e7e6      	b.n	80048e4 <_printf_float+0x248>
 8004916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	dc39      	bgt.n	8004990 <_printf_float+0x2f4>
 800491c:	4a1b      	ldr	r2, [pc, #108]	; (800498c <_printf_float+0x2f0>)
 800491e:	2301      	movs	r3, #1
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f af19 	beq.w	800475e <_printf_float+0xc2>
 800492c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004930:	4313      	orrs	r3, r2
 8004932:	d102      	bne.n	800493a <_printf_float+0x29e>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	07d9      	lsls	r1, r3, #31
 8004938:	d5d8      	bpl.n	80048ec <_printf_float+0x250>
 800493a:	ee18 3a10 	vmov	r3, s16
 800493e:	4652      	mov	r2, sl
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	f43f af09 	beq.w	800475e <_printf_float+0xc2>
 800494c:	f04f 0900 	mov.w	r9, #0
 8004950:	f104 0a1a 	add.w	sl, r4, #26
 8004954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004956:	425b      	negs	r3, r3
 8004958:	454b      	cmp	r3, r9
 800495a:	dc01      	bgt.n	8004960 <_printf_float+0x2c4>
 800495c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495e:	e792      	b.n	8004886 <_printf_float+0x1ea>
 8004960:	2301      	movs	r3, #1
 8004962:	4652      	mov	r2, sl
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	f43f aef7 	beq.w	800475e <_printf_float+0xc2>
 8004970:	f109 0901 	add.w	r9, r9, #1
 8004974:	e7ee      	b.n	8004954 <_printf_float+0x2b8>
 8004976:	bf00      	nop
 8004978:	7fefffff 	.word	0x7fefffff
 800497c:	08008eb0 	.word	0x08008eb0
 8004980:	08008eb4 	.word	0x08008eb4
 8004984:	08008ebc 	.word	0x08008ebc
 8004988:	08008eb8 	.word	0x08008eb8
 800498c:	08008ec0 	.word	0x08008ec0
 8004990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004994:	429a      	cmp	r2, r3
 8004996:	bfa8      	it	ge
 8004998:	461a      	movge	r2, r3
 800499a:	2a00      	cmp	r2, #0
 800499c:	4691      	mov	r9, r2
 800499e:	dc37      	bgt.n	8004a10 <_printf_float+0x374>
 80049a0:	f04f 0b00 	mov.w	fp, #0
 80049a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a8:	f104 021a 	add.w	r2, r4, #26
 80049ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049ae:	9305      	str	r3, [sp, #20]
 80049b0:	eba3 0309 	sub.w	r3, r3, r9
 80049b4:	455b      	cmp	r3, fp
 80049b6:	dc33      	bgt.n	8004a20 <_printf_float+0x384>
 80049b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049bc:	429a      	cmp	r2, r3
 80049be:	db3b      	blt.n	8004a38 <_printf_float+0x39c>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07da      	lsls	r2, r3, #31
 80049c4:	d438      	bmi.n	8004a38 <_printf_float+0x39c>
 80049c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c8:	9a05      	ldr	r2, [sp, #20]
 80049ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049cc:	1a9a      	subs	r2, r3, r2
 80049ce:	eba3 0901 	sub.w	r9, r3, r1
 80049d2:	4591      	cmp	r9, r2
 80049d4:	bfa8      	it	ge
 80049d6:	4691      	movge	r9, r2
 80049d8:	f1b9 0f00 	cmp.w	r9, #0
 80049dc:	dc35      	bgt.n	8004a4a <_printf_float+0x3ae>
 80049de:	f04f 0800 	mov.w	r8, #0
 80049e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049e6:	f104 0a1a 	add.w	sl, r4, #26
 80049ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	eba3 0309 	sub.w	r3, r3, r9
 80049f4:	4543      	cmp	r3, r8
 80049f6:	f77f af79 	ble.w	80048ec <_printf_float+0x250>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	f43f aeaa 	beq.w	800475e <_printf_float+0xc2>
 8004a0a:	f108 0801 	add.w	r8, r8, #1
 8004a0e:	e7ec      	b.n	80049ea <_printf_float+0x34e>
 8004a10:	4613      	mov	r3, r2
 8004a12:	4631      	mov	r1, r6
 8004a14:	4642      	mov	r2, r8
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d1c0      	bne.n	80049a0 <_printf_float+0x304>
 8004a1e:	e69e      	b.n	800475e <_printf_float+0xc2>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	9205      	str	r2, [sp, #20]
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f43f ae97 	beq.w	800475e <_printf_float+0xc2>
 8004a30:	9a05      	ldr	r2, [sp, #20]
 8004a32:	f10b 0b01 	add.w	fp, fp, #1
 8004a36:	e7b9      	b.n	80049ac <_printf_float+0x310>
 8004a38:	ee18 3a10 	vmov	r3, s16
 8004a3c:	4652      	mov	r2, sl
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	d1be      	bne.n	80049c6 <_printf_float+0x32a>
 8004a48:	e689      	b.n	800475e <_printf_float+0xc2>
 8004a4a:	9a05      	ldr	r2, [sp, #20]
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	4442      	add	r2, r8
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	d1c1      	bne.n	80049de <_printf_float+0x342>
 8004a5a:	e680      	b.n	800475e <_printf_float+0xc2>
 8004a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a5e:	2a01      	cmp	r2, #1
 8004a60:	dc01      	bgt.n	8004a66 <_printf_float+0x3ca>
 8004a62:	07db      	lsls	r3, r3, #31
 8004a64:	d538      	bpl.n	8004ad8 <_printf_float+0x43c>
 8004a66:	2301      	movs	r3, #1
 8004a68:	4642      	mov	r2, r8
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f ae74 	beq.w	800475e <_printf_float+0xc2>
 8004a76:	ee18 3a10 	vmov	r3, s16
 8004a7a:	4652      	mov	r2, sl
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b8      	blx	r7
 8004a82:	3001      	adds	r0, #1
 8004a84:	f43f ae6b 	beq.w	800475e <_printf_float+0xc2>
 8004a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f7fc f842 	bl	8000b18 <__aeabi_dcmpeq>
 8004a94:	b9d8      	cbnz	r0, 8004ace <_printf_float+0x432>
 8004a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a98:	f108 0201 	add.w	r2, r8, #1
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d10e      	bne.n	8004ac6 <_printf_float+0x42a>
 8004aa8:	e659      	b.n	800475e <_printf_float+0xc2>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4652      	mov	r2, sl
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f ae52 	beq.w	800475e <_printf_float+0xc2>
 8004aba:	f108 0801 	add.w	r8, r8, #1
 8004abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4543      	cmp	r3, r8
 8004ac4:	dcf1      	bgt.n	8004aaa <_printf_float+0x40e>
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004acc:	e6dc      	b.n	8004888 <_printf_float+0x1ec>
 8004ace:	f04f 0800 	mov.w	r8, #0
 8004ad2:	f104 0a1a 	add.w	sl, r4, #26
 8004ad6:	e7f2      	b.n	8004abe <_printf_float+0x422>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	4642      	mov	r2, r8
 8004adc:	e7df      	b.n	8004a9e <_printf_float+0x402>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	464a      	mov	r2, r9
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b8      	blx	r7
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f43f ae38 	beq.w	800475e <_printf_float+0xc2>
 8004aee:	f108 0801 	add.w	r8, r8, #1
 8004af2:	68e3      	ldr	r3, [r4, #12]
 8004af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004af6:	1a5b      	subs	r3, r3, r1
 8004af8:	4543      	cmp	r3, r8
 8004afa:	dcf0      	bgt.n	8004ade <_printf_float+0x442>
 8004afc:	e6fa      	b.n	80048f4 <_printf_float+0x258>
 8004afe:	f04f 0800 	mov.w	r8, #0
 8004b02:	f104 0919 	add.w	r9, r4, #25
 8004b06:	e7f4      	b.n	8004af2 <_printf_float+0x456>

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bfb8      	it	lt
 8004b1c:	4613      	movlt	r3, r2
 8004b1e:	6033      	str	r3, [r6, #0]
 8004b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b24:	4607      	mov	r7, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b10a      	cbz	r2, 8004b2e <_printf_common+0x26>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	bf42      	ittt	mi
 8004b34:	6833      	ldrmi	r3, [r6, #0]
 8004b36:	3302      	addmi	r3, #2
 8004b38:	6033      	strmi	r3, [r6, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	f015 0506 	ands.w	r5, r5, #6
 8004b40:	d106      	bne.n	8004b50 <_printf_common+0x48>
 8004b42:	f104 0a19 	add.w	sl, r4, #25
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	6832      	ldr	r2, [r6, #0]
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dc26      	bgt.n	8004b9e <_printf_common+0x96>
 8004b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b54:	1e13      	subs	r3, r2, #0
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d42b      	bmi.n	8004bb8 <_printf_common+0xb0>
 8004b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b64:	4649      	mov	r1, r9
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d01e      	beq.n	8004bac <_printf_common+0xa4>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	68e5      	ldr	r5, [r4, #12]
 8004b72:	6832      	ldr	r2, [r6, #0]
 8004b74:	f003 0306 	and.w	r3, r3, #6
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	bf08      	it	eq
 8004b7c:	1aad      	subeq	r5, r5, r2
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	6922      	ldr	r2, [r4, #16]
 8004b82:	bf0c      	ite	eq
 8004b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b88:	2500      	movne	r5, #0
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bfc4      	itt	gt
 8004b8e:	1a9b      	subgt	r3, r3, r2
 8004b90:	18ed      	addgt	r5, r5, r3
 8004b92:	2600      	movs	r6, #0
 8004b94:	341a      	adds	r4, #26
 8004b96:	42b5      	cmp	r5, r6
 8004b98:	d11a      	bne.n	8004bd0 <_printf_common+0xc8>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e008      	b.n	8004bb0 <_printf_common+0xa8>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	47c0      	blx	r8
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d103      	bne.n	8004bb4 <_printf_common+0xac>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	e7c6      	b.n	8004b46 <_printf_common+0x3e>
 8004bb8:	18e1      	adds	r1, r4, r3
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	2030      	movs	r0, #48	; 0x30
 8004bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bc2:	4422      	add	r2, r4
 8004bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bcc:	3302      	adds	r3, #2
 8004bce:	e7c7      	b.n	8004b60 <_printf_common+0x58>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d0e6      	beq.n	8004bac <_printf_common+0xa4>
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7d9      	b.n	8004b96 <_printf_common+0x8e>
	...

08004be4 <_printf_i>:
 8004be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	7e0f      	ldrb	r7, [r1, #24]
 8004bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bec:	2f78      	cmp	r7, #120	; 0x78
 8004bee:	4691      	mov	r9, r2
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	469a      	mov	sl, r3
 8004bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bfa:	d807      	bhi.n	8004c0c <_printf_i+0x28>
 8004bfc:	2f62      	cmp	r7, #98	; 0x62
 8004bfe:	d80a      	bhi.n	8004c16 <_printf_i+0x32>
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	f000 80d8 	beq.w	8004db6 <_printf_i+0x1d2>
 8004c06:	2f58      	cmp	r7, #88	; 0x58
 8004c08:	f000 80a3 	beq.w	8004d52 <_printf_i+0x16e>
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c14:	e03a      	b.n	8004c8c <_printf_i+0xa8>
 8004c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c1a:	2b15      	cmp	r3, #21
 8004c1c:	d8f6      	bhi.n	8004c0c <_printf_i+0x28>
 8004c1e:	a101      	add	r1, pc, #4	; (adr r1, 8004c24 <_printf_i+0x40>)
 8004c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c24:	08004c7d 	.word	0x08004c7d
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004c0d 	.word	0x08004c0d
 8004c30:	08004c0d 	.word	0x08004c0d
 8004c34:	08004c0d 	.word	0x08004c0d
 8004c38:	08004c0d 	.word	0x08004c0d
 8004c3c:	08004c91 	.word	0x08004c91
 8004c40:	08004c0d 	.word	0x08004c0d
 8004c44:	08004c0d 	.word	0x08004c0d
 8004c48:	08004c0d 	.word	0x08004c0d
 8004c4c:	08004c0d 	.word	0x08004c0d
 8004c50:	08004d9d 	.word	0x08004d9d
 8004c54:	08004cc1 	.word	0x08004cc1
 8004c58:	08004d7f 	.word	0x08004d7f
 8004c5c:	08004c0d 	.word	0x08004c0d
 8004c60:	08004c0d 	.word	0x08004c0d
 8004c64:	08004dbf 	.word	0x08004dbf
 8004c68:	08004c0d 	.word	0x08004c0d
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004c0d 	.word	0x08004c0d
 8004c74:	08004c0d 	.word	0x08004c0d
 8004c78:	08004d87 	.word	0x08004d87
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	602a      	str	r2, [r5, #0]
 8004c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0a3      	b.n	8004dd8 <_printf_i+0x1f4>
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	6829      	ldr	r1, [r5, #0]
 8004c94:	0606      	lsls	r6, r0, #24
 8004c96:	f101 0304 	add.w	r3, r1, #4
 8004c9a:	d50a      	bpl.n	8004cb2 <_printf_i+0xce>
 8004c9c:	680e      	ldr	r6, [r1, #0]
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	2e00      	cmp	r6, #0
 8004ca2:	da03      	bge.n	8004cac <_printf_i+0xc8>
 8004ca4:	232d      	movs	r3, #45	; 0x2d
 8004ca6:	4276      	negs	r6, r6
 8004ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cac:	485e      	ldr	r0, [pc, #376]	; (8004e28 <_printf_i+0x244>)
 8004cae:	230a      	movs	r3, #10
 8004cb0:	e019      	b.n	8004ce6 <_printf_i+0x102>
 8004cb2:	680e      	ldr	r6, [r1, #0]
 8004cb4:	602b      	str	r3, [r5, #0]
 8004cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cba:	bf18      	it	ne
 8004cbc:	b236      	sxthne	r6, r6
 8004cbe:	e7ef      	b.n	8004ca0 <_printf_i+0xbc>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	1d19      	adds	r1, r3, #4
 8004cc6:	6029      	str	r1, [r5, #0]
 8004cc8:	0601      	lsls	r1, r0, #24
 8004cca:	d501      	bpl.n	8004cd0 <_printf_i+0xec>
 8004ccc:	681e      	ldr	r6, [r3, #0]
 8004cce:	e002      	b.n	8004cd6 <_printf_i+0xf2>
 8004cd0:	0646      	lsls	r6, r0, #25
 8004cd2:	d5fb      	bpl.n	8004ccc <_printf_i+0xe8>
 8004cd4:	881e      	ldrh	r6, [r3, #0]
 8004cd6:	4854      	ldr	r0, [pc, #336]	; (8004e28 <_printf_i+0x244>)
 8004cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cda:	bf0c      	ite	eq
 8004cdc:	2308      	moveq	r3, #8
 8004cde:	230a      	movne	r3, #10
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce6:	6865      	ldr	r5, [r4, #4]
 8004ce8:	60a5      	str	r5, [r4, #8]
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	bfa2      	ittt	ge
 8004cee:	6821      	ldrge	r1, [r4, #0]
 8004cf0:	f021 0104 	bicge.w	r1, r1, #4
 8004cf4:	6021      	strge	r1, [r4, #0]
 8004cf6:	b90e      	cbnz	r6, 8004cfc <_printf_i+0x118>
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d04d      	beq.n	8004d98 <_printf_i+0x1b4>
 8004cfc:	4615      	mov	r5, r2
 8004cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d02:	fb03 6711 	mls	r7, r3, r1, r6
 8004d06:	5dc7      	ldrb	r7, [r0, r7]
 8004d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d0c:	4637      	mov	r7, r6
 8004d0e:	42bb      	cmp	r3, r7
 8004d10:	460e      	mov	r6, r1
 8004d12:	d9f4      	bls.n	8004cfe <_printf_i+0x11a>
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d10b      	bne.n	8004d30 <_printf_i+0x14c>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	07de      	lsls	r6, r3, #31
 8004d1c:	d508      	bpl.n	8004d30 <_printf_i+0x14c>
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	6861      	ldr	r1, [r4, #4]
 8004d22:	4299      	cmp	r1, r3
 8004d24:	bfde      	ittt	le
 8004d26:	2330      	movle	r3, #48	; 0x30
 8004d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d30:	1b52      	subs	r2, r2, r5
 8004d32:	6122      	str	r2, [r4, #16]
 8004d34:	f8cd a000 	str.w	sl, [sp]
 8004d38:	464b      	mov	r3, r9
 8004d3a:	aa03      	add	r2, sp, #12
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f7ff fee2 	bl	8004b08 <_printf_common>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d14c      	bne.n	8004de2 <_printf_i+0x1fe>
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	b004      	add	sp, #16
 8004d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d52:	4835      	ldr	r0, [pc, #212]	; (8004e28 <_printf_i+0x244>)
 8004d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d58:	6829      	ldr	r1, [r5, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d60:	6029      	str	r1, [r5, #0]
 8004d62:	061d      	lsls	r5, r3, #24
 8004d64:	d514      	bpl.n	8004d90 <_printf_i+0x1ac>
 8004d66:	07df      	lsls	r7, r3, #31
 8004d68:	bf44      	itt	mi
 8004d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6e:	6023      	strmi	r3, [r4, #0]
 8004d70:	b91e      	cbnz	r6, 8004d7a <_printf_i+0x196>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f023 0320 	bic.w	r3, r3, #32
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	e7b0      	b.n	8004ce0 <_printf_i+0xfc>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f043 0320 	orr.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2378      	movs	r3, #120	; 0x78
 8004d88:	4828      	ldr	r0, [pc, #160]	; (8004e2c <_printf_i+0x248>)
 8004d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8e:	e7e3      	b.n	8004d58 <_printf_i+0x174>
 8004d90:	0659      	lsls	r1, r3, #25
 8004d92:	bf48      	it	mi
 8004d94:	b2b6      	uxthmi	r6, r6
 8004d96:	e7e6      	b.n	8004d66 <_printf_i+0x182>
 8004d98:	4615      	mov	r5, r2
 8004d9a:	e7bb      	b.n	8004d14 <_printf_i+0x130>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	6826      	ldr	r6, [r4, #0]
 8004da0:	6961      	ldr	r1, [r4, #20]
 8004da2:	1d18      	adds	r0, r3, #4
 8004da4:	6028      	str	r0, [r5, #0]
 8004da6:	0635      	lsls	r5, r6, #24
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	d501      	bpl.n	8004db0 <_printf_i+0x1cc>
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <_printf_i+0x1d2>
 8004db0:	0670      	lsls	r0, r6, #25
 8004db2:	d5fb      	bpl.n	8004dac <_printf_i+0x1c8>
 8004db4:	8019      	strh	r1, [r3, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	4615      	mov	r5, r2
 8004dbc:	e7ba      	b.n	8004d34 <_printf_i+0x150>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	602a      	str	r2, [r5, #0]
 8004dc4:	681d      	ldr	r5, [r3, #0]
 8004dc6:	6862      	ldr	r2, [r4, #4]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fa30 	bl	8000230 <memchr>
 8004dd0:	b108      	cbz	r0, 8004dd6 <_printf_i+0x1f2>
 8004dd2:	1b40      	subs	r0, r0, r5
 8004dd4:	6060      	str	r0, [r4, #4]
 8004dd6:	6863      	ldr	r3, [r4, #4]
 8004dd8:	6123      	str	r3, [r4, #16]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de0:	e7a8      	b.n	8004d34 <_printf_i+0x150>
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	462a      	mov	r2, r5
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d0ab      	beq.n	8004d48 <_printf_i+0x164>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	d413      	bmi.n	8004e1e <_printf_i+0x23a>
 8004df6:	68e0      	ldr	r0, [r4, #12]
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	4298      	cmp	r0, r3
 8004dfc:	bfb8      	it	lt
 8004dfe:	4618      	movlt	r0, r3
 8004e00:	e7a4      	b.n	8004d4c <_printf_i+0x168>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4632      	mov	r2, r6
 8004e06:	4649      	mov	r1, r9
 8004e08:	4640      	mov	r0, r8
 8004e0a:	47d0      	blx	sl
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d09b      	beq.n	8004d48 <_printf_i+0x164>
 8004e10:	3501      	adds	r5, #1
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	9903      	ldr	r1, [sp, #12]
 8004e16:	1a5b      	subs	r3, r3, r1
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dcf2      	bgt.n	8004e02 <_printf_i+0x21e>
 8004e1c:	e7eb      	b.n	8004df6 <_printf_i+0x212>
 8004e1e:	2500      	movs	r5, #0
 8004e20:	f104 0619 	add.w	r6, r4, #25
 8004e24:	e7f5      	b.n	8004e12 <_printf_i+0x22e>
 8004e26:	bf00      	nop
 8004e28:	08008ec2 	.word	0x08008ec2
 8004e2c:	08008ed3 	.word	0x08008ed3

08004e30 <_scanf_float>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	b087      	sub	sp, #28
 8004e36:	4617      	mov	r7, r2
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	688b      	ldr	r3, [r1, #8]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e42:	bf83      	ittte	hi
 8004e44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e48:	195b      	addhi	r3, r3, r5
 8004e4a:	9302      	strhi	r3, [sp, #8]
 8004e4c:	2300      	movls	r3, #0
 8004e4e:	bf86      	itte	hi
 8004e50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e54:	608b      	strhi	r3, [r1, #8]
 8004e56:	9302      	strls	r3, [sp, #8]
 8004e58:	680b      	ldr	r3, [r1, #0]
 8004e5a:	468b      	mov	fp, r1
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004e62:	f84b 3b1c 	str.w	r3, [fp], #28
 8004e66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	465e      	mov	r6, fp
 8004e70:	46aa      	mov	sl, r5
 8004e72:	46a9      	mov	r9, r5
 8004e74:	9501      	str	r5, [sp, #4]
 8004e76:	68a2      	ldr	r2, [r4, #8]
 8004e78:	b152      	cbz	r2, 8004e90 <_scanf_float+0x60>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b4e      	cmp	r3, #78	; 0x4e
 8004e80:	d864      	bhi.n	8004f4c <_scanf_float+0x11c>
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d83c      	bhi.n	8004f00 <_scanf_float+0xd0>
 8004e86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004e8a:	b2c8      	uxtb	r0, r1
 8004e8c:	280e      	cmp	r0, #14
 8004e8e:	d93a      	bls.n	8004f06 <_scanf_float+0xd6>
 8004e90:	f1b9 0f00 	cmp.w	r9, #0
 8004e94:	d003      	beq.n	8004e9e <_scanf_float+0x6e>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ea2:	f1ba 0f01 	cmp.w	sl, #1
 8004ea6:	f200 8113 	bhi.w	80050d0 <_scanf_float+0x2a0>
 8004eaa:	455e      	cmp	r6, fp
 8004eac:	f200 8105 	bhi.w	80050ba <_scanf_float+0x28a>
 8004eb0:	2501      	movs	r5, #1
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	b007      	add	sp, #28
 8004eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ebe:	2a0d      	cmp	r2, #13
 8004ec0:	d8e6      	bhi.n	8004e90 <_scanf_float+0x60>
 8004ec2:	a101      	add	r1, pc, #4	; (adr r1, 8004ec8 <_scanf_float+0x98>)
 8004ec4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ec8:	08005007 	.word	0x08005007
 8004ecc:	08004e91 	.word	0x08004e91
 8004ed0:	08004e91 	.word	0x08004e91
 8004ed4:	08004e91 	.word	0x08004e91
 8004ed8:	08005067 	.word	0x08005067
 8004edc:	0800503f 	.word	0x0800503f
 8004ee0:	08004e91 	.word	0x08004e91
 8004ee4:	08004e91 	.word	0x08004e91
 8004ee8:	08005015 	.word	0x08005015
 8004eec:	08004e91 	.word	0x08004e91
 8004ef0:	08004e91 	.word	0x08004e91
 8004ef4:	08004e91 	.word	0x08004e91
 8004ef8:	08004e91 	.word	0x08004e91
 8004efc:	08004fcd 	.word	0x08004fcd
 8004f00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004f04:	e7db      	b.n	8004ebe <_scanf_float+0x8e>
 8004f06:	290e      	cmp	r1, #14
 8004f08:	d8c2      	bhi.n	8004e90 <_scanf_float+0x60>
 8004f0a:	a001      	add	r0, pc, #4	; (adr r0, 8004f10 <_scanf_float+0xe0>)
 8004f0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f10:	08004fbf 	.word	0x08004fbf
 8004f14:	08004e91 	.word	0x08004e91
 8004f18:	08004fbf 	.word	0x08004fbf
 8004f1c:	08005053 	.word	0x08005053
 8004f20:	08004e91 	.word	0x08004e91
 8004f24:	08004f6d 	.word	0x08004f6d
 8004f28:	08004fa9 	.word	0x08004fa9
 8004f2c:	08004fa9 	.word	0x08004fa9
 8004f30:	08004fa9 	.word	0x08004fa9
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	2b6e      	cmp	r3, #110	; 0x6e
 8004f4e:	d809      	bhi.n	8004f64 <_scanf_float+0x134>
 8004f50:	2b60      	cmp	r3, #96	; 0x60
 8004f52:	d8b2      	bhi.n	8004eba <_scanf_float+0x8a>
 8004f54:	2b54      	cmp	r3, #84	; 0x54
 8004f56:	d077      	beq.n	8005048 <_scanf_float+0x218>
 8004f58:	2b59      	cmp	r3, #89	; 0x59
 8004f5a:	d199      	bne.n	8004e90 <_scanf_float+0x60>
 8004f5c:	2d07      	cmp	r5, #7
 8004f5e:	d197      	bne.n	8004e90 <_scanf_float+0x60>
 8004f60:	2508      	movs	r5, #8
 8004f62:	e029      	b.n	8004fb8 <_scanf_float+0x188>
 8004f64:	2b74      	cmp	r3, #116	; 0x74
 8004f66:	d06f      	beq.n	8005048 <_scanf_float+0x218>
 8004f68:	2b79      	cmp	r3, #121	; 0x79
 8004f6a:	e7f6      	b.n	8004f5a <_scanf_float+0x12a>
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	05c8      	lsls	r0, r1, #23
 8004f70:	d51a      	bpl.n	8004fa8 <_scanf_float+0x178>
 8004f72:	9b02      	ldr	r3, [sp, #8]
 8004f74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f78:	6021      	str	r1, [r4, #0]
 8004f7a:	f109 0901 	add.w	r9, r9, #1
 8004f7e:	b11b      	cbz	r3, 8004f88 <_scanf_float+0x158>
 8004f80:	3b01      	subs	r3, #1
 8004f82:	3201      	adds	r2, #1
 8004f84:	9302      	str	r3, [sp, #8]
 8004f86:	60a2      	str	r2, [r4, #8]
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60a3      	str	r3, [r4, #8]
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	f340 8084 	ble.w	80050a8 <_scanf_float+0x278>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	e766      	b.n	8004e76 <_scanf_float+0x46>
 8004fa8:	eb1a 0f05 	cmn.w	sl, r5
 8004fac:	f47f af70 	bne.w	8004e90 <_scanf_float+0x60>
 8004fb0:	6822      	ldr	r2, [r4, #0]
 8004fb2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004fb6:	6022      	str	r2, [r4, #0]
 8004fb8:	f806 3b01 	strb.w	r3, [r6], #1
 8004fbc:	e7e4      	b.n	8004f88 <_scanf_float+0x158>
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	0610      	lsls	r0, r2, #24
 8004fc2:	f57f af65 	bpl.w	8004e90 <_scanf_float+0x60>
 8004fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fca:	e7f4      	b.n	8004fb6 <_scanf_float+0x186>
 8004fcc:	f1ba 0f00 	cmp.w	sl, #0
 8004fd0:	d10e      	bne.n	8004ff0 <_scanf_float+0x1c0>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	d10e      	bne.n	8004ff6 <_scanf_float+0x1c6>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004fde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004fe2:	d108      	bne.n	8004ff6 <_scanf_float+0x1c6>
 8004fe4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fe8:	6022      	str	r2, [r4, #0]
 8004fea:	f04f 0a01 	mov.w	sl, #1
 8004fee:	e7e3      	b.n	8004fb8 <_scanf_float+0x188>
 8004ff0:	f1ba 0f02 	cmp.w	sl, #2
 8004ff4:	d055      	beq.n	80050a2 <_scanf_float+0x272>
 8004ff6:	2d01      	cmp	r5, #1
 8004ff8:	d002      	beq.n	8005000 <_scanf_float+0x1d0>
 8004ffa:	2d04      	cmp	r5, #4
 8004ffc:	f47f af48 	bne.w	8004e90 <_scanf_float+0x60>
 8005000:	3501      	adds	r5, #1
 8005002:	b2ed      	uxtb	r5, r5
 8005004:	e7d8      	b.n	8004fb8 <_scanf_float+0x188>
 8005006:	f1ba 0f01 	cmp.w	sl, #1
 800500a:	f47f af41 	bne.w	8004e90 <_scanf_float+0x60>
 800500e:	f04f 0a02 	mov.w	sl, #2
 8005012:	e7d1      	b.n	8004fb8 <_scanf_float+0x188>
 8005014:	b97d      	cbnz	r5, 8005036 <_scanf_float+0x206>
 8005016:	f1b9 0f00 	cmp.w	r9, #0
 800501a:	f47f af3c 	bne.w	8004e96 <_scanf_float+0x66>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005024:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005028:	f47f af39 	bne.w	8004e9e <_scanf_float+0x6e>
 800502c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005030:	6022      	str	r2, [r4, #0]
 8005032:	2501      	movs	r5, #1
 8005034:	e7c0      	b.n	8004fb8 <_scanf_float+0x188>
 8005036:	2d03      	cmp	r5, #3
 8005038:	d0e2      	beq.n	8005000 <_scanf_float+0x1d0>
 800503a:	2d05      	cmp	r5, #5
 800503c:	e7de      	b.n	8004ffc <_scanf_float+0x1cc>
 800503e:	2d02      	cmp	r5, #2
 8005040:	f47f af26 	bne.w	8004e90 <_scanf_float+0x60>
 8005044:	2503      	movs	r5, #3
 8005046:	e7b7      	b.n	8004fb8 <_scanf_float+0x188>
 8005048:	2d06      	cmp	r5, #6
 800504a:	f47f af21 	bne.w	8004e90 <_scanf_float+0x60>
 800504e:	2507      	movs	r5, #7
 8005050:	e7b2      	b.n	8004fb8 <_scanf_float+0x188>
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	0591      	lsls	r1, r2, #22
 8005056:	f57f af1b 	bpl.w	8004e90 <_scanf_float+0x60>
 800505a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800505e:	6022      	str	r2, [r4, #0]
 8005060:	f8cd 9004 	str.w	r9, [sp, #4]
 8005064:	e7a8      	b.n	8004fb8 <_scanf_float+0x188>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800506c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005070:	d006      	beq.n	8005080 <_scanf_float+0x250>
 8005072:	0550      	lsls	r0, r2, #21
 8005074:	f57f af0c 	bpl.w	8004e90 <_scanf_float+0x60>
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	f43f af0f 	beq.w	8004e9e <_scanf_float+0x6e>
 8005080:	0591      	lsls	r1, r2, #22
 8005082:	bf58      	it	pl
 8005084:	9901      	ldrpl	r1, [sp, #4]
 8005086:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800508a:	bf58      	it	pl
 800508c:	eba9 0101 	subpl.w	r1, r9, r1
 8005090:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005094:	bf58      	it	pl
 8005096:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	f04f 0900 	mov.w	r9, #0
 80050a0:	e78a      	b.n	8004fb8 <_scanf_float+0x188>
 80050a2:	f04f 0a03 	mov.w	sl, #3
 80050a6:	e787      	b.n	8004fb8 <_scanf_float+0x188>
 80050a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050ac:	4639      	mov	r1, r7
 80050ae:	4640      	mov	r0, r8
 80050b0:	4798      	blx	r3
 80050b2:	2800      	cmp	r0, #0
 80050b4:	f43f aedf 	beq.w	8004e76 <_scanf_float+0x46>
 80050b8:	e6ea      	b.n	8004e90 <_scanf_float+0x60>
 80050ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050c2:	463a      	mov	r2, r7
 80050c4:	4640      	mov	r0, r8
 80050c6:	4798      	blx	r3
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	e6ec      	b.n	8004eaa <_scanf_float+0x7a>
 80050d0:	1e6b      	subs	r3, r5, #1
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d825      	bhi.n	8005122 <_scanf_float+0x2f2>
 80050d6:	2d02      	cmp	r5, #2
 80050d8:	d836      	bhi.n	8005148 <_scanf_float+0x318>
 80050da:	455e      	cmp	r6, fp
 80050dc:	f67f aee8 	bls.w	8004eb0 <_scanf_float+0x80>
 80050e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050e8:	463a      	mov	r2, r7
 80050ea:	4640      	mov	r0, r8
 80050ec:	4798      	blx	r3
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	e7f1      	b.n	80050da <_scanf_float+0x2aa>
 80050f6:	9802      	ldr	r0, [sp, #8]
 80050f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	463a      	mov	r2, r7
 8005104:	4640      	mov	r0, r8
 8005106:	4798      	blx	r3
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	3b01      	subs	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005112:	fa5f fa8a 	uxtb.w	sl, sl
 8005116:	f1ba 0f02 	cmp.w	sl, #2
 800511a:	d1ec      	bne.n	80050f6 <_scanf_float+0x2c6>
 800511c:	3d03      	subs	r5, #3
 800511e:	b2ed      	uxtb	r5, r5
 8005120:	1b76      	subs	r6, r6, r5
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	05da      	lsls	r2, r3, #23
 8005126:	d52f      	bpl.n	8005188 <_scanf_float+0x358>
 8005128:	055b      	lsls	r3, r3, #21
 800512a:	d510      	bpl.n	800514e <_scanf_float+0x31e>
 800512c:	455e      	cmp	r6, fp
 800512e:	f67f aebf 	bls.w	8004eb0 <_scanf_float+0x80>
 8005132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800513a:	463a      	mov	r2, r7
 800513c:	4640      	mov	r0, r8
 800513e:	4798      	blx	r3
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	3b01      	subs	r3, #1
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	e7f1      	b.n	800512c <_scanf_float+0x2fc>
 8005148:	46aa      	mov	sl, r5
 800514a:	9602      	str	r6, [sp, #8]
 800514c:	e7df      	b.n	800510e <_scanf_float+0x2de>
 800514e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	2965      	cmp	r1, #101	; 0x65
 8005156:	f103 33ff 	add.w	r3, r3, #4294967295
 800515a:	f106 35ff 	add.w	r5, r6, #4294967295
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	d00c      	beq.n	800517c <_scanf_float+0x34c>
 8005162:	2945      	cmp	r1, #69	; 0x45
 8005164:	d00a      	beq.n	800517c <_scanf_float+0x34c>
 8005166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800516a:	463a      	mov	r2, r7
 800516c:	4640      	mov	r0, r8
 800516e:	4798      	blx	r3
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005176:	3b01      	subs	r3, #1
 8005178:	1eb5      	subs	r5, r6, #2
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005180:	463a      	mov	r2, r7
 8005182:	4640      	mov	r0, r8
 8005184:	4798      	blx	r3
 8005186:	462e      	mov	r6, r5
 8005188:	6825      	ldr	r5, [r4, #0]
 800518a:	f015 0510 	ands.w	r5, r5, #16
 800518e:	d159      	bne.n	8005244 <_scanf_float+0x414>
 8005190:	7035      	strb	r5, [r6, #0]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519c:	d11b      	bne.n	80051d6 <_scanf_float+0x3a6>
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	454b      	cmp	r3, r9
 80051a2:	eba3 0209 	sub.w	r2, r3, r9
 80051a6:	d123      	bne.n	80051f0 <_scanf_float+0x3c0>
 80051a8:	2200      	movs	r2, #0
 80051aa:	4659      	mov	r1, fp
 80051ac:	4640      	mov	r0, r8
 80051ae:	f000 fe99 	bl	8005ee4 <_strtod_r>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	f012 0f02 	tst.w	r2, #2
 80051ba:	ec57 6b10 	vmov	r6, r7, d0
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	d021      	beq.n	8005206 <_scanf_float+0x3d6>
 80051c2:	9903      	ldr	r1, [sp, #12]
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	600a      	str	r2, [r1, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	e9c3 6700 	strd	r6, r7, [r3]
 80051ce:	68e3      	ldr	r3, [r4, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60e3      	str	r3, [r4, #12]
 80051d4:	e66d      	b.n	8004eb2 <_scanf_float+0x82>
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0e5      	beq.n	80051a8 <_scanf_float+0x378>
 80051dc:	9905      	ldr	r1, [sp, #20]
 80051de:	230a      	movs	r3, #10
 80051e0:	462a      	mov	r2, r5
 80051e2:	3101      	adds	r1, #1
 80051e4:	4640      	mov	r0, r8
 80051e6:	f000 ff05 	bl	8005ff4 <_strtol_r>
 80051ea:	9b04      	ldr	r3, [sp, #16]
 80051ec:	9e05      	ldr	r6, [sp, #20]
 80051ee:	1ac2      	subs	r2, r0, r3
 80051f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80051f4:	429e      	cmp	r6, r3
 80051f6:	bf28      	it	cs
 80051f8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80051fc:	4912      	ldr	r1, [pc, #72]	; (8005248 <_scanf_float+0x418>)
 80051fe:	4630      	mov	r0, r6
 8005200:	f000 f82c 	bl	800525c <siprintf>
 8005204:	e7d0      	b.n	80051a8 <_scanf_float+0x378>
 8005206:	9903      	ldr	r1, [sp, #12]
 8005208:	f012 0f04 	tst.w	r2, #4
 800520c:	f103 0204 	add.w	r2, r3, #4
 8005210:	600a      	str	r2, [r1, #0]
 8005212:	d1d9      	bne.n	80051c8 <_scanf_float+0x398>
 8005214:	f8d3 8000 	ldr.w	r8, [r3]
 8005218:	ee10 2a10 	vmov	r2, s0
 800521c:	ee10 0a10 	vmov	r0, s0
 8005220:	463b      	mov	r3, r7
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fcaa 	bl	8000b7c <__aeabi_dcmpun>
 8005228:	b128      	cbz	r0, 8005236 <_scanf_float+0x406>
 800522a:	4808      	ldr	r0, [pc, #32]	; (800524c <_scanf_float+0x41c>)
 800522c:	f000 f810 	bl	8005250 <nanf>
 8005230:	ed88 0a00 	vstr	s0, [r8]
 8005234:	e7cb      	b.n	80051ce <_scanf_float+0x39e>
 8005236:	4630      	mov	r0, r6
 8005238:	4639      	mov	r1, r7
 800523a:	f7fb fcfd 	bl	8000c38 <__aeabi_d2f>
 800523e:	f8c8 0000 	str.w	r0, [r8]
 8005242:	e7c4      	b.n	80051ce <_scanf_float+0x39e>
 8005244:	2500      	movs	r5, #0
 8005246:	e634      	b.n	8004eb2 <_scanf_float+0x82>
 8005248:	08008ee4 	.word	0x08008ee4
 800524c:	080092f0 	.word	0x080092f0

08005250 <nanf>:
 8005250:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005258 <nanf+0x8>
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	7fc00000 	.word	0x7fc00000

0800525c <siprintf>:
 800525c:	b40e      	push	{r1, r2, r3}
 800525e:	b500      	push	{lr}
 8005260:	b09c      	sub	sp, #112	; 0x70
 8005262:	ab1d      	add	r3, sp, #116	; 0x74
 8005264:	9002      	str	r0, [sp, #8]
 8005266:	9006      	str	r0, [sp, #24]
 8005268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800526c:	4809      	ldr	r0, [pc, #36]	; (8005294 <siprintf+0x38>)
 800526e:	9107      	str	r1, [sp, #28]
 8005270:	9104      	str	r1, [sp, #16]
 8005272:	4909      	ldr	r1, [pc, #36]	; (8005298 <siprintf+0x3c>)
 8005274:	f853 2b04 	ldr.w	r2, [r3], #4
 8005278:	9105      	str	r1, [sp, #20]
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	a902      	add	r1, sp, #8
 8005280:	f002 fee4 	bl	800804c <_svfiprintf_r>
 8005284:	9b02      	ldr	r3, [sp, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	b01c      	add	sp, #112	; 0x70
 800528c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005290:	b003      	add	sp, #12
 8005292:	4770      	bx	lr
 8005294:	2000000c 	.word	0x2000000c
 8005298:	ffff0208 	.word	0xffff0208

0800529c <sulp>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	ec45 4b10 	vmov	d0, r4, r5
 80052a6:	4616      	mov	r6, r2
 80052a8:	f002 fc2e 	bl	8007b08 <__ulp>
 80052ac:	ec51 0b10 	vmov	r0, r1, d0
 80052b0:	b17e      	cbz	r6, 80052d2 <sulp+0x36>
 80052b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80052b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd09      	ble.n	80052d2 <sulp+0x36>
 80052be:	051b      	lsls	r3, r3, #20
 80052c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80052c4:	2400      	movs	r4, #0
 80052c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	f7fb f9bb 	bl	8000648 <__aeabi_dmul>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	0000      	movs	r0, r0
	...

080052d8 <_strtod_l>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b02 	vpush	{d8}
 80052e0:	b09d      	sub	sp, #116	; 0x74
 80052e2:	461f      	mov	r7, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	9318      	str	r3, [sp, #96]	; 0x60
 80052e8:	4ba2      	ldr	r3, [pc, #648]	; (8005574 <_strtod_l+0x29c>)
 80052ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	4604      	mov	r4, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	4688      	mov	r8, r1
 80052f6:	f7fa ff93 	bl	8000220 <strlen>
 80052fa:	f04f 0a00 	mov.w	sl, #0
 80052fe:	4605      	mov	r5, r0
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	2a2b      	cmp	r2, #43	; 0x2b
 800530e:	d04e      	beq.n	80053ae <_strtod_l+0xd6>
 8005310:	d83b      	bhi.n	800538a <_strtod_l+0xb2>
 8005312:	2a0d      	cmp	r2, #13
 8005314:	d834      	bhi.n	8005380 <_strtod_l+0xa8>
 8005316:	2a08      	cmp	r2, #8
 8005318:	d834      	bhi.n	8005384 <_strtod_l+0xac>
 800531a:	2a00      	cmp	r2, #0
 800531c:	d03e      	beq.n	800539c <_strtod_l+0xc4>
 800531e:	2300      	movs	r3, #0
 8005320:	930a      	str	r3, [sp, #40]	; 0x28
 8005322:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005324:	7833      	ldrb	r3, [r6, #0]
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	f040 80b0 	bne.w	800548c <_strtod_l+0x1b4>
 800532c:	7873      	ldrb	r3, [r6, #1]
 800532e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005332:	2b58      	cmp	r3, #88	; 0x58
 8005334:	d168      	bne.n	8005408 <_strtod_l+0x130>
 8005336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	ab18      	add	r3, sp, #96	; 0x60
 800533c:	9702      	str	r7, [sp, #8]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4a8d      	ldr	r2, [pc, #564]	; (8005578 <_strtod_l+0x2a0>)
 8005342:	ab19      	add	r3, sp, #100	; 0x64
 8005344:	a917      	add	r1, sp, #92	; 0x5c
 8005346:	4620      	mov	r0, r4
 8005348:	f001 fd38 	bl	8006dbc <__gethex>
 800534c:	f010 0707 	ands.w	r7, r0, #7
 8005350:	4605      	mov	r5, r0
 8005352:	d005      	beq.n	8005360 <_strtod_l+0x88>
 8005354:	2f06      	cmp	r7, #6
 8005356:	d12c      	bne.n	80053b2 <_strtod_l+0xda>
 8005358:	3601      	adds	r6, #1
 800535a:	2300      	movs	r3, #0
 800535c:	9617      	str	r6, [sp, #92]	; 0x5c
 800535e:	930a      	str	r3, [sp, #40]	; 0x28
 8005360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 8590 	bne.w	8005e88 <_strtod_l+0xbb0>
 8005368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800536a:	b1eb      	cbz	r3, 80053a8 <_strtod_l+0xd0>
 800536c:	4652      	mov	r2, sl
 800536e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005372:	ec43 2b10 	vmov	d0, r2, r3
 8005376:	b01d      	add	sp, #116	; 0x74
 8005378:	ecbd 8b02 	vpop	{d8}
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	2a20      	cmp	r2, #32
 8005382:	d1cc      	bne.n	800531e <_strtod_l+0x46>
 8005384:	3301      	adds	r3, #1
 8005386:	9317      	str	r3, [sp, #92]	; 0x5c
 8005388:	e7be      	b.n	8005308 <_strtod_l+0x30>
 800538a:	2a2d      	cmp	r2, #45	; 0x2d
 800538c:	d1c7      	bne.n	800531e <_strtod_l+0x46>
 800538e:	2201      	movs	r2, #1
 8005390:	920a      	str	r2, [sp, #40]	; 0x28
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	9217      	str	r2, [sp, #92]	; 0x5c
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1c2      	bne.n	8005322 <_strtod_l+0x4a>
 800539c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800539e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 856e 	bne.w	8005e84 <_strtod_l+0xbac>
 80053a8:	4652      	mov	r2, sl
 80053aa:	465b      	mov	r3, fp
 80053ac:	e7e1      	b.n	8005372 <_strtod_l+0x9a>
 80053ae:	2200      	movs	r2, #0
 80053b0:	e7ee      	b.n	8005390 <_strtod_l+0xb8>
 80053b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80053b4:	b13a      	cbz	r2, 80053c6 <_strtod_l+0xee>
 80053b6:	2135      	movs	r1, #53	; 0x35
 80053b8:	a81a      	add	r0, sp, #104	; 0x68
 80053ba:	f002 fcb0 	bl	8007d1e <__copybits>
 80053be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053c0:	4620      	mov	r0, r4
 80053c2:	f002 f86f 	bl	80074a4 <_Bfree>
 80053c6:	3f01      	subs	r7, #1
 80053c8:	2f04      	cmp	r7, #4
 80053ca:	d806      	bhi.n	80053da <_strtod_l+0x102>
 80053cc:	e8df f007 	tbb	[pc, r7]
 80053d0:	1714030a 	.word	0x1714030a
 80053d4:	0a          	.byte	0x0a
 80053d5:	00          	.byte	0x00
 80053d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80053da:	0728      	lsls	r0, r5, #28
 80053dc:	d5c0      	bpl.n	8005360 <_strtod_l+0x88>
 80053de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80053e2:	e7bd      	b.n	8005360 <_strtod_l+0x88>
 80053e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80053e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80053f6:	e7f0      	b.n	80053da <_strtod_l+0x102>
 80053f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800557c <_strtod_l+0x2a4>
 80053fc:	e7ed      	b.n	80053da <_strtod_l+0x102>
 80053fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005402:	f04f 3aff 	mov.w	sl, #4294967295
 8005406:	e7e8      	b.n	80053da <_strtod_l+0x102>
 8005408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	9217      	str	r2, [sp, #92]	; 0x5c
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	d0f9      	beq.n	8005408 <_strtod_l+0x130>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0a3      	beq.n	8005360 <_strtod_l+0x88>
 8005418:	2301      	movs	r3, #1
 800541a:	f04f 0900 	mov.w	r9, #0
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005422:	9308      	str	r3, [sp, #32]
 8005424:	f8cd 901c 	str.w	r9, [sp, #28]
 8005428:	464f      	mov	r7, r9
 800542a:	220a      	movs	r2, #10
 800542c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800542e:	7806      	ldrb	r6, [r0, #0]
 8005430:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005434:	b2d9      	uxtb	r1, r3
 8005436:	2909      	cmp	r1, #9
 8005438:	d92a      	bls.n	8005490 <_strtod_l+0x1b8>
 800543a:	9905      	ldr	r1, [sp, #20]
 800543c:	462a      	mov	r2, r5
 800543e:	f002 ff1f 	bl	8008280 <strncmp>
 8005442:	b398      	cbz	r0, 80054ac <_strtod_l+0x1d4>
 8005444:	2000      	movs	r0, #0
 8005446:	4632      	mov	r2, r6
 8005448:	463d      	mov	r5, r7
 800544a:	9005      	str	r0, [sp, #20]
 800544c:	4603      	mov	r3, r0
 800544e:	2a65      	cmp	r2, #101	; 0x65
 8005450:	d001      	beq.n	8005456 <_strtod_l+0x17e>
 8005452:	2a45      	cmp	r2, #69	; 0x45
 8005454:	d118      	bne.n	8005488 <_strtod_l+0x1b0>
 8005456:	b91d      	cbnz	r5, 8005460 <_strtod_l+0x188>
 8005458:	9a04      	ldr	r2, [sp, #16]
 800545a:	4302      	orrs	r2, r0
 800545c:	d09e      	beq.n	800539c <_strtod_l+0xc4>
 800545e:	2500      	movs	r5, #0
 8005460:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005464:	f108 0201 	add.w	r2, r8, #1
 8005468:	9217      	str	r2, [sp, #92]	; 0x5c
 800546a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800546e:	2a2b      	cmp	r2, #43	; 0x2b
 8005470:	d075      	beq.n	800555e <_strtod_l+0x286>
 8005472:	2a2d      	cmp	r2, #45	; 0x2d
 8005474:	d07b      	beq.n	800556e <_strtod_l+0x296>
 8005476:	f04f 0c00 	mov.w	ip, #0
 800547a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800547e:	2909      	cmp	r1, #9
 8005480:	f240 8082 	bls.w	8005588 <_strtod_l+0x2b0>
 8005484:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005488:	2600      	movs	r6, #0
 800548a:	e09d      	b.n	80055c8 <_strtod_l+0x2f0>
 800548c:	2300      	movs	r3, #0
 800548e:	e7c4      	b.n	800541a <_strtod_l+0x142>
 8005490:	2f08      	cmp	r7, #8
 8005492:	bfd8      	it	le
 8005494:	9907      	ldrle	r1, [sp, #28]
 8005496:	f100 0001 	add.w	r0, r0, #1
 800549a:	bfda      	itte	le
 800549c:	fb02 3301 	mlale	r3, r2, r1, r3
 80054a0:	9307      	strle	r3, [sp, #28]
 80054a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80054a6:	3701      	adds	r7, #1
 80054a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80054aa:	e7bf      	b.n	800542c <_strtod_l+0x154>
 80054ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ae:	195a      	adds	r2, r3, r5
 80054b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80054b2:	5d5a      	ldrb	r2, [r3, r5]
 80054b4:	2f00      	cmp	r7, #0
 80054b6:	d037      	beq.n	8005528 <_strtod_l+0x250>
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	463d      	mov	r5, r7
 80054bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d912      	bls.n	80054ea <_strtod_l+0x212>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e7c2      	b.n	800544e <_strtod_l+0x176>
 80054c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80054ce:	785a      	ldrb	r2, [r3, #1]
 80054d0:	3001      	adds	r0, #1
 80054d2:	2a30      	cmp	r2, #48	; 0x30
 80054d4:	d0f8      	beq.n	80054c8 <_strtod_l+0x1f0>
 80054d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80054da:	2b08      	cmp	r3, #8
 80054dc:	f200 84d9 	bhi.w	8005e92 <_strtod_l+0xbba>
 80054e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054e2:	9005      	str	r0, [sp, #20]
 80054e4:	2000      	movs	r0, #0
 80054e6:	9308      	str	r3, [sp, #32]
 80054e8:	4605      	mov	r5, r0
 80054ea:	3a30      	subs	r2, #48	; 0x30
 80054ec:	f100 0301 	add.w	r3, r0, #1
 80054f0:	d014      	beq.n	800551c <_strtod_l+0x244>
 80054f2:	9905      	ldr	r1, [sp, #20]
 80054f4:	4419      	add	r1, r3
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	462b      	mov	r3, r5
 80054fa:	eb00 0e05 	add.w	lr, r0, r5
 80054fe:	210a      	movs	r1, #10
 8005500:	4573      	cmp	r3, lr
 8005502:	d113      	bne.n	800552c <_strtod_l+0x254>
 8005504:	182b      	adds	r3, r5, r0
 8005506:	2b08      	cmp	r3, #8
 8005508:	f105 0501 	add.w	r5, r5, #1
 800550c:	4405      	add	r5, r0
 800550e:	dc1c      	bgt.n	800554a <_strtod_l+0x272>
 8005510:	9907      	ldr	r1, [sp, #28]
 8005512:	230a      	movs	r3, #10
 8005514:	fb03 2301 	mla	r3, r3, r1, r2
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	2300      	movs	r3, #0
 800551c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800551e:	1c51      	adds	r1, r2, #1
 8005520:	9117      	str	r1, [sp, #92]	; 0x5c
 8005522:	7852      	ldrb	r2, [r2, #1]
 8005524:	4618      	mov	r0, r3
 8005526:	e7c9      	b.n	80054bc <_strtod_l+0x1e4>
 8005528:	4638      	mov	r0, r7
 800552a:	e7d2      	b.n	80054d2 <_strtod_l+0x1fa>
 800552c:	2b08      	cmp	r3, #8
 800552e:	dc04      	bgt.n	800553a <_strtod_l+0x262>
 8005530:	9e07      	ldr	r6, [sp, #28]
 8005532:	434e      	muls	r6, r1
 8005534:	9607      	str	r6, [sp, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	e7e2      	b.n	8005500 <_strtod_l+0x228>
 800553a:	f103 0c01 	add.w	ip, r3, #1
 800553e:	f1bc 0f10 	cmp.w	ip, #16
 8005542:	bfd8      	it	le
 8005544:	fb01 f909 	mulle.w	r9, r1, r9
 8005548:	e7f5      	b.n	8005536 <_strtod_l+0x25e>
 800554a:	2d10      	cmp	r5, #16
 800554c:	bfdc      	itt	le
 800554e:	230a      	movle	r3, #10
 8005550:	fb03 2909 	mlale	r9, r3, r9, r2
 8005554:	e7e1      	b.n	800551a <_strtod_l+0x242>
 8005556:	2300      	movs	r3, #0
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	2301      	movs	r3, #1
 800555c:	e77c      	b.n	8005458 <_strtod_l+0x180>
 800555e:	f04f 0c00 	mov.w	ip, #0
 8005562:	f108 0202 	add.w	r2, r8, #2
 8005566:	9217      	str	r2, [sp, #92]	; 0x5c
 8005568:	f898 2002 	ldrb.w	r2, [r8, #2]
 800556c:	e785      	b.n	800547a <_strtod_l+0x1a2>
 800556e:	f04f 0c01 	mov.w	ip, #1
 8005572:	e7f6      	b.n	8005562 <_strtod_l+0x28a>
 8005574:	08009138 	.word	0x08009138
 8005578:	08008eec 	.word	0x08008eec
 800557c:	7ff00000 	.word	0x7ff00000
 8005580:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005582:	1c51      	adds	r1, r2, #1
 8005584:	9117      	str	r1, [sp, #92]	; 0x5c
 8005586:	7852      	ldrb	r2, [r2, #1]
 8005588:	2a30      	cmp	r2, #48	; 0x30
 800558a:	d0f9      	beq.n	8005580 <_strtod_l+0x2a8>
 800558c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005590:	2908      	cmp	r1, #8
 8005592:	f63f af79 	bhi.w	8005488 <_strtod_l+0x1b0>
 8005596:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800559a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800559c:	9206      	str	r2, [sp, #24]
 800559e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80055a0:	1c51      	adds	r1, r2, #1
 80055a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80055a4:	7852      	ldrb	r2, [r2, #1]
 80055a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80055aa:	2e09      	cmp	r6, #9
 80055ac:	d937      	bls.n	800561e <_strtod_l+0x346>
 80055ae:	9e06      	ldr	r6, [sp, #24]
 80055b0:	1b89      	subs	r1, r1, r6
 80055b2:	2908      	cmp	r1, #8
 80055b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80055b8:	dc02      	bgt.n	80055c0 <_strtod_l+0x2e8>
 80055ba:	4576      	cmp	r6, lr
 80055bc:	bfa8      	it	ge
 80055be:	4676      	movge	r6, lr
 80055c0:	f1bc 0f00 	cmp.w	ip, #0
 80055c4:	d000      	beq.n	80055c8 <_strtod_l+0x2f0>
 80055c6:	4276      	negs	r6, r6
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d14d      	bne.n	8005668 <_strtod_l+0x390>
 80055cc:	9904      	ldr	r1, [sp, #16]
 80055ce:	4301      	orrs	r1, r0
 80055d0:	f47f aec6 	bne.w	8005360 <_strtod_l+0x88>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f aee1 	bne.w	800539c <_strtod_l+0xc4>
 80055da:	2a69      	cmp	r2, #105	; 0x69
 80055dc:	d027      	beq.n	800562e <_strtod_l+0x356>
 80055de:	dc24      	bgt.n	800562a <_strtod_l+0x352>
 80055e0:	2a49      	cmp	r2, #73	; 0x49
 80055e2:	d024      	beq.n	800562e <_strtod_l+0x356>
 80055e4:	2a4e      	cmp	r2, #78	; 0x4e
 80055e6:	f47f aed9 	bne.w	800539c <_strtod_l+0xc4>
 80055ea:	499f      	ldr	r1, [pc, #636]	; (8005868 <_strtod_l+0x590>)
 80055ec:	a817      	add	r0, sp, #92	; 0x5c
 80055ee:	f001 fe3d 	bl	800726c <__match>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f43f aed2 	beq.w	800539c <_strtod_l+0xc4>
 80055f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b28      	cmp	r3, #40	; 0x28
 80055fe:	d12d      	bne.n	800565c <_strtod_l+0x384>
 8005600:	499a      	ldr	r1, [pc, #616]	; (800586c <_strtod_l+0x594>)
 8005602:	aa1a      	add	r2, sp, #104	; 0x68
 8005604:	a817      	add	r0, sp, #92	; 0x5c
 8005606:	f001 fe45 	bl	8007294 <__hexnan>
 800560a:	2805      	cmp	r0, #5
 800560c:	d126      	bne.n	800565c <_strtod_l+0x384>
 800560e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005610:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005614:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005618:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800561c:	e6a0      	b.n	8005360 <_strtod_l+0x88>
 800561e:	210a      	movs	r1, #10
 8005620:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005624:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005628:	e7b9      	b.n	800559e <_strtod_l+0x2c6>
 800562a:	2a6e      	cmp	r2, #110	; 0x6e
 800562c:	e7db      	b.n	80055e6 <_strtod_l+0x30e>
 800562e:	4990      	ldr	r1, [pc, #576]	; (8005870 <_strtod_l+0x598>)
 8005630:	a817      	add	r0, sp, #92	; 0x5c
 8005632:	f001 fe1b 	bl	800726c <__match>
 8005636:	2800      	cmp	r0, #0
 8005638:	f43f aeb0 	beq.w	800539c <_strtod_l+0xc4>
 800563c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800563e:	498d      	ldr	r1, [pc, #564]	; (8005874 <_strtod_l+0x59c>)
 8005640:	3b01      	subs	r3, #1
 8005642:	a817      	add	r0, sp, #92	; 0x5c
 8005644:	9317      	str	r3, [sp, #92]	; 0x5c
 8005646:	f001 fe11 	bl	800726c <__match>
 800564a:	b910      	cbnz	r0, 8005652 <_strtod_l+0x37a>
 800564c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800564e:	3301      	adds	r3, #1
 8005650:	9317      	str	r3, [sp, #92]	; 0x5c
 8005652:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005884 <_strtod_l+0x5ac>
 8005656:	f04f 0a00 	mov.w	sl, #0
 800565a:	e681      	b.n	8005360 <_strtod_l+0x88>
 800565c:	4886      	ldr	r0, [pc, #536]	; (8005878 <_strtod_l+0x5a0>)
 800565e:	f002 fdf7 	bl	8008250 <nan>
 8005662:	ec5b ab10 	vmov	sl, fp, d0
 8005666:	e67b      	b.n	8005360 <_strtod_l+0x88>
 8005668:	9b05      	ldr	r3, [sp, #20]
 800566a:	9807      	ldr	r0, [sp, #28]
 800566c:	1af3      	subs	r3, r6, r3
 800566e:	2f00      	cmp	r7, #0
 8005670:	bf08      	it	eq
 8005672:	462f      	moveq	r7, r5
 8005674:	2d10      	cmp	r5, #16
 8005676:	9306      	str	r3, [sp, #24]
 8005678:	46a8      	mov	r8, r5
 800567a:	bfa8      	it	ge
 800567c:	f04f 0810 	movge.w	r8, #16
 8005680:	f7fa ff68 	bl	8000554 <__aeabi_ui2d>
 8005684:	2d09      	cmp	r5, #9
 8005686:	4682      	mov	sl, r0
 8005688:	468b      	mov	fp, r1
 800568a:	dd13      	ble.n	80056b4 <_strtod_l+0x3dc>
 800568c:	4b7b      	ldr	r3, [pc, #492]	; (800587c <_strtod_l+0x5a4>)
 800568e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005692:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005696:	f7fa ffd7 	bl	8000648 <__aeabi_dmul>
 800569a:	4682      	mov	sl, r0
 800569c:	4648      	mov	r0, r9
 800569e:	468b      	mov	fp, r1
 80056a0:	f7fa ff58 	bl	8000554 <__aeabi_ui2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4650      	mov	r0, sl
 80056aa:	4659      	mov	r1, fp
 80056ac:	f7fa fe16 	bl	80002dc <__adddf3>
 80056b0:	4682      	mov	sl, r0
 80056b2:	468b      	mov	fp, r1
 80056b4:	2d0f      	cmp	r5, #15
 80056b6:	dc38      	bgt.n	800572a <_strtod_l+0x452>
 80056b8:	9b06      	ldr	r3, [sp, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f43f ae50 	beq.w	8005360 <_strtod_l+0x88>
 80056c0:	dd24      	ble.n	800570c <_strtod_l+0x434>
 80056c2:	2b16      	cmp	r3, #22
 80056c4:	dc0b      	bgt.n	80056de <_strtod_l+0x406>
 80056c6:	496d      	ldr	r1, [pc, #436]	; (800587c <_strtod_l+0x5a4>)
 80056c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d0:	4652      	mov	r2, sl
 80056d2:	465b      	mov	r3, fp
 80056d4:	f7fa ffb8 	bl	8000648 <__aeabi_dmul>
 80056d8:	4682      	mov	sl, r0
 80056da:	468b      	mov	fp, r1
 80056dc:	e640      	b.n	8005360 <_strtod_l+0x88>
 80056de:	9a06      	ldr	r2, [sp, #24]
 80056e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80056e4:	4293      	cmp	r3, r2
 80056e6:	db20      	blt.n	800572a <_strtod_l+0x452>
 80056e8:	4c64      	ldr	r4, [pc, #400]	; (800587c <_strtod_l+0x5a4>)
 80056ea:	f1c5 050f 	rsb	r5, r5, #15
 80056ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80056f2:	4652      	mov	r2, sl
 80056f4:	465b      	mov	r3, fp
 80056f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fa:	f7fa ffa5 	bl	8000648 <__aeabi_dmul>
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	1b5d      	subs	r5, r3, r5
 8005702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800570a:	e7e3      	b.n	80056d4 <_strtod_l+0x3fc>
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	3316      	adds	r3, #22
 8005710:	db0b      	blt.n	800572a <_strtod_l+0x452>
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	1b9e      	subs	r6, r3, r6
 8005716:	4b59      	ldr	r3, [pc, #356]	; (800587c <_strtod_l+0x5a4>)
 8005718:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800571c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005720:	4650      	mov	r0, sl
 8005722:	4659      	mov	r1, fp
 8005724:	f7fb f8ba 	bl	800089c <__aeabi_ddiv>
 8005728:	e7d6      	b.n	80056d8 <_strtod_l+0x400>
 800572a:	9b06      	ldr	r3, [sp, #24]
 800572c:	eba5 0808 	sub.w	r8, r5, r8
 8005730:	4498      	add	r8, r3
 8005732:	f1b8 0f00 	cmp.w	r8, #0
 8005736:	dd74      	ble.n	8005822 <_strtod_l+0x54a>
 8005738:	f018 030f 	ands.w	r3, r8, #15
 800573c:	d00a      	beq.n	8005754 <_strtod_l+0x47c>
 800573e:	494f      	ldr	r1, [pc, #316]	; (800587c <_strtod_l+0x5a4>)
 8005740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005744:	4652      	mov	r2, sl
 8005746:	465b      	mov	r3, fp
 8005748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574c:	f7fa ff7c 	bl	8000648 <__aeabi_dmul>
 8005750:	4682      	mov	sl, r0
 8005752:	468b      	mov	fp, r1
 8005754:	f038 080f 	bics.w	r8, r8, #15
 8005758:	d04f      	beq.n	80057fa <_strtod_l+0x522>
 800575a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800575e:	dd22      	ble.n	80057a6 <_strtod_l+0x4ce>
 8005760:	2500      	movs	r5, #0
 8005762:	462e      	mov	r6, r5
 8005764:	9507      	str	r5, [sp, #28]
 8005766:	9505      	str	r5, [sp, #20]
 8005768:	2322      	movs	r3, #34	; 0x22
 800576a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005884 <_strtod_l+0x5ac>
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	f04f 0a00 	mov.w	sl, #0
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f43f adf2 	beq.w	8005360 <_strtod_l+0x88>
 800577c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800577e:	4620      	mov	r0, r4
 8005780:	f001 fe90 	bl	80074a4 <_Bfree>
 8005784:	9905      	ldr	r1, [sp, #20]
 8005786:	4620      	mov	r0, r4
 8005788:	f001 fe8c 	bl	80074a4 <_Bfree>
 800578c:	4631      	mov	r1, r6
 800578e:	4620      	mov	r0, r4
 8005790:	f001 fe88 	bl	80074a4 <_Bfree>
 8005794:	9907      	ldr	r1, [sp, #28]
 8005796:	4620      	mov	r0, r4
 8005798:	f001 fe84 	bl	80074a4 <_Bfree>
 800579c:	4629      	mov	r1, r5
 800579e:	4620      	mov	r0, r4
 80057a0:	f001 fe80 	bl	80074a4 <_Bfree>
 80057a4:	e5dc      	b.n	8005360 <_strtod_l+0x88>
 80057a6:	4b36      	ldr	r3, [pc, #216]	; (8005880 <_strtod_l+0x5a8>)
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	4699      	mov	r9, r3
 80057b6:	f1b8 0f01 	cmp.w	r8, #1
 80057ba:	dc21      	bgt.n	8005800 <_strtod_l+0x528>
 80057bc:	b10b      	cbz	r3, 80057c2 <_strtod_l+0x4ea>
 80057be:	4682      	mov	sl, r0
 80057c0:	468b      	mov	fp, r1
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <_strtod_l+0x5a8>)
 80057c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80057c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80057d4:	f7fa ff38 	bl	8000648 <__aeabi_dmul>
 80057d8:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <_strtod_l+0x5ac>)
 80057da:	460a      	mov	r2, r1
 80057dc:	400b      	ands	r3, r1
 80057de:	492a      	ldr	r1, [pc, #168]	; (8005888 <_strtod_l+0x5b0>)
 80057e0:	428b      	cmp	r3, r1
 80057e2:	4682      	mov	sl, r0
 80057e4:	d8bc      	bhi.n	8005760 <_strtod_l+0x488>
 80057e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80057ea:	428b      	cmp	r3, r1
 80057ec:	bf86      	itte	hi
 80057ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800588c <_strtod_l+0x5b4>
 80057f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80057f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80057fa:	2300      	movs	r3, #0
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	e084      	b.n	800590a <_strtod_l+0x632>
 8005800:	f018 0f01 	tst.w	r8, #1
 8005804:	d005      	beq.n	8005812 <_strtod_l+0x53a>
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa ff1c 	bl	8000648 <__aeabi_dmul>
 8005810:	2301      	movs	r3, #1
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	3208      	adds	r2, #8
 8005816:	f109 0901 	add.w	r9, r9, #1
 800581a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800581e:	9204      	str	r2, [sp, #16]
 8005820:	e7c9      	b.n	80057b6 <_strtod_l+0x4de>
 8005822:	d0ea      	beq.n	80057fa <_strtod_l+0x522>
 8005824:	f1c8 0800 	rsb	r8, r8, #0
 8005828:	f018 020f 	ands.w	r2, r8, #15
 800582c:	d00a      	beq.n	8005844 <_strtod_l+0x56c>
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <_strtod_l+0x5a4>)
 8005830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fb f82e 	bl	800089c <__aeabi_ddiv>
 8005840:	4682      	mov	sl, r0
 8005842:	468b      	mov	fp, r1
 8005844:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005848:	d0d7      	beq.n	80057fa <_strtod_l+0x522>
 800584a:	f1b8 0f1f 	cmp.w	r8, #31
 800584e:	dd1f      	ble.n	8005890 <_strtod_l+0x5b8>
 8005850:	2500      	movs	r5, #0
 8005852:	462e      	mov	r6, r5
 8005854:	9507      	str	r5, [sp, #28]
 8005856:	9505      	str	r5, [sp, #20]
 8005858:	2322      	movs	r3, #34	; 0x22
 800585a:	f04f 0a00 	mov.w	sl, #0
 800585e:	f04f 0b00 	mov.w	fp, #0
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	e786      	b.n	8005774 <_strtod_l+0x49c>
 8005866:	bf00      	nop
 8005868:	08008ebd 	.word	0x08008ebd
 800586c:	08008f00 	.word	0x08008f00
 8005870:	08008eb5 	.word	0x08008eb5
 8005874:	08009044 	.word	0x08009044
 8005878:	080092f0 	.word	0x080092f0
 800587c:	080091d0 	.word	0x080091d0
 8005880:	080091a8 	.word	0x080091a8
 8005884:	7ff00000 	.word	0x7ff00000
 8005888:	7ca00000 	.word	0x7ca00000
 800588c:	7fefffff 	.word	0x7fefffff
 8005890:	f018 0310 	ands.w	r3, r8, #16
 8005894:	bf18      	it	ne
 8005896:	236a      	movne	r3, #106	; 0x6a
 8005898:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005c48 <_strtod_l+0x970>
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	4650      	mov	r0, sl
 80058a0:	4659      	mov	r1, fp
 80058a2:	2300      	movs	r3, #0
 80058a4:	f018 0f01 	tst.w	r8, #1
 80058a8:	d004      	beq.n	80058b4 <_strtod_l+0x5dc>
 80058aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80058ae:	f7fa fecb 	bl	8000648 <__aeabi_dmul>
 80058b2:	2301      	movs	r3, #1
 80058b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80058b8:	f109 0908 	add.w	r9, r9, #8
 80058bc:	d1f2      	bne.n	80058a4 <_strtod_l+0x5cc>
 80058be:	b10b      	cbz	r3, 80058c4 <_strtod_l+0x5ec>
 80058c0:	4682      	mov	sl, r0
 80058c2:	468b      	mov	fp, r1
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	b1c3      	cbz	r3, 80058fa <_strtod_l+0x622>
 80058c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80058cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	4659      	mov	r1, fp
 80058d4:	dd11      	ble.n	80058fa <_strtod_l+0x622>
 80058d6:	2b1f      	cmp	r3, #31
 80058d8:	f340 8124 	ble.w	8005b24 <_strtod_l+0x84c>
 80058dc:	2b34      	cmp	r3, #52	; 0x34
 80058de:	bfde      	ittt	le
 80058e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80058e4:	f04f 33ff 	movle.w	r3, #4294967295
 80058e8:	fa03 f202 	lslle.w	r2, r3, r2
 80058ec:	f04f 0a00 	mov.w	sl, #0
 80058f0:	bfcc      	ite	gt
 80058f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80058f6:	ea02 0b01 	andle.w	fp, r2, r1
 80058fa:	2200      	movs	r2, #0
 80058fc:	2300      	movs	r3, #0
 80058fe:	4650      	mov	r0, sl
 8005900:	4659      	mov	r1, fp
 8005902:	f7fb f909 	bl	8000b18 <__aeabi_dcmpeq>
 8005906:	2800      	cmp	r0, #0
 8005908:	d1a2      	bne.n	8005850 <_strtod_l+0x578>
 800590a:	9b07      	ldr	r3, [sp, #28]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	9908      	ldr	r1, [sp, #32]
 8005910:	462b      	mov	r3, r5
 8005912:	463a      	mov	r2, r7
 8005914:	4620      	mov	r0, r4
 8005916:	f001 fe2d 	bl	8007574 <__s2b>
 800591a:	9007      	str	r0, [sp, #28]
 800591c:	2800      	cmp	r0, #0
 800591e:	f43f af1f 	beq.w	8005760 <_strtod_l+0x488>
 8005922:	9b05      	ldr	r3, [sp, #20]
 8005924:	1b9e      	subs	r6, r3, r6
 8005926:	9b06      	ldr	r3, [sp, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfb4      	ite	lt
 800592c:	4633      	movlt	r3, r6
 800592e:	2300      	movge	r3, #0
 8005930:	930c      	str	r3, [sp, #48]	; 0x30
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	2500      	movs	r5, #0
 8005936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800593a:	9312      	str	r3, [sp, #72]	; 0x48
 800593c:	462e      	mov	r6, r5
 800593e:	9b07      	ldr	r3, [sp, #28]
 8005940:	4620      	mov	r0, r4
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	f001 fd6e 	bl	8007424 <_Balloc>
 8005948:	9005      	str	r0, [sp, #20]
 800594a:	2800      	cmp	r0, #0
 800594c:	f43f af0c 	beq.w	8005768 <_strtod_l+0x490>
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	3202      	adds	r2, #2
 8005956:	f103 010c 	add.w	r1, r3, #12
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	300c      	adds	r0, #12
 800595e:	f001 fd53 	bl	8007408 <memcpy>
 8005962:	ec4b ab10 	vmov	d0, sl, fp
 8005966:	aa1a      	add	r2, sp, #104	; 0x68
 8005968:	a919      	add	r1, sp, #100	; 0x64
 800596a:	4620      	mov	r0, r4
 800596c:	f002 f948 	bl	8007c00 <__d2b>
 8005970:	ec4b ab18 	vmov	d8, sl, fp
 8005974:	9018      	str	r0, [sp, #96]	; 0x60
 8005976:	2800      	cmp	r0, #0
 8005978:	f43f aef6 	beq.w	8005768 <_strtod_l+0x490>
 800597c:	2101      	movs	r1, #1
 800597e:	4620      	mov	r0, r4
 8005980:	f001 fe92 	bl	80076a8 <__i2b>
 8005984:	4606      	mov	r6, r0
 8005986:	2800      	cmp	r0, #0
 8005988:	f43f aeee 	beq.w	8005768 <_strtod_l+0x490>
 800598c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800598e:	9904      	ldr	r1, [sp, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfab      	itete	ge
 8005994:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005996:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005998:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800599a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800599e:	bfac      	ite	ge
 80059a0:	eb03 0902 	addge.w	r9, r3, r2
 80059a4:	1ad7      	sublt	r7, r2, r3
 80059a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80059a8:	eba3 0801 	sub.w	r8, r3, r1
 80059ac:	4490      	add	r8, r2
 80059ae:	4ba1      	ldr	r3, [pc, #644]	; (8005c34 <_strtod_l+0x95c>)
 80059b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80059b4:	4598      	cmp	r8, r3
 80059b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80059ba:	f280 80c7 	bge.w	8005b4c <_strtod_l+0x874>
 80059be:	eba3 0308 	sub.w	r3, r3, r8
 80059c2:	2b1f      	cmp	r3, #31
 80059c4:	eba2 0203 	sub.w	r2, r2, r3
 80059c8:	f04f 0101 	mov.w	r1, #1
 80059cc:	f300 80b1 	bgt.w	8005b32 <_strtod_l+0x85a>
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	930d      	str	r3, [sp, #52]	; 0x34
 80059d6:	2300      	movs	r3, #0
 80059d8:	9308      	str	r3, [sp, #32]
 80059da:	eb09 0802 	add.w	r8, r9, r2
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	45c1      	cmp	r9, r8
 80059e2:	4417      	add	r7, r2
 80059e4:	441f      	add	r7, r3
 80059e6:	464b      	mov	r3, r9
 80059e8:	bfa8      	it	ge
 80059ea:	4643      	movge	r3, r8
 80059ec:	42bb      	cmp	r3, r7
 80059ee:	bfa8      	it	ge
 80059f0:	463b      	movge	r3, r7
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfc2      	ittt	gt
 80059f6:	eba8 0803 	subgt.w	r8, r8, r3
 80059fa:	1aff      	subgt	r7, r7, r3
 80059fc:	eba9 0903 	subgt.w	r9, r9, r3
 8005a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd17      	ble.n	8005a36 <_strtod_l+0x75e>
 8005a06:	4631      	mov	r1, r6
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f001 ff0c 	bl	8007828 <__pow5mult>
 8005a10:	4606      	mov	r6, r0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f43f aea8 	beq.w	8005768 <_strtod_l+0x490>
 8005a18:	4601      	mov	r1, r0
 8005a1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f001 fe59 	bl	80076d4 <__multiply>
 8005a22:	900b      	str	r0, [sp, #44]	; 0x2c
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f43f ae9f 	beq.w	8005768 <_strtod_l+0x490>
 8005a2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f001 fd39 	bl	80074a4 <_Bfree>
 8005a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a34:	9318      	str	r3, [sp, #96]	; 0x60
 8005a36:	f1b8 0f00 	cmp.w	r8, #0
 8005a3a:	f300 808c 	bgt.w	8005b56 <_strtod_l+0x87e>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	dd08      	ble.n	8005a56 <_strtod_l+0x77e>
 8005a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a46:	9905      	ldr	r1, [sp, #20]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f001 feed 	bl	8007828 <__pow5mult>
 8005a4e:	9005      	str	r0, [sp, #20]
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f43f ae89 	beq.w	8005768 <_strtod_l+0x490>
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	dd08      	ble.n	8005a6c <_strtod_l+0x794>
 8005a5a:	9905      	ldr	r1, [sp, #20]
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f001 ff3c 	bl	80078dc <__lshift>
 8005a64:	9005      	str	r0, [sp, #20]
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f ae7e 	beq.w	8005768 <_strtod_l+0x490>
 8005a6c:	f1b9 0f00 	cmp.w	r9, #0
 8005a70:	dd08      	ble.n	8005a84 <_strtod_l+0x7ac>
 8005a72:	4631      	mov	r1, r6
 8005a74:	464a      	mov	r2, r9
 8005a76:	4620      	mov	r0, r4
 8005a78:	f001 ff30 	bl	80078dc <__lshift>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f43f ae72 	beq.w	8005768 <_strtod_l+0x490>
 8005a84:	9a05      	ldr	r2, [sp, #20]
 8005a86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 ffb3 	bl	80079f4 <__mdiff>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f ae69 	beq.w	8005768 <_strtod_l+0x490>
 8005a96:	68c3      	ldr	r3, [r0, #12]
 8005a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60c3      	str	r3, [r0, #12]
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	f001 ff8c 	bl	80079bc <__mcmp>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	da60      	bge.n	8005b6a <_strtod_l+0x892>
 8005aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8005aae:	f040 8082 	bne.w	8005bb6 <_strtod_l+0x8de>
 8005ab2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d17d      	bne.n	8005bb6 <_strtod_l+0x8de>
 8005aba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005abe:	0d1b      	lsrs	r3, r3, #20
 8005ac0:	051b      	lsls	r3, r3, #20
 8005ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ac6:	d976      	bls.n	8005bb6 <_strtod_l+0x8de>
 8005ac8:	696b      	ldr	r3, [r5, #20]
 8005aca:	b913      	cbnz	r3, 8005ad2 <_strtod_l+0x7fa>
 8005acc:	692b      	ldr	r3, [r5, #16]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	dd71      	ble.n	8005bb6 <_strtod_l+0x8de>
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f001 ff00 	bl	80078dc <__lshift>
 8005adc:	4631      	mov	r1, r6
 8005ade:	4605      	mov	r5, r0
 8005ae0:	f001 ff6c 	bl	80079bc <__mcmp>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	dd66      	ble.n	8005bb6 <_strtod_l+0x8de>
 8005ae8:	9904      	ldr	r1, [sp, #16]
 8005aea:	4a53      	ldr	r2, [pc, #332]	; (8005c38 <_strtod_l+0x960>)
 8005aec:	465b      	mov	r3, fp
 8005aee:	2900      	cmp	r1, #0
 8005af0:	f000 8081 	beq.w	8005bf6 <_strtod_l+0x91e>
 8005af4:	ea02 010b 	and.w	r1, r2, fp
 8005af8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005afc:	dc7b      	bgt.n	8005bf6 <_strtod_l+0x91e>
 8005afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b02:	f77f aea9 	ble.w	8005858 <_strtod_l+0x580>
 8005b06:	4b4d      	ldr	r3, [pc, #308]	; (8005c3c <_strtod_l+0x964>)
 8005b08:	4650      	mov	r0, sl
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f7fa fd9b 	bl	8000648 <__aeabi_dmul>
 8005b12:	460b      	mov	r3, r1
 8005b14:	4303      	orrs	r3, r0
 8005b16:	bf08      	it	eq
 8005b18:	2322      	moveq	r3, #34	; 0x22
 8005b1a:	4682      	mov	sl, r0
 8005b1c:	468b      	mov	fp, r1
 8005b1e:	bf08      	it	eq
 8005b20:	6023      	streq	r3, [r4, #0]
 8005b22:	e62b      	b.n	800577c <_strtod_l+0x4a4>
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	ea03 0a0a 	and.w	sl, r3, sl
 8005b30:	e6e3      	b.n	80058fa <_strtod_l+0x622>
 8005b32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005b36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005b3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005b3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005b42:	fa01 f308 	lsl.w	r3, r1, r8
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	910d      	str	r1, [sp, #52]	; 0x34
 8005b4a:	e746      	b.n	80059da <_strtod_l+0x702>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9308      	str	r3, [sp, #32]
 8005b50:	2301      	movs	r3, #1
 8005b52:	930d      	str	r3, [sp, #52]	; 0x34
 8005b54:	e741      	b.n	80059da <_strtod_l+0x702>
 8005b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b58:	4642      	mov	r2, r8
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f001 febe 	bl	80078dc <__lshift>
 8005b60:	9018      	str	r0, [sp, #96]	; 0x60
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f47f af6b 	bne.w	8005a3e <_strtod_l+0x766>
 8005b68:	e5fe      	b.n	8005768 <_strtod_l+0x490>
 8005b6a:	465f      	mov	r7, fp
 8005b6c:	d16e      	bne.n	8005c4c <_strtod_l+0x974>
 8005b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b74:	b342      	cbz	r2, 8005bc8 <_strtod_l+0x8f0>
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <_strtod_l+0x968>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d128      	bne.n	8005bce <_strtod_l+0x8f6>
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	4651      	mov	r1, sl
 8005b80:	b1eb      	cbz	r3, 8005bbe <_strtod_l+0x8e6>
 8005b82:	4b2d      	ldr	r3, [pc, #180]	; (8005c38 <_strtod_l+0x960>)
 8005b84:	403b      	ands	r3, r7
 8005b86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	d819      	bhi.n	8005bc4 <_strtod_l+0x8ec>
 8005b90:	0d1b      	lsrs	r3, r3, #20
 8005b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d117      	bne.n	8005bce <_strtod_l+0x8f6>
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <_strtod_l+0x96c>)
 8005ba0:	429f      	cmp	r7, r3
 8005ba2:	d102      	bne.n	8005baa <_strtod_l+0x8d2>
 8005ba4:	3101      	adds	r1, #1
 8005ba6:	f43f addf 	beq.w	8005768 <_strtod_l+0x490>
 8005baa:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <_strtod_l+0x960>)
 8005bac:	403b      	ands	r3, r7
 8005bae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005bb2:	f04f 0a00 	mov.w	sl, #0
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1a4      	bne.n	8005b06 <_strtod_l+0x82e>
 8005bbc:	e5de      	b.n	800577c <_strtod_l+0x4a4>
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	e7ea      	b.n	8005b9a <_strtod_l+0x8c2>
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	e7e8      	b.n	8005b9a <_strtod_l+0x8c2>
 8005bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8005bcc:	d08c      	beq.n	8005ae8 <_strtod_l+0x810>
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	b1db      	cbz	r3, 8005c0a <_strtod_l+0x932>
 8005bd2:	423b      	tst	r3, r7
 8005bd4:	d0ef      	beq.n	8005bb6 <_strtod_l+0x8de>
 8005bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	b1c3      	cbz	r3, 8005c12 <_strtod_l+0x93a>
 8005be0:	f7ff fb5c 	bl	800529c <sulp>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	ec51 0b18 	vmov	r0, r1, d8
 8005bec:	f7fa fb76 	bl	80002dc <__adddf3>
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	468b      	mov	fp, r1
 8005bf4:	e7df      	b.n	8005bb6 <_strtod_l+0x8de>
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005bfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c04:	f04f 3aff 	mov.w	sl, #4294967295
 8005c08:	e7d5      	b.n	8005bb6 <_strtod_l+0x8de>
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	ea13 0f0a 	tst.w	r3, sl
 8005c10:	e7e0      	b.n	8005bd4 <_strtod_l+0x8fc>
 8005c12:	f7ff fb43 	bl	800529c <sulp>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	ec51 0b18 	vmov	r0, r1, d8
 8005c1e:	f7fa fb5b 	bl	80002d8 <__aeabi_dsub>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4682      	mov	sl, r0
 8005c28:	468b      	mov	fp, r1
 8005c2a:	f7fa ff75 	bl	8000b18 <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0c1      	beq.n	8005bb6 <_strtod_l+0x8de>
 8005c32:	e611      	b.n	8005858 <_strtod_l+0x580>
 8005c34:	fffffc02 	.word	0xfffffc02
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	39500000 	.word	0x39500000
 8005c40:	000fffff 	.word	0x000fffff
 8005c44:	7fefffff 	.word	0x7fefffff
 8005c48:	08008f18 	.word	0x08008f18
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f002 f832 	bl	8007cb8 <__ratio>
 8005c54:	ec59 8b10 	vmov	r8, r9, d0
 8005c58:	ee10 0a10 	vmov	r0, s0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa ff6c 	bl	8000b40 <__aeabi_dcmple>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d07a      	beq.n	8005d62 <_strtod_l+0xa8a>
 8005c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04a      	beq.n	8005d08 <_strtod_l+0xa30>
 8005c72:	4b95      	ldr	r3, [pc, #596]	; (8005ec8 <_strtod_l+0xbf0>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005ec8 <_strtod_l+0xbf0>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	4b92      	ldr	r3, [pc, #584]	; (8005ecc <_strtod_l+0xbf4>)
 8005c84:	403b      	ands	r3, r7
 8005c86:	930d      	str	r3, [sp, #52]	; 0x34
 8005c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c8a:	4b91      	ldr	r3, [pc, #580]	; (8005ed0 <_strtod_l+0xbf8>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	f040 80b0 	bne.w	8005df2 <_strtod_l+0xb1a>
 8005c92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005c9a:	ec4b ab10 	vmov	d0, sl, fp
 8005c9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ca2:	f001 ff31 	bl	8007b08 <__ulp>
 8005ca6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005caa:	ec53 2b10 	vmov	r2, r3, d0
 8005cae:	f7fa fccb 	bl	8000648 <__aeabi_dmul>
 8005cb2:	4652      	mov	r2, sl
 8005cb4:	465b      	mov	r3, fp
 8005cb6:	f7fa fb11 	bl	80002dc <__adddf3>
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4983      	ldr	r1, [pc, #524]	; (8005ecc <_strtod_l+0xbf4>)
 8005cbe:	4a85      	ldr	r2, [pc, #532]	; (8005ed4 <_strtod_l+0xbfc>)
 8005cc0:	4019      	ands	r1, r3
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	d960      	bls.n	8005d8a <_strtod_l+0xab2>
 8005cc8:	ee18 3a90 	vmov	r3, s17
 8005ccc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d104      	bne.n	8005cde <_strtod_l+0xa06>
 8005cd4:	ee18 3a10 	vmov	r3, s16
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f43f ad45 	beq.w	8005768 <_strtod_l+0x490>
 8005cde:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005ee0 <_strtod_l+0xc08>
 8005ce2:	f04f 3aff 	mov.w	sl, #4294967295
 8005ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f001 fbdb 	bl	80074a4 <_Bfree>
 8005cee:	9905      	ldr	r1, [sp, #20]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f001 fbd7 	bl	80074a4 <_Bfree>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f001 fbd3 	bl	80074a4 <_Bfree>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4620      	mov	r0, r4
 8005d02:	f001 fbcf 	bl	80074a4 <_Bfree>
 8005d06:	e61a      	b.n	800593e <_strtod_l+0x666>
 8005d08:	f1ba 0f00 	cmp.w	sl, #0
 8005d0c:	d11b      	bne.n	8005d46 <_strtod_l+0xa6e>
 8005d0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d12:	b9f3      	cbnz	r3, 8005d52 <_strtod_l+0xa7a>
 8005d14:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <_strtod_l+0xbf0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa ff06 	bl	8000b2c <__aeabi_dcmplt>
 8005d20:	b9d0      	cbnz	r0, 8005d58 <_strtod_l+0xa80>
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <_strtod_l+0xc00>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f7fa fc8d 	bl	8000648 <__aeabi_dmul>
 8005d2e:	4680      	mov	r8, r0
 8005d30:	4689      	mov	r9, r1
 8005d32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005d3a:	9315      	str	r3, [sp, #84]	; 0x54
 8005d3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005d40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d44:	e79d      	b.n	8005c82 <_strtod_l+0x9aa>
 8005d46:	f1ba 0f01 	cmp.w	sl, #1
 8005d4a:	d102      	bne.n	8005d52 <_strtod_l+0xa7a>
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	f43f ad83 	beq.w	8005858 <_strtod_l+0x580>
 8005d52:	4b62      	ldr	r3, [pc, #392]	; (8005edc <_strtod_l+0xc04>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	e78e      	b.n	8005c76 <_strtod_l+0x99e>
 8005d58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005ed8 <_strtod_l+0xc00>
 8005d5c:	f04f 0800 	mov.w	r8, #0
 8005d60:	e7e7      	b.n	8005d32 <_strtod_l+0xa5a>
 8005d62:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <_strtod_l+0xc00>)
 8005d64:	4640      	mov	r0, r8
 8005d66:	4649      	mov	r1, r9
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f7fa fc6d 	bl	8000648 <__aeabi_dmul>
 8005d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d70:	4680      	mov	r8, r0
 8005d72:	4689      	mov	r9, r1
 8005d74:	b933      	cbnz	r3, 8005d84 <_strtod_l+0xaac>
 8005d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d7a:	900e      	str	r0, [sp, #56]	; 0x38
 8005d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005d82:	e7dd      	b.n	8005d40 <_strtod_l+0xa68>
 8005d84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005d88:	e7f9      	b.n	8005d7e <_strtod_l+0xaa6>
 8005d8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1a8      	bne.n	8005ce6 <_strtod_l+0xa0e>
 8005d94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d9a:	0d1b      	lsrs	r3, r3, #20
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d1a1      	bne.n	8005ce6 <_strtod_l+0xa0e>
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa ffaf 	bl	8000d08 <__aeabi_d2lz>
 8005daa:	f7fa fc1f 	bl	80005ec <__aeabi_l2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fa8f 	bl	80002d8 <__aeabi_dsub>
 8005dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dc0:	ea43 030a 	orr.w	r3, r3, sl
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	4689      	mov	r9, r1
 8005dca:	d055      	beq.n	8005e78 <_strtod_l+0xba0>
 8005dcc:	a336      	add	r3, pc, #216	; (adr r3, 8005ea8 <_strtod_l+0xbd0>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa feab 	bl	8000b2c <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f47f acd0 	bne.w	800577c <_strtod_l+0x4a4>
 8005ddc:	a334      	add	r3, pc, #208	; (adr r3, 8005eb0 <_strtod_l+0xbd8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	4640      	mov	r0, r8
 8005de4:	4649      	mov	r1, r9
 8005de6:	f7fa febf 	bl	8000b68 <__aeabi_dcmpgt>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	f43f af7b 	beq.w	8005ce6 <_strtod_l+0xa0e>
 8005df0:	e4c4      	b.n	800577c <_strtod_l+0x4a4>
 8005df2:	9b04      	ldr	r3, [sp, #16]
 8005df4:	b333      	cbz	r3, 8005e44 <_strtod_l+0xb6c>
 8005df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005dfc:	d822      	bhi.n	8005e44 <_strtod_l+0xb6c>
 8005dfe:	a32e      	add	r3, pc, #184	; (adr r3, 8005eb8 <_strtod_l+0xbe0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa fe9a 	bl	8000b40 <__aeabi_dcmple>
 8005e0c:	b1a0      	cbz	r0, 8005e38 <_strtod_l+0xb60>
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	f7fa fef1 	bl	8000bf8 <__aeabi_d2uiz>
 8005e16:	2801      	cmp	r0, #1
 8005e18:	bf38      	it	cc
 8005e1a:	2001      	movcc	r0, #1
 8005e1c:	f7fa fb9a 	bl	8000554 <__aeabi_ui2d>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e22:	4680      	mov	r8, r0
 8005e24:	4689      	mov	r9, r1
 8005e26:	bb23      	cbnz	r3, 8005e72 <_strtod_l+0xb9a>
 8005e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e2c:	9010      	str	r0, [sp, #64]	; 0x40
 8005e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8005e30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e48:	eeb0 0a48 	vmov.f32	s0, s16
 8005e4c:	eef0 0a68 	vmov.f32	s1, s17
 8005e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e54:	f001 fe58 	bl	8007b08 <__ulp>
 8005e58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e5c:	ec53 2b10 	vmov	r2, r3, d0
 8005e60:	f7fa fbf2 	bl	8000648 <__aeabi_dmul>
 8005e64:	ec53 2b18 	vmov	r2, r3, d8
 8005e68:	f7fa fa38 	bl	80002dc <__adddf3>
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	468b      	mov	fp, r1
 8005e70:	e78d      	b.n	8005d8e <_strtod_l+0xab6>
 8005e72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005e76:	e7db      	b.n	8005e30 <_strtod_l+0xb58>
 8005e78:	a311      	add	r3, pc, #68	; (adr r3, 8005ec0 <_strtod_l+0xbe8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fe55 	bl	8000b2c <__aeabi_dcmplt>
 8005e82:	e7b2      	b.n	8005dea <_strtod_l+0xb12>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930a      	str	r3, [sp, #40]	; 0x28
 8005e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	f7ff ba6b 	b.w	8005368 <_strtod_l+0x90>
 8005e92:	2a65      	cmp	r2, #101	; 0x65
 8005e94:	f43f ab5f 	beq.w	8005556 <_strtod_l+0x27e>
 8005e98:	2a45      	cmp	r2, #69	; 0x45
 8005e9a:	f43f ab5c 	beq.w	8005556 <_strtod_l+0x27e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f7ff bb94 	b.w	80055cc <_strtod_l+0x2f4>
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	94a03595 	.word	0x94a03595
 8005eac:	3fdfffff 	.word	0x3fdfffff
 8005eb0:	35afe535 	.word	0x35afe535
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	ffc00000 	.word	0xffc00000
 8005ebc:	41dfffff 	.word	0x41dfffff
 8005ec0:	94a03595 	.word	0x94a03595
 8005ec4:	3fcfffff 	.word	0x3fcfffff
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	7ff00000 	.word	0x7ff00000
 8005ed0:	7fe00000 	.word	0x7fe00000
 8005ed4:	7c9fffff 	.word	0x7c9fffff
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	bff00000 	.word	0xbff00000
 8005ee0:	7fefffff 	.word	0x7fefffff

08005ee4 <_strtod_r>:
 8005ee4:	4b01      	ldr	r3, [pc, #4]	; (8005eec <_strtod_r+0x8>)
 8005ee6:	f7ff b9f7 	b.w	80052d8 <_strtod_l>
 8005eea:	bf00      	nop
 8005eec:	20000074 	.word	0x20000074

08005ef0 <_strtol_l.constprop.0>:
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef6:	d001      	beq.n	8005efc <_strtol_l.constprop.0+0xc>
 8005ef8:	2b24      	cmp	r3, #36	; 0x24
 8005efa:	d906      	bls.n	8005f0a <_strtol_l.constprop.0+0x1a>
 8005efc:	f7fe fafc 	bl	80044f8 <__errno>
 8005f00:	2316      	movs	r3, #22
 8005f02:	6003      	str	r3, [r0, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005ff0 <_strtol_l.constprop.0+0x100>
 8005f0e:	460d      	mov	r5, r1
 8005f10:	462e      	mov	r6, r5
 8005f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005f1a:	f017 0708 	ands.w	r7, r7, #8
 8005f1e:	d1f7      	bne.n	8005f10 <_strtol_l.constprop.0+0x20>
 8005f20:	2c2d      	cmp	r4, #45	; 0x2d
 8005f22:	d132      	bne.n	8005f8a <_strtol_l.constprop.0+0x9a>
 8005f24:	782c      	ldrb	r4, [r5, #0]
 8005f26:	2701      	movs	r7, #1
 8005f28:	1cb5      	adds	r5, r6, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d05b      	beq.n	8005fe6 <_strtol_l.constprop.0+0xf6>
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d109      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005f32:	2c30      	cmp	r4, #48	; 0x30
 8005f34:	d107      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005f36:	782c      	ldrb	r4, [r5, #0]
 8005f38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f3c:	2c58      	cmp	r4, #88	; 0x58
 8005f3e:	d14d      	bne.n	8005fdc <_strtol_l.constprop.0+0xec>
 8005f40:	786c      	ldrb	r4, [r5, #1]
 8005f42:	2310      	movs	r3, #16
 8005f44:	3502      	adds	r5, #2
 8005f46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f4e:	f04f 0c00 	mov.w	ip, #0
 8005f52:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f56:	4666      	mov	r6, ip
 8005f58:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005f60:	f1be 0f09 	cmp.w	lr, #9
 8005f64:	d816      	bhi.n	8005f94 <_strtol_l.constprop.0+0xa4>
 8005f66:	4674      	mov	r4, lr
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	dd24      	ble.n	8005fb6 <_strtol_l.constprop.0+0xc6>
 8005f6c:	f1bc 0f00 	cmp.w	ip, #0
 8005f70:	db1e      	blt.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f72:	45b1      	cmp	r9, r6
 8005f74:	d31c      	bcc.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f76:	d101      	bne.n	8005f7c <_strtol_l.constprop.0+0x8c>
 8005f78:	45a2      	cmp	sl, r4
 8005f7a:	db19      	blt.n	8005fb0 <_strtol_l.constprop.0+0xc0>
 8005f7c:	fb06 4603 	mla	r6, r6, r3, r4
 8005f80:	f04f 0c01 	mov.w	ip, #1
 8005f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f88:	e7e8      	b.n	8005f5c <_strtol_l.constprop.0+0x6c>
 8005f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f8c:	bf04      	itt	eq
 8005f8e:	782c      	ldrbeq	r4, [r5, #0]
 8005f90:	1cb5      	addeq	r5, r6, #2
 8005f92:	e7ca      	b.n	8005f2a <_strtol_l.constprop.0+0x3a>
 8005f94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f98:	f1be 0f19 	cmp.w	lr, #25
 8005f9c:	d801      	bhi.n	8005fa2 <_strtol_l.constprop.0+0xb2>
 8005f9e:	3c37      	subs	r4, #55	; 0x37
 8005fa0:	e7e2      	b.n	8005f68 <_strtol_l.constprop.0+0x78>
 8005fa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005fa6:	f1be 0f19 	cmp.w	lr, #25
 8005faa:	d804      	bhi.n	8005fb6 <_strtol_l.constprop.0+0xc6>
 8005fac:	3c57      	subs	r4, #87	; 0x57
 8005fae:	e7db      	b.n	8005f68 <_strtol_l.constprop.0+0x78>
 8005fb0:	f04f 3cff 	mov.w	ip, #4294967295
 8005fb4:	e7e6      	b.n	8005f84 <_strtol_l.constprop.0+0x94>
 8005fb6:	f1bc 0f00 	cmp.w	ip, #0
 8005fba:	da05      	bge.n	8005fc8 <_strtol_l.constprop.0+0xd8>
 8005fbc:	2322      	movs	r3, #34	; 0x22
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	4646      	mov	r6, r8
 8005fc2:	b942      	cbnz	r2, 8005fd6 <_strtol_l.constprop.0+0xe6>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	e79e      	b.n	8005f06 <_strtol_l.constprop.0+0x16>
 8005fc8:	b107      	cbz	r7, 8005fcc <_strtol_l.constprop.0+0xdc>
 8005fca:	4276      	negs	r6, r6
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	d0f9      	beq.n	8005fc4 <_strtol_l.constprop.0+0xd4>
 8005fd0:	f1bc 0f00 	cmp.w	ip, #0
 8005fd4:	d000      	beq.n	8005fd8 <_strtol_l.constprop.0+0xe8>
 8005fd6:	1e69      	subs	r1, r5, #1
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	e7f3      	b.n	8005fc4 <_strtol_l.constprop.0+0xd4>
 8005fdc:	2430      	movs	r4, #48	; 0x30
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1b1      	bne.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	e7af      	b.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fe6:	2c30      	cmp	r4, #48	; 0x30
 8005fe8:	d0a5      	beq.n	8005f36 <_strtol_l.constprop.0+0x46>
 8005fea:	230a      	movs	r3, #10
 8005fec:	e7ab      	b.n	8005f46 <_strtol_l.constprop.0+0x56>
 8005fee:	bf00      	nop
 8005ff0:	08008f41 	.word	0x08008f41

08005ff4 <_strtol_r>:
 8005ff4:	f7ff bf7c 	b.w	8005ef0 <_strtol_l.constprop.0>

08005ff8 <quorem>:
 8005ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	690c      	ldr	r4, [r1, #16]
 8006000:	42a3      	cmp	r3, r4
 8006002:	4607      	mov	r7, r0
 8006004:	f2c0 8081 	blt.w	800610a <quorem+0x112>
 8006008:	3c01      	subs	r4, #1
 800600a:	f101 0814 	add.w	r8, r1, #20
 800600e:	f100 0514 	add.w	r5, r0, #20
 8006012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800601c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006020:	3301      	adds	r3, #1
 8006022:	429a      	cmp	r2, r3
 8006024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800602c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006030:	d331      	bcc.n	8006096 <quorem+0x9e>
 8006032:	f04f 0e00 	mov.w	lr, #0
 8006036:	4640      	mov	r0, r8
 8006038:	46ac      	mov	ip, r5
 800603a:	46f2      	mov	sl, lr
 800603c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006040:	b293      	uxth	r3, r2
 8006042:	fb06 e303 	mla	r3, r6, r3, lr
 8006046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800604a:	b29b      	uxth	r3, r3
 800604c:	ebaa 0303 	sub.w	r3, sl, r3
 8006050:	f8dc a000 	ldr.w	sl, [ip]
 8006054:	0c12      	lsrs	r2, r2, #16
 8006056:	fa13 f38a 	uxtah	r3, r3, sl
 800605a:	fb06 e202 	mla	r2, r6, r2, lr
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	9b00      	ldr	r3, [sp, #0]
 8006062:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006066:	b292      	uxth	r2, r2
 8006068:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800606c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006070:	f8bd 3000 	ldrh.w	r3, [sp]
 8006074:	4581      	cmp	r9, r0
 8006076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607a:	f84c 3b04 	str.w	r3, [ip], #4
 800607e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006082:	d2db      	bcs.n	800603c <quorem+0x44>
 8006084:	f855 300b 	ldr.w	r3, [r5, fp]
 8006088:	b92b      	cbnz	r3, 8006096 <quorem+0x9e>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	3b04      	subs	r3, #4
 800608e:	429d      	cmp	r5, r3
 8006090:	461a      	mov	r2, r3
 8006092:	d32e      	bcc.n	80060f2 <quorem+0xfa>
 8006094:	613c      	str	r4, [r7, #16]
 8006096:	4638      	mov	r0, r7
 8006098:	f001 fc90 	bl	80079bc <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	db24      	blt.n	80060ea <quorem+0xf2>
 80060a0:	3601      	adds	r6, #1
 80060a2:	4628      	mov	r0, r5
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ac:	f8d0 e000 	ldr.w	lr, [r0]
 80060b0:	b293      	uxth	r3, r2
 80060b2:	ebac 0303 	sub.w	r3, ip, r3
 80060b6:	0c12      	lsrs	r2, r2, #16
 80060b8:	fa13 f38e 	uxtah	r3, r3, lr
 80060bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ca:	45c1      	cmp	r9, r8
 80060cc:	f840 3b04 	str.w	r3, [r0], #4
 80060d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060d4:	d2e8      	bcs.n	80060a8 <quorem+0xb0>
 80060d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	b922      	cbnz	r2, 80060ea <quorem+0xf2>
 80060e0:	3b04      	subs	r3, #4
 80060e2:	429d      	cmp	r5, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	d30a      	bcc.n	80060fe <quorem+0x106>
 80060e8:	613c      	str	r4, [r7, #16]
 80060ea:	4630      	mov	r0, r6
 80060ec:	b003      	add	sp, #12
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	3b04      	subs	r3, #4
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	d1cc      	bne.n	8006094 <quorem+0x9c>
 80060fa:	3c01      	subs	r4, #1
 80060fc:	e7c7      	b.n	800608e <quorem+0x96>
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	3b04      	subs	r3, #4
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1f0      	bne.n	80060e8 <quorem+0xf0>
 8006106:	3c01      	subs	r4, #1
 8006108:	e7eb      	b.n	80060e2 <quorem+0xea>
 800610a:	2000      	movs	r0, #0
 800610c:	e7ee      	b.n	80060ec <quorem+0xf4>
	...

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ed2d 8b04 	vpush	{d8-d9}
 8006118:	ec57 6b10 	vmov	r6, r7, d0
 800611c:	b093      	sub	sp, #76	; 0x4c
 800611e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006124:	9106      	str	r1, [sp, #24]
 8006126:	ee10 aa10 	vmov	sl, s0
 800612a:	4604      	mov	r4, r0
 800612c:	9209      	str	r2, [sp, #36]	; 0x24
 800612e:	930c      	str	r3, [sp, #48]	; 0x30
 8006130:	46bb      	mov	fp, r7
 8006132:	b975      	cbnz	r5, 8006152 <_dtoa_r+0x42>
 8006134:	2010      	movs	r0, #16
 8006136:	f001 f94d 	bl	80073d4 <malloc>
 800613a:	4602      	mov	r2, r0
 800613c:	6260      	str	r0, [r4, #36]	; 0x24
 800613e:	b920      	cbnz	r0, 800614a <_dtoa_r+0x3a>
 8006140:	4ba7      	ldr	r3, [pc, #668]	; (80063e0 <_dtoa_r+0x2d0>)
 8006142:	21ea      	movs	r1, #234	; 0xea
 8006144:	48a7      	ldr	r0, [pc, #668]	; (80063e4 <_dtoa_r+0x2d4>)
 8006146:	f002 f8bd 	bl	80082c4 <__assert_func>
 800614a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800614e:	6005      	str	r5, [r0, #0]
 8006150:	60c5      	str	r5, [r0, #12]
 8006152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	b151      	cbz	r1, 800616e <_dtoa_r+0x5e>
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	604a      	str	r2, [r1, #4]
 800615c:	2301      	movs	r3, #1
 800615e:	4093      	lsls	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
 8006162:	4620      	mov	r0, r4
 8006164:	f001 f99e 	bl	80074a4 <_Bfree>
 8006168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	1e3b      	subs	r3, r7, #0
 8006170:	bfaa      	itet	ge
 8006172:	2300      	movge	r3, #0
 8006174:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006178:	f8c8 3000 	strge.w	r3, [r8]
 800617c:	4b9a      	ldr	r3, [pc, #616]	; (80063e8 <_dtoa_r+0x2d8>)
 800617e:	bfbc      	itt	lt
 8006180:	2201      	movlt	r2, #1
 8006182:	f8c8 2000 	strlt.w	r2, [r8]
 8006186:	ea33 030b 	bics.w	r3, r3, fp
 800618a:	d11b      	bne.n	80061c4 <_dtoa_r+0xb4>
 800618c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800618e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006198:	4333      	orrs	r3, r6
 800619a:	f000 8592 	beq.w	8006cc2 <_dtoa_r+0xbb2>
 800619e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061a0:	b963      	cbnz	r3, 80061bc <_dtoa_r+0xac>
 80061a2:	4b92      	ldr	r3, [pc, #584]	; (80063ec <_dtoa_r+0x2dc>)
 80061a4:	e022      	b.n	80061ec <_dtoa_r+0xdc>
 80061a6:	4b92      	ldr	r3, [pc, #584]	; (80063f0 <_dtoa_r+0x2e0>)
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	3308      	adds	r3, #8
 80061ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	9801      	ldr	r0, [sp, #4]
 80061b2:	b013      	add	sp, #76	; 0x4c
 80061b4:	ecbd 8b04 	vpop	{d8-d9}
 80061b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	4b8b      	ldr	r3, [pc, #556]	; (80063ec <_dtoa_r+0x2dc>)
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	3303      	adds	r3, #3
 80061c2:	e7f3      	b.n	80061ac <_dtoa_r+0x9c>
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	4650      	mov	r0, sl
 80061ca:	4659      	mov	r1, fp
 80061cc:	f7fa fca4 	bl	8000b18 <__aeabi_dcmpeq>
 80061d0:	ec4b ab19 	vmov	d9, sl, fp
 80061d4:	4680      	mov	r8, r0
 80061d6:	b158      	cbz	r0, 80061f0 <_dtoa_r+0xe0>
 80061d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061da:	2301      	movs	r3, #1
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 856b 	beq.w	8006cbc <_dtoa_r+0xbac>
 80061e6:	4883      	ldr	r0, [pc, #524]	; (80063f4 <_dtoa_r+0x2e4>)
 80061e8:	6018      	str	r0, [r3, #0]
 80061ea:	1e43      	subs	r3, r0, #1
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	e7df      	b.n	80061b0 <_dtoa_r+0xa0>
 80061f0:	ec4b ab10 	vmov	d0, sl, fp
 80061f4:	aa10      	add	r2, sp, #64	; 0x40
 80061f6:	a911      	add	r1, sp, #68	; 0x44
 80061f8:	4620      	mov	r0, r4
 80061fa:	f001 fd01 	bl	8007c00 <__d2b>
 80061fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006202:	ee08 0a10 	vmov	s16, r0
 8006206:	2d00      	cmp	r5, #0
 8006208:	f000 8084 	beq.w	8006314 <_dtoa_r+0x204>
 800620c:	ee19 3a90 	vmov	r3, s19
 8006210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006214:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006218:	4656      	mov	r6, sl
 800621a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800621e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006222:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006226:	4b74      	ldr	r3, [pc, #464]	; (80063f8 <_dtoa_r+0x2e8>)
 8006228:	2200      	movs	r2, #0
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa f853 	bl	80002d8 <__aeabi_dsub>
 8006232:	a365      	add	r3, pc, #404	; (adr r3, 80063c8 <_dtoa_r+0x2b8>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa fa06 	bl	8000648 <__aeabi_dmul>
 800623c:	a364      	add	r3, pc, #400	; (adr r3, 80063d0 <_dtoa_r+0x2c0>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7fa f84b 	bl	80002dc <__adddf3>
 8006246:	4606      	mov	r6, r0
 8006248:	4628      	mov	r0, r5
 800624a:	460f      	mov	r7, r1
 800624c:	f7fa f992 	bl	8000574 <__aeabi_i2d>
 8006250:	a361      	add	r3, pc, #388	; (adr r3, 80063d8 <_dtoa_r+0x2c8>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7fa f9f7 	bl	8000648 <__aeabi_dmul>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	f7fa f83b 	bl	80002dc <__adddf3>
 8006266:	4606      	mov	r6, r0
 8006268:	460f      	mov	r7, r1
 800626a:	f7fa fc9d 	bl	8000ba8 <__aeabi_d2iz>
 800626e:	2200      	movs	r2, #0
 8006270:	9000      	str	r0, [sp, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa fc58 	bl	8000b2c <__aeabi_dcmplt>
 800627c:	b150      	cbz	r0, 8006294 <_dtoa_r+0x184>
 800627e:	9800      	ldr	r0, [sp, #0]
 8006280:	f7fa f978 	bl	8000574 <__aeabi_i2d>
 8006284:	4632      	mov	r2, r6
 8006286:	463b      	mov	r3, r7
 8006288:	f7fa fc46 	bl	8000b18 <__aeabi_dcmpeq>
 800628c:	b910      	cbnz	r0, 8006294 <_dtoa_r+0x184>
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	3b01      	subs	r3, #1
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	2b16      	cmp	r3, #22
 8006298:	d85a      	bhi.n	8006350 <_dtoa_r+0x240>
 800629a:	9a00      	ldr	r2, [sp, #0]
 800629c:	4b57      	ldr	r3, [pc, #348]	; (80063fc <_dtoa_r+0x2ec>)
 800629e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	ec51 0b19 	vmov	r0, r1, d9
 80062aa:	f7fa fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d050      	beq.n	8006354 <_dtoa_r+0x244>
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80062bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062be:	1b5d      	subs	r5, r3, r5
 80062c0:	1e6b      	subs	r3, r5, #1
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	bf45      	ittet	mi
 80062c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80062ca:	9304      	strmi	r3, [sp, #16]
 80062cc:	2300      	movpl	r3, #0
 80062ce:	2300      	movmi	r3, #0
 80062d0:	bf4c      	ite	mi
 80062d2:	9305      	strmi	r3, [sp, #20]
 80062d4:	9304      	strpl	r3, [sp, #16]
 80062d6:	9b00      	ldr	r3, [sp, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	db3d      	blt.n	8006358 <_dtoa_r+0x248>
 80062dc:	9b05      	ldr	r3, [sp, #20]
 80062de:	9a00      	ldr	r2, [sp, #0]
 80062e0:	920a      	str	r2, [sp, #40]	; 0x28
 80062e2:	4413      	add	r3, r2
 80062e4:	9305      	str	r3, [sp, #20]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9307      	str	r3, [sp, #28]
 80062ea:	9b06      	ldr	r3, [sp, #24]
 80062ec:	2b09      	cmp	r3, #9
 80062ee:	f200 8089 	bhi.w	8006404 <_dtoa_r+0x2f4>
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	bfc4      	itt	gt
 80062f6:	3b04      	subgt	r3, #4
 80062f8:	9306      	strgt	r3, [sp, #24]
 80062fa:	9b06      	ldr	r3, [sp, #24]
 80062fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006300:	bfcc      	ite	gt
 8006302:	2500      	movgt	r5, #0
 8006304:	2501      	movle	r5, #1
 8006306:	2b03      	cmp	r3, #3
 8006308:	f200 8087 	bhi.w	800641a <_dtoa_r+0x30a>
 800630c:	e8df f003 	tbb	[pc, r3]
 8006310:	59383a2d 	.word	0x59383a2d
 8006314:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006318:	441d      	add	r5, r3
 800631a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800631e:	2b20      	cmp	r3, #32
 8006320:	bfc1      	itttt	gt
 8006322:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006326:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800632a:	fa0b f303 	lslgt.w	r3, fp, r3
 800632e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006332:	bfda      	itte	le
 8006334:	f1c3 0320 	rsble	r3, r3, #32
 8006338:	fa06 f003 	lslle.w	r0, r6, r3
 800633c:	4318      	orrgt	r0, r3
 800633e:	f7fa f909 	bl	8000554 <__aeabi_ui2d>
 8006342:	2301      	movs	r3, #1
 8006344:	4606      	mov	r6, r0
 8006346:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800634a:	3d01      	subs	r5, #1
 800634c:	930e      	str	r3, [sp, #56]	; 0x38
 800634e:	e76a      	b.n	8006226 <_dtoa_r+0x116>
 8006350:	2301      	movs	r3, #1
 8006352:	e7b2      	b.n	80062ba <_dtoa_r+0x1aa>
 8006354:	900b      	str	r0, [sp, #44]	; 0x2c
 8006356:	e7b1      	b.n	80062bc <_dtoa_r+0x1ac>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	9a00      	ldr	r2, [sp, #0]
 800635c:	1a9b      	subs	r3, r3, r2
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	4253      	negs	r3, r2
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	2300      	movs	r3, #0
 8006366:	930a      	str	r3, [sp, #40]	; 0x28
 8006368:	e7bf      	b.n	80062ea <_dtoa_r+0x1da>
 800636a:	2300      	movs	r3, #0
 800636c:	9308      	str	r3, [sp, #32]
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	dc55      	bgt.n	8006420 <_dtoa_r+0x310>
 8006374:	2301      	movs	r3, #1
 8006376:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800637a:	461a      	mov	r2, r3
 800637c:	9209      	str	r2, [sp, #36]	; 0x24
 800637e:	e00c      	b.n	800639a <_dtoa_r+0x28a>
 8006380:	2301      	movs	r3, #1
 8006382:	e7f3      	b.n	800636c <_dtoa_r+0x25c>
 8006384:	2300      	movs	r3, #0
 8006386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	4413      	add	r3, r2
 800638e:	9302      	str	r3, [sp, #8]
 8006390:	3301      	adds	r3, #1
 8006392:	2b01      	cmp	r3, #1
 8006394:	9303      	str	r3, [sp, #12]
 8006396:	bfb8      	it	lt
 8006398:	2301      	movlt	r3, #1
 800639a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800639c:	2200      	movs	r2, #0
 800639e:	6042      	str	r2, [r0, #4]
 80063a0:	2204      	movs	r2, #4
 80063a2:	f102 0614 	add.w	r6, r2, #20
 80063a6:	429e      	cmp	r6, r3
 80063a8:	6841      	ldr	r1, [r0, #4]
 80063aa:	d93d      	bls.n	8006428 <_dtoa_r+0x318>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f001 f839 	bl	8007424 <_Balloc>
 80063b2:	9001      	str	r0, [sp, #4]
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d13b      	bne.n	8006430 <_dtoa_r+0x320>
 80063b8:	4b11      	ldr	r3, [pc, #68]	; (8006400 <_dtoa_r+0x2f0>)
 80063ba:	4602      	mov	r2, r0
 80063bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063c0:	e6c0      	b.n	8006144 <_dtoa_r+0x34>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7df      	b.n	8006386 <_dtoa_r+0x276>
 80063c6:	bf00      	nop
 80063c8:	636f4361 	.word	0x636f4361
 80063cc:	3fd287a7 	.word	0x3fd287a7
 80063d0:	8b60c8b3 	.word	0x8b60c8b3
 80063d4:	3fc68a28 	.word	0x3fc68a28
 80063d8:	509f79fb 	.word	0x509f79fb
 80063dc:	3fd34413 	.word	0x3fd34413
 80063e0:	0800904e 	.word	0x0800904e
 80063e4:	08009065 	.word	0x08009065
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	0800904a 	.word	0x0800904a
 80063f0:	08009041 	.word	0x08009041
 80063f4:	08008ec1 	.word	0x08008ec1
 80063f8:	3ff80000 	.word	0x3ff80000
 80063fc:	080091d0 	.word	0x080091d0
 8006400:	080090c0 	.word	0x080090c0
 8006404:	2501      	movs	r5, #1
 8006406:	2300      	movs	r3, #0
 8006408:	9306      	str	r3, [sp, #24]
 800640a:	9508      	str	r5, [sp, #32]
 800640c:	f04f 33ff 	mov.w	r3, #4294967295
 8006410:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	2312      	movs	r3, #18
 8006418:	e7b0      	b.n	800637c <_dtoa_r+0x26c>
 800641a:	2301      	movs	r3, #1
 800641c:	9308      	str	r3, [sp, #32]
 800641e:	e7f5      	b.n	800640c <_dtoa_r+0x2fc>
 8006420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006422:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006426:	e7b8      	b.n	800639a <_dtoa_r+0x28a>
 8006428:	3101      	adds	r1, #1
 800642a:	6041      	str	r1, [r0, #4]
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	e7b8      	b.n	80063a2 <_dtoa_r+0x292>
 8006430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006432:	9a01      	ldr	r2, [sp, #4]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	2b0e      	cmp	r3, #14
 800643a:	f200 809d 	bhi.w	8006578 <_dtoa_r+0x468>
 800643e:	2d00      	cmp	r5, #0
 8006440:	f000 809a 	beq.w	8006578 <_dtoa_r+0x468>
 8006444:	9b00      	ldr	r3, [sp, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd32      	ble.n	80064b0 <_dtoa_r+0x3a0>
 800644a:	4ab7      	ldr	r2, [pc, #732]	; (8006728 <_dtoa_r+0x618>)
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	05d8      	lsls	r0, r3, #23
 800645c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006460:	d516      	bpl.n	8006490 <_dtoa_r+0x380>
 8006462:	4bb2      	ldr	r3, [pc, #712]	; (800672c <_dtoa_r+0x61c>)
 8006464:	ec51 0b19 	vmov	r0, r1, d9
 8006468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800646c:	f7fa fa16 	bl	800089c <__aeabi_ddiv>
 8006470:	f007 070f 	and.w	r7, r7, #15
 8006474:	4682      	mov	sl, r0
 8006476:	468b      	mov	fp, r1
 8006478:	2503      	movs	r5, #3
 800647a:	4eac      	ldr	r6, [pc, #688]	; (800672c <_dtoa_r+0x61c>)
 800647c:	b957      	cbnz	r7, 8006494 <_dtoa_r+0x384>
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	4650      	mov	r0, sl
 8006484:	4659      	mov	r1, fp
 8006486:	f7fa fa09 	bl	800089c <__aeabi_ddiv>
 800648a:	4682      	mov	sl, r0
 800648c:	468b      	mov	fp, r1
 800648e:	e028      	b.n	80064e2 <_dtoa_r+0x3d2>
 8006490:	2502      	movs	r5, #2
 8006492:	e7f2      	b.n	800647a <_dtoa_r+0x36a>
 8006494:	07f9      	lsls	r1, r7, #31
 8006496:	d508      	bpl.n	80064aa <_dtoa_r+0x39a>
 8006498:	4640      	mov	r0, r8
 800649a:	4649      	mov	r1, r9
 800649c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064a0:	f7fa f8d2 	bl	8000648 <__aeabi_dmul>
 80064a4:	3501      	adds	r5, #1
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	107f      	asrs	r7, r7, #1
 80064ac:	3608      	adds	r6, #8
 80064ae:	e7e5      	b.n	800647c <_dtoa_r+0x36c>
 80064b0:	f000 809b 	beq.w	80065ea <_dtoa_r+0x4da>
 80064b4:	9b00      	ldr	r3, [sp, #0]
 80064b6:	4f9d      	ldr	r7, [pc, #628]	; (800672c <_dtoa_r+0x61c>)
 80064b8:	425e      	negs	r6, r3
 80064ba:	4b9b      	ldr	r3, [pc, #620]	; (8006728 <_dtoa_r+0x618>)
 80064bc:	f006 020f 	and.w	r2, r6, #15
 80064c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	ec51 0b19 	vmov	r0, r1, d9
 80064cc:	f7fa f8bc 	bl	8000648 <__aeabi_dmul>
 80064d0:	1136      	asrs	r6, r6, #4
 80064d2:	4682      	mov	sl, r0
 80064d4:	468b      	mov	fp, r1
 80064d6:	2300      	movs	r3, #0
 80064d8:	2502      	movs	r5, #2
 80064da:	2e00      	cmp	r6, #0
 80064dc:	d17a      	bne.n	80065d4 <_dtoa_r+0x4c4>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1d3      	bne.n	800648a <_dtoa_r+0x37a>
 80064e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8082 	beq.w	80065ee <_dtoa_r+0x4de>
 80064ea:	4b91      	ldr	r3, [pc, #580]	; (8006730 <_dtoa_r+0x620>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	4650      	mov	r0, sl
 80064f0:	4659      	mov	r1, fp
 80064f2:	f7fa fb1b 	bl	8000b2c <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d079      	beq.n	80065ee <_dtoa_r+0x4de>
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d076      	beq.n	80065ee <_dtoa_r+0x4de>
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd36      	ble.n	8006574 <_dtoa_r+0x464>
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	4650      	mov	r0, sl
 800650a:	4659      	mov	r1, fp
 800650c:	1e5f      	subs	r7, r3, #1
 800650e:	2200      	movs	r2, #0
 8006510:	4b88      	ldr	r3, [pc, #544]	; (8006734 <_dtoa_r+0x624>)
 8006512:	f7fa f899 	bl	8000648 <__aeabi_dmul>
 8006516:	9e02      	ldr	r6, [sp, #8]
 8006518:	4682      	mov	sl, r0
 800651a:	468b      	mov	fp, r1
 800651c:	3501      	adds	r5, #1
 800651e:	4628      	mov	r0, r5
 8006520:	f7fa f828 	bl	8000574 <__aeabi_i2d>
 8006524:	4652      	mov	r2, sl
 8006526:	465b      	mov	r3, fp
 8006528:	f7fa f88e 	bl	8000648 <__aeabi_dmul>
 800652c:	4b82      	ldr	r3, [pc, #520]	; (8006738 <_dtoa_r+0x628>)
 800652e:	2200      	movs	r2, #0
 8006530:	f7f9 fed4 	bl	80002dc <__adddf3>
 8006534:	46d0      	mov	r8, sl
 8006536:	46d9      	mov	r9, fp
 8006538:	4682      	mov	sl, r0
 800653a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800653e:	2e00      	cmp	r6, #0
 8006540:	d158      	bne.n	80065f4 <_dtoa_r+0x4e4>
 8006542:	4b7e      	ldr	r3, [pc, #504]	; (800673c <_dtoa_r+0x62c>)
 8006544:	2200      	movs	r2, #0
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7f9 fec5 	bl	80002d8 <__aeabi_dsub>
 800654e:	4652      	mov	r2, sl
 8006550:	465b      	mov	r3, fp
 8006552:	4680      	mov	r8, r0
 8006554:	4689      	mov	r9, r1
 8006556:	f7fa fb07 	bl	8000b68 <__aeabi_dcmpgt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f040 8295 	bne.w	8006a8a <_dtoa_r+0x97a>
 8006560:	4652      	mov	r2, sl
 8006562:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa fadf 	bl	8000b2c <__aeabi_dcmplt>
 800656e:	2800      	cmp	r0, #0
 8006570:	f040 8289 	bne.w	8006a86 <_dtoa_r+0x976>
 8006574:	ec5b ab19 	vmov	sl, fp, d9
 8006578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800657a:	2b00      	cmp	r3, #0
 800657c:	f2c0 8148 	blt.w	8006810 <_dtoa_r+0x700>
 8006580:	9a00      	ldr	r2, [sp, #0]
 8006582:	2a0e      	cmp	r2, #14
 8006584:	f300 8144 	bgt.w	8006810 <_dtoa_r+0x700>
 8006588:	4b67      	ldr	r3, [pc, #412]	; (8006728 <_dtoa_r+0x618>)
 800658a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800658e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	f280 80d5 	bge.w	8006744 <_dtoa_r+0x634>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f300 80d1 	bgt.w	8006744 <_dtoa_r+0x634>
 80065a2:	f040 826f 	bne.w	8006a84 <_dtoa_r+0x974>
 80065a6:	4b65      	ldr	r3, [pc, #404]	; (800673c <_dtoa_r+0x62c>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7fa f84b 	bl	8000648 <__aeabi_dmul>
 80065b2:	4652      	mov	r2, sl
 80065b4:	465b      	mov	r3, fp
 80065b6:	f7fa facd 	bl	8000b54 <__aeabi_dcmpge>
 80065ba:	9e03      	ldr	r6, [sp, #12]
 80065bc:	4637      	mov	r7, r6
 80065be:	2800      	cmp	r0, #0
 80065c0:	f040 8245 	bne.w	8006a4e <_dtoa_r+0x93e>
 80065c4:	9d01      	ldr	r5, [sp, #4]
 80065c6:	2331      	movs	r3, #49	; 0x31
 80065c8:	f805 3b01 	strb.w	r3, [r5], #1
 80065cc:	9b00      	ldr	r3, [sp, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	e240      	b.n	8006a56 <_dtoa_r+0x946>
 80065d4:	07f2      	lsls	r2, r6, #31
 80065d6:	d505      	bpl.n	80065e4 <_dtoa_r+0x4d4>
 80065d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065dc:	f7fa f834 	bl	8000648 <__aeabi_dmul>
 80065e0:	3501      	adds	r5, #1
 80065e2:	2301      	movs	r3, #1
 80065e4:	1076      	asrs	r6, r6, #1
 80065e6:	3708      	adds	r7, #8
 80065e8:	e777      	b.n	80064da <_dtoa_r+0x3ca>
 80065ea:	2502      	movs	r5, #2
 80065ec:	e779      	b.n	80064e2 <_dtoa_r+0x3d2>
 80065ee:	9f00      	ldr	r7, [sp, #0]
 80065f0:	9e03      	ldr	r6, [sp, #12]
 80065f2:	e794      	b.n	800651e <_dtoa_r+0x40e>
 80065f4:	9901      	ldr	r1, [sp, #4]
 80065f6:	4b4c      	ldr	r3, [pc, #304]	; (8006728 <_dtoa_r+0x618>)
 80065f8:	4431      	add	r1, r6
 80065fa:	910d      	str	r1, [sp, #52]	; 0x34
 80065fc:	9908      	ldr	r1, [sp, #32]
 80065fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006602:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006606:	2900      	cmp	r1, #0
 8006608:	d043      	beq.n	8006692 <_dtoa_r+0x582>
 800660a:	494d      	ldr	r1, [pc, #308]	; (8006740 <_dtoa_r+0x630>)
 800660c:	2000      	movs	r0, #0
 800660e:	f7fa f945 	bl	800089c <__aeabi_ddiv>
 8006612:	4652      	mov	r2, sl
 8006614:	465b      	mov	r3, fp
 8006616:	f7f9 fe5f 	bl	80002d8 <__aeabi_dsub>
 800661a:	9d01      	ldr	r5, [sp, #4]
 800661c:	4682      	mov	sl, r0
 800661e:	468b      	mov	fp, r1
 8006620:	4649      	mov	r1, r9
 8006622:	4640      	mov	r0, r8
 8006624:	f7fa fac0 	bl	8000ba8 <__aeabi_d2iz>
 8006628:	4606      	mov	r6, r0
 800662a:	f7f9 ffa3 	bl	8000574 <__aeabi_i2d>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4640      	mov	r0, r8
 8006634:	4649      	mov	r1, r9
 8006636:	f7f9 fe4f 	bl	80002d8 <__aeabi_dsub>
 800663a:	3630      	adds	r6, #48	; 0x30
 800663c:	f805 6b01 	strb.w	r6, [r5], #1
 8006640:	4652      	mov	r2, sl
 8006642:	465b      	mov	r3, fp
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	f7fa fa70 	bl	8000b2c <__aeabi_dcmplt>
 800664c:	2800      	cmp	r0, #0
 800664e:	d163      	bne.n	8006718 <_dtoa_r+0x608>
 8006650:	4642      	mov	r2, r8
 8006652:	464b      	mov	r3, r9
 8006654:	4936      	ldr	r1, [pc, #216]	; (8006730 <_dtoa_r+0x620>)
 8006656:	2000      	movs	r0, #0
 8006658:	f7f9 fe3e 	bl	80002d8 <__aeabi_dsub>
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	f7fa fa64 	bl	8000b2c <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 80b5 	bne.w	80067d4 <_dtoa_r+0x6c4>
 800666a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800666c:	429d      	cmp	r5, r3
 800666e:	d081      	beq.n	8006574 <_dtoa_r+0x464>
 8006670:	4b30      	ldr	r3, [pc, #192]	; (8006734 <_dtoa_r+0x624>)
 8006672:	2200      	movs	r2, #0
 8006674:	4650      	mov	r0, sl
 8006676:	4659      	mov	r1, fp
 8006678:	f7f9 ffe6 	bl	8000648 <__aeabi_dmul>
 800667c:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <_dtoa_r+0x624>)
 800667e:	4682      	mov	sl, r0
 8006680:	468b      	mov	fp, r1
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	2200      	movs	r2, #0
 8006688:	f7f9 ffde 	bl	8000648 <__aeabi_dmul>
 800668c:	4680      	mov	r8, r0
 800668e:	4689      	mov	r9, r1
 8006690:	e7c6      	b.n	8006620 <_dtoa_r+0x510>
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	f7f9 ffd7 	bl	8000648 <__aeabi_dmul>
 800669a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800669c:	9d01      	ldr	r5, [sp, #4]
 800669e:	930f      	str	r3, [sp, #60]	; 0x3c
 80066a0:	4682      	mov	sl, r0
 80066a2:	468b      	mov	fp, r1
 80066a4:	4649      	mov	r1, r9
 80066a6:	4640      	mov	r0, r8
 80066a8:	f7fa fa7e 	bl	8000ba8 <__aeabi_d2iz>
 80066ac:	4606      	mov	r6, r0
 80066ae:	f7f9 ff61 	bl	8000574 <__aeabi_i2d>
 80066b2:	3630      	adds	r6, #48	; 0x30
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4640      	mov	r0, r8
 80066ba:	4649      	mov	r1, r9
 80066bc:	f7f9 fe0c 	bl	80002d8 <__aeabi_dsub>
 80066c0:	f805 6b01 	strb.w	r6, [r5], #1
 80066c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c6:	429d      	cmp	r5, r3
 80066c8:	4680      	mov	r8, r0
 80066ca:	4689      	mov	r9, r1
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	d124      	bne.n	800671c <_dtoa_r+0x60c>
 80066d2:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <_dtoa_r+0x630>)
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7f9 fe00 	bl	80002dc <__adddf3>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7fa fa40 	bl	8000b68 <__aeabi_dcmpgt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d173      	bne.n	80067d4 <_dtoa_r+0x6c4>
 80066ec:	4652      	mov	r2, sl
 80066ee:	465b      	mov	r3, fp
 80066f0:	4913      	ldr	r1, [pc, #76]	; (8006740 <_dtoa_r+0x630>)
 80066f2:	2000      	movs	r0, #0
 80066f4:	f7f9 fdf0 	bl	80002d8 <__aeabi_dsub>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7fa fa14 	bl	8000b2c <__aeabi_dcmplt>
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f af35 	beq.w	8006574 <_dtoa_r+0x464>
 800670a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800670c:	1e6b      	subs	r3, r5, #1
 800670e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d0f8      	beq.n	800670a <_dtoa_r+0x5fa>
 8006718:	9700      	str	r7, [sp, #0]
 800671a:	e049      	b.n	80067b0 <_dtoa_r+0x6a0>
 800671c:	4b05      	ldr	r3, [pc, #20]	; (8006734 <_dtoa_r+0x624>)
 800671e:	f7f9 ff93 	bl	8000648 <__aeabi_dmul>
 8006722:	4680      	mov	r8, r0
 8006724:	4689      	mov	r9, r1
 8006726:	e7bd      	b.n	80066a4 <_dtoa_r+0x594>
 8006728:	080091d0 	.word	0x080091d0
 800672c:	080091a8 	.word	0x080091a8
 8006730:	3ff00000 	.word	0x3ff00000
 8006734:	40240000 	.word	0x40240000
 8006738:	401c0000 	.word	0x401c0000
 800673c:	40140000 	.word	0x40140000
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	9d01      	ldr	r5, [sp, #4]
 8006746:	4656      	mov	r6, sl
 8006748:	465f      	mov	r7, fp
 800674a:	4642      	mov	r2, r8
 800674c:	464b      	mov	r3, r9
 800674e:	4630      	mov	r0, r6
 8006750:	4639      	mov	r1, r7
 8006752:	f7fa f8a3 	bl	800089c <__aeabi_ddiv>
 8006756:	f7fa fa27 	bl	8000ba8 <__aeabi_d2iz>
 800675a:	4682      	mov	sl, r0
 800675c:	f7f9 ff0a 	bl	8000574 <__aeabi_i2d>
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	f7f9 ff70 	bl	8000648 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006774:	f7f9 fdb0 	bl	80002d8 <__aeabi_dsub>
 8006778:	f805 6b01 	strb.w	r6, [r5], #1
 800677c:	9e01      	ldr	r6, [sp, #4]
 800677e:	9f03      	ldr	r7, [sp, #12]
 8006780:	1bae      	subs	r6, r5, r6
 8006782:	42b7      	cmp	r7, r6
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	d135      	bne.n	80067f6 <_dtoa_r+0x6e6>
 800678a:	f7f9 fda7 	bl	80002dc <__adddf3>
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	4606      	mov	r6, r0
 8006794:	460f      	mov	r7, r1
 8006796:	f7fa f9e7 	bl	8000b68 <__aeabi_dcmpgt>
 800679a:	b9d0      	cbnz	r0, 80067d2 <_dtoa_r+0x6c2>
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f9b8 	bl	8000b18 <__aeabi_dcmpeq>
 80067a8:	b110      	cbz	r0, 80067b0 <_dtoa_r+0x6a0>
 80067aa:	f01a 0f01 	tst.w	sl, #1
 80067ae:	d110      	bne.n	80067d2 <_dtoa_r+0x6c2>
 80067b0:	4620      	mov	r0, r4
 80067b2:	ee18 1a10 	vmov	r1, s16
 80067b6:	f000 fe75 	bl	80074a4 <_Bfree>
 80067ba:	2300      	movs	r3, #0
 80067bc:	9800      	ldr	r0, [sp, #0]
 80067be:	702b      	strb	r3, [r5, #0]
 80067c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c2:	3001      	adds	r0, #1
 80067c4:	6018      	str	r0, [r3, #0]
 80067c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f43f acf1 	beq.w	80061b0 <_dtoa_r+0xa0>
 80067ce:	601d      	str	r5, [r3, #0]
 80067d0:	e4ee      	b.n	80061b0 <_dtoa_r+0xa0>
 80067d2:	9f00      	ldr	r7, [sp, #0]
 80067d4:	462b      	mov	r3, r5
 80067d6:	461d      	mov	r5, r3
 80067d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067dc:	2a39      	cmp	r2, #57	; 0x39
 80067de:	d106      	bne.n	80067ee <_dtoa_r+0x6de>
 80067e0:	9a01      	ldr	r2, [sp, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d1f7      	bne.n	80067d6 <_dtoa_r+0x6c6>
 80067e6:	9901      	ldr	r1, [sp, #4]
 80067e8:	2230      	movs	r2, #48	; 0x30
 80067ea:	3701      	adds	r7, #1
 80067ec:	700a      	strb	r2, [r1, #0]
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	3201      	adds	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e790      	b.n	8006718 <_dtoa_r+0x608>
 80067f6:	4ba6      	ldr	r3, [pc, #664]	; (8006a90 <_dtoa_r+0x980>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	f7f9 ff25 	bl	8000648 <__aeabi_dmul>
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	4606      	mov	r6, r0
 8006804:	460f      	mov	r7, r1
 8006806:	f7fa f987 	bl	8000b18 <__aeabi_dcmpeq>
 800680a:	2800      	cmp	r0, #0
 800680c:	d09d      	beq.n	800674a <_dtoa_r+0x63a>
 800680e:	e7cf      	b.n	80067b0 <_dtoa_r+0x6a0>
 8006810:	9a08      	ldr	r2, [sp, #32]
 8006812:	2a00      	cmp	r2, #0
 8006814:	f000 80d7 	beq.w	80069c6 <_dtoa_r+0x8b6>
 8006818:	9a06      	ldr	r2, [sp, #24]
 800681a:	2a01      	cmp	r2, #1
 800681c:	f300 80ba 	bgt.w	8006994 <_dtoa_r+0x884>
 8006820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006822:	2a00      	cmp	r2, #0
 8006824:	f000 80b2 	beq.w	800698c <_dtoa_r+0x87c>
 8006828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800682c:	9e07      	ldr	r6, [sp, #28]
 800682e:	9d04      	ldr	r5, [sp, #16]
 8006830:	9a04      	ldr	r2, [sp, #16]
 8006832:	441a      	add	r2, r3
 8006834:	9204      	str	r2, [sp, #16]
 8006836:	9a05      	ldr	r2, [sp, #20]
 8006838:	2101      	movs	r1, #1
 800683a:	441a      	add	r2, r3
 800683c:	4620      	mov	r0, r4
 800683e:	9205      	str	r2, [sp, #20]
 8006840:	f000 ff32 	bl	80076a8 <__i2b>
 8006844:	4607      	mov	r7, r0
 8006846:	2d00      	cmp	r5, #0
 8006848:	dd0c      	ble.n	8006864 <_dtoa_r+0x754>
 800684a:	9b05      	ldr	r3, [sp, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd09      	ble.n	8006864 <_dtoa_r+0x754>
 8006850:	42ab      	cmp	r3, r5
 8006852:	9a04      	ldr	r2, [sp, #16]
 8006854:	bfa8      	it	ge
 8006856:	462b      	movge	r3, r5
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	9204      	str	r2, [sp, #16]
 800685c:	9a05      	ldr	r2, [sp, #20]
 800685e:	1aed      	subs	r5, r5, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	b31b      	cbz	r3, 80068b0 <_dtoa_r+0x7a0>
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80af 	beq.w	80069ce <_dtoa_r+0x8be>
 8006870:	2e00      	cmp	r6, #0
 8006872:	dd13      	ble.n	800689c <_dtoa_r+0x78c>
 8006874:	4639      	mov	r1, r7
 8006876:	4632      	mov	r2, r6
 8006878:	4620      	mov	r0, r4
 800687a:	f000 ffd5 	bl	8007828 <__pow5mult>
 800687e:	ee18 2a10 	vmov	r2, s16
 8006882:	4601      	mov	r1, r0
 8006884:	4607      	mov	r7, r0
 8006886:	4620      	mov	r0, r4
 8006888:	f000 ff24 	bl	80076d4 <__multiply>
 800688c:	ee18 1a10 	vmov	r1, s16
 8006890:	4680      	mov	r8, r0
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fe06 	bl	80074a4 <_Bfree>
 8006898:	ee08 8a10 	vmov	s16, r8
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	1b9a      	subs	r2, r3, r6
 80068a0:	d006      	beq.n	80068b0 <_dtoa_r+0x7a0>
 80068a2:	ee18 1a10 	vmov	r1, s16
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 ffbe 	bl	8007828 <__pow5mult>
 80068ac:	ee08 0a10 	vmov	s16, r0
 80068b0:	2101      	movs	r1, #1
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fef8 	bl	80076a8 <__i2b>
 80068b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	4606      	mov	r6, r0
 80068be:	f340 8088 	ble.w	80069d2 <_dtoa_r+0x8c2>
 80068c2:	461a      	mov	r2, r3
 80068c4:	4601      	mov	r1, r0
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 ffae 	bl	8007828 <__pow5mult>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	4606      	mov	r6, r0
 80068d2:	f340 8081 	ble.w	80069d8 <_dtoa_r+0x8c8>
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	6933      	ldr	r3, [r6, #16]
 80068dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068e0:	6918      	ldr	r0, [r3, #16]
 80068e2:	f000 fe91 	bl	8007608 <__hi0bits>
 80068e6:	f1c0 0020 	rsb	r0, r0, #32
 80068ea:	9b05      	ldr	r3, [sp, #20]
 80068ec:	4418      	add	r0, r3
 80068ee:	f010 001f 	ands.w	r0, r0, #31
 80068f2:	f000 8092 	beq.w	8006a1a <_dtoa_r+0x90a>
 80068f6:	f1c0 0320 	rsb	r3, r0, #32
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	f340 808a 	ble.w	8006a14 <_dtoa_r+0x904>
 8006900:	f1c0 001c 	rsb	r0, r0, #28
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	4403      	add	r3, r0
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	4403      	add	r3, r0
 800690e:	4405      	add	r5, r0
 8006910:	9305      	str	r3, [sp, #20]
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dd07      	ble.n	8006928 <_dtoa_r+0x818>
 8006918:	ee18 1a10 	vmov	r1, s16
 800691c:	461a      	mov	r2, r3
 800691e:	4620      	mov	r0, r4
 8006920:	f000 ffdc 	bl	80078dc <__lshift>
 8006924:	ee08 0a10 	vmov	s16, r0
 8006928:	9b05      	ldr	r3, [sp, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x82a>
 800692e:	4631      	mov	r1, r6
 8006930:	461a      	mov	r2, r3
 8006932:	4620      	mov	r0, r4
 8006934:	f000 ffd2 	bl	80078dc <__lshift>
 8006938:	4606      	mov	r6, r0
 800693a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d06e      	beq.n	8006a1e <_dtoa_r+0x90e>
 8006940:	ee18 0a10 	vmov	r0, s16
 8006944:	4631      	mov	r1, r6
 8006946:	f001 f839 	bl	80079bc <__mcmp>
 800694a:	2800      	cmp	r0, #0
 800694c:	da67      	bge.n	8006a1e <_dtoa_r+0x90e>
 800694e:	9b00      	ldr	r3, [sp, #0]
 8006950:	3b01      	subs	r3, #1
 8006952:	ee18 1a10 	vmov	r1, s16
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	220a      	movs	r2, #10
 800695a:	2300      	movs	r3, #0
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fdc3 	bl	80074e8 <__multadd>
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	ee08 0a10 	vmov	s16, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81b1 	beq.w	8006cd0 <_dtoa_r+0xbc0>
 800696e:	2300      	movs	r3, #0
 8006970:	4639      	mov	r1, r7
 8006972:	220a      	movs	r2, #10
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fdb7 	bl	80074e8 <__multadd>
 800697a:	9b02      	ldr	r3, [sp, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	4607      	mov	r7, r0
 8006980:	f300 808e 	bgt.w	8006aa0 <_dtoa_r+0x990>
 8006984:	9b06      	ldr	r3, [sp, #24]
 8006986:	2b02      	cmp	r3, #2
 8006988:	dc51      	bgt.n	8006a2e <_dtoa_r+0x91e>
 800698a:	e089      	b.n	8006aa0 <_dtoa_r+0x990>
 800698c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800698e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006992:	e74b      	b.n	800682c <_dtoa_r+0x71c>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	1e5e      	subs	r6, r3, #1
 8006998:	9b07      	ldr	r3, [sp, #28]
 800699a:	42b3      	cmp	r3, r6
 800699c:	bfbf      	itttt	lt
 800699e:	9b07      	ldrlt	r3, [sp, #28]
 80069a0:	9607      	strlt	r6, [sp, #28]
 80069a2:	1af2      	sublt	r2, r6, r3
 80069a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069a6:	bfb6      	itet	lt
 80069a8:	189b      	addlt	r3, r3, r2
 80069aa:	1b9e      	subge	r6, r3, r6
 80069ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	bfb8      	it	lt
 80069b2:	2600      	movlt	r6, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfb7      	itett	lt
 80069b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069c0:	1a9d      	sublt	r5, r3, r2
 80069c2:	2300      	movlt	r3, #0
 80069c4:	e734      	b.n	8006830 <_dtoa_r+0x720>
 80069c6:	9e07      	ldr	r6, [sp, #28]
 80069c8:	9d04      	ldr	r5, [sp, #16]
 80069ca:	9f08      	ldr	r7, [sp, #32]
 80069cc:	e73b      	b.n	8006846 <_dtoa_r+0x736>
 80069ce:	9a07      	ldr	r2, [sp, #28]
 80069d0:	e767      	b.n	80068a2 <_dtoa_r+0x792>
 80069d2:	9b06      	ldr	r3, [sp, #24]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	dc18      	bgt.n	8006a0a <_dtoa_r+0x8fa>
 80069d8:	f1ba 0f00 	cmp.w	sl, #0
 80069dc:	d115      	bne.n	8006a0a <_dtoa_r+0x8fa>
 80069de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069e2:	b993      	cbnz	r3, 8006a0a <_dtoa_r+0x8fa>
 80069e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069e8:	0d1b      	lsrs	r3, r3, #20
 80069ea:	051b      	lsls	r3, r3, #20
 80069ec:	b183      	cbz	r3, 8006a10 <_dtoa_r+0x900>
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	3301      	adds	r3, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	3301      	adds	r3, #1
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	f04f 0801 	mov.w	r8, #1
 80069fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f af6a 	bne.w	80068da <_dtoa_r+0x7ca>
 8006a06:	2001      	movs	r0, #1
 8006a08:	e76f      	b.n	80068ea <_dtoa_r+0x7da>
 8006a0a:	f04f 0800 	mov.w	r8, #0
 8006a0e:	e7f6      	b.n	80069fe <_dtoa_r+0x8ee>
 8006a10:	4698      	mov	r8, r3
 8006a12:	e7f4      	b.n	80069fe <_dtoa_r+0x8ee>
 8006a14:	f43f af7d 	beq.w	8006912 <_dtoa_r+0x802>
 8006a18:	4618      	mov	r0, r3
 8006a1a:	301c      	adds	r0, #28
 8006a1c:	e772      	b.n	8006904 <_dtoa_r+0x7f4>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc37      	bgt.n	8006a94 <_dtoa_r+0x984>
 8006a24:	9b06      	ldr	r3, [sp, #24]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	dd34      	ble.n	8006a94 <_dtoa_r+0x984>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	9302      	str	r3, [sp, #8]
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	b96b      	cbnz	r3, 8006a4e <_dtoa_r+0x93e>
 8006a32:	4631      	mov	r1, r6
 8006a34:	2205      	movs	r2, #5
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 fd56 	bl	80074e8 <__multadd>
 8006a3c:	4601      	mov	r1, r0
 8006a3e:	4606      	mov	r6, r0
 8006a40:	ee18 0a10 	vmov	r0, s16
 8006a44:	f000 ffba 	bl	80079bc <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	f73f adbb 	bgt.w	80065c4 <_dtoa_r+0x4b4>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	9d01      	ldr	r5, [sp, #4]
 8006a52:	43db      	mvns	r3, r3
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	f04f 0800 	mov.w	r8, #0
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fd21 	bl	80074a4 <_Bfree>
 8006a62:	2f00      	cmp	r7, #0
 8006a64:	f43f aea4 	beq.w	80067b0 <_dtoa_r+0x6a0>
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d005      	beq.n	8006a7a <_dtoa_r+0x96a>
 8006a6e:	45b8      	cmp	r8, r7
 8006a70:	d003      	beq.n	8006a7a <_dtoa_r+0x96a>
 8006a72:	4641      	mov	r1, r8
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 fd15 	bl	80074a4 <_Bfree>
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f000 fd11 	bl	80074a4 <_Bfree>
 8006a82:	e695      	b.n	80067b0 <_dtoa_r+0x6a0>
 8006a84:	2600      	movs	r6, #0
 8006a86:	4637      	mov	r7, r6
 8006a88:	e7e1      	b.n	8006a4e <_dtoa_r+0x93e>
 8006a8a:	9700      	str	r7, [sp, #0]
 8006a8c:	4637      	mov	r7, r6
 8006a8e:	e599      	b.n	80065c4 <_dtoa_r+0x4b4>
 8006a90:	40240000 	.word	0x40240000
 8006a94:	9b08      	ldr	r3, [sp, #32]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80ca 	beq.w	8006c30 <_dtoa_r+0xb20>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	dd05      	ble.n	8006ab0 <_dtoa_r+0x9a0>
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 ff17 	bl	80078dc <__lshift>
 8006aae:	4607      	mov	r7, r0
 8006ab0:	f1b8 0f00 	cmp.w	r8, #0
 8006ab4:	d05b      	beq.n	8006b6e <_dtoa_r+0xa5e>
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fcb3 	bl	8007424 <_Balloc>
 8006abe:	4605      	mov	r5, r0
 8006ac0:	b928      	cbnz	r0, 8006ace <_dtoa_r+0x9be>
 8006ac2:	4b87      	ldr	r3, [pc, #540]	; (8006ce0 <_dtoa_r+0xbd0>)
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aca:	f7ff bb3b 	b.w	8006144 <_dtoa_r+0x34>
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	3202      	adds	r2, #2
 8006ad2:	0092      	lsls	r2, r2, #2
 8006ad4:	f107 010c 	add.w	r1, r7, #12
 8006ad8:	300c      	adds	r0, #12
 8006ada:	f000 fc95 	bl	8007408 <memcpy>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fefa 	bl	80078dc <__lshift>
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	f103 0901 	add.w	r9, r3, #1
 8006aee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	f00a 0301 	and.w	r3, sl, #1
 8006afa:	46b8      	mov	r8, r7
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	4607      	mov	r7, r0
 8006b00:	4631      	mov	r1, r6
 8006b02:	ee18 0a10 	vmov	r0, s16
 8006b06:	f7ff fa77 	bl	8005ff8 <quorem>
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b12:	ee18 0a10 	vmov	r0, s16
 8006b16:	f000 ff51 	bl	80079bc <__mcmp>
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	9003      	str	r0, [sp, #12]
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 ff67 	bl	80079f4 <__mdiff>
 8006b26:	68c2      	ldr	r2, [r0, #12]
 8006b28:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	bb02      	cbnz	r2, 8006b72 <_dtoa_r+0xa62>
 8006b30:	4601      	mov	r1, r0
 8006b32:	ee18 0a10 	vmov	r0, s16
 8006b36:	f000 ff41 	bl	80079bc <__mcmp>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4620      	mov	r0, r4
 8006b40:	9207      	str	r2, [sp, #28]
 8006b42:	f000 fcaf 	bl	80074a4 <_Bfree>
 8006b46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b4a:	ea43 0102 	orr.w	r1, r3, r2
 8006b4e:	9b04      	ldr	r3, [sp, #16]
 8006b50:	430b      	orrs	r3, r1
 8006b52:	464d      	mov	r5, r9
 8006b54:	d10f      	bne.n	8006b76 <_dtoa_r+0xa66>
 8006b56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b5a:	d02a      	beq.n	8006bb2 <_dtoa_r+0xaa2>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd02      	ble.n	8006b68 <_dtoa_r+0xa58>
 8006b62:	9b02      	ldr	r3, [sp, #8]
 8006b64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006b68:	f88b a000 	strb.w	sl, [fp]
 8006b6c:	e775      	b.n	8006a5a <_dtoa_r+0x94a>
 8006b6e:	4638      	mov	r0, r7
 8006b70:	e7ba      	b.n	8006ae8 <_dtoa_r+0x9d8>
 8006b72:	2201      	movs	r2, #1
 8006b74:	e7e2      	b.n	8006b3c <_dtoa_r+0xa2c>
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	db04      	blt.n	8006b86 <_dtoa_r+0xa76>
 8006b7c:	9906      	ldr	r1, [sp, #24]
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	9904      	ldr	r1, [sp, #16]
 8006b82:	430b      	orrs	r3, r1
 8006b84:	d122      	bne.n	8006bcc <_dtoa_r+0xabc>
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	ddee      	ble.n	8006b68 <_dtoa_r+0xa58>
 8006b8a:	ee18 1a10 	vmov	r1, s16
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 fea3 	bl	80078dc <__lshift>
 8006b96:	4631      	mov	r1, r6
 8006b98:	ee08 0a10 	vmov	s16, r0
 8006b9c:	f000 ff0e 	bl	80079bc <__mcmp>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	dc03      	bgt.n	8006bac <_dtoa_r+0xa9c>
 8006ba4:	d1e0      	bne.n	8006b68 <_dtoa_r+0xa58>
 8006ba6:	f01a 0f01 	tst.w	sl, #1
 8006baa:	d0dd      	beq.n	8006b68 <_dtoa_r+0xa58>
 8006bac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bb0:	d1d7      	bne.n	8006b62 <_dtoa_r+0xa52>
 8006bb2:	2339      	movs	r3, #57	; 0x39
 8006bb4:	f88b 3000 	strb.w	r3, [fp]
 8006bb8:	462b      	mov	r3, r5
 8006bba:	461d      	mov	r5, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bc2:	2a39      	cmp	r2, #57	; 0x39
 8006bc4:	d071      	beq.n	8006caa <_dtoa_r+0xb9a>
 8006bc6:	3201      	adds	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e746      	b.n	8006a5a <_dtoa_r+0x94a>
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	dd07      	ble.n	8006be0 <_dtoa_r+0xad0>
 8006bd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006bd4:	d0ed      	beq.n	8006bb2 <_dtoa_r+0xaa2>
 8006bd6:	f10a 0301 	add.w	r3, sl, #1
 8006bda:	f88b 3000 	strb.w	r3, [fp]
 8006bde:	e73c      	b.n	8006a5a <_dtoa_r+0x94a>
 8006be0:	9b05      	ldr	r3, [sp, #20]
 8006be2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006be6:	4599      	cmp	r9, r3
 8006be8:	d047      	beq.n	8006c7a <_dtoa_r+0xb6a>
 8006bea:	ee18 1a10 	vmov	r1, s16
 8006bee:	2300      	movs	r3, #0
 8006bf0:	220a      	movs	r2, #10
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fc78 	bl	80074e8 <__multadd>
 8006bf8:	45b8      	cmp	r8, r7
 8006bfa:	ee08 0a10 	vmov	s16, r0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	f04f 020a 	mov.w	r2, #10
 8006c06:	4641      	mov	r1, r8
 8006c08:	4620      	mov	r0, r4
 8006c0a:	d106      	bne.n	8006c1a <_dtoa_r+0xb0a>
 8006c0c:	f000 fc6c 	bl	80074e8 <__multadd>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4607      	mov	r7, r0
 8006c14:	f109 0901 	add.w	r9, r9, #1
 8006c18:	e772      	b.n	8006b00 <_dtoa_r+0x9f0>
 8006c1a:	f000 fc65 	bl	80074e8 <__multadd>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4680      	mov	r8, r0
 8006c22:	2300      	movs	r3, #0
 8006c24:	220a      	movs	r2, #10
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fc5e 	bl	80074e8 <__multadd>
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	e7f1      	b.n	8006c14 <_dtoa_r+0xb04>
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	9d01      	ldr	r5, [sp, #4]
 8006c36:	ee18 0a10 	vmov	r0, s16
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	f7ff f9dc 	bl	8005ff8 <quorem>
 8006c40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	f805 ab01 	strb.w	sl, [r5], #1
 8006c4a:	1aea      	subs	r2, r5, r3
 8006c4c:	9b02      	ldr	r3, [sp, #8]
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	dd09      	ble.n	8006c66 <_dtoa_r+0xb56>
 8006c52:	ee18 1a10 	vmov	r1, s16
 8006c56:	2300      	movs	r3, #0
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fc44 	bl	80074e8 <__multadd>
 8006c60:	ee08 0a10 	vmov	s16, r0
 8006c64:	e7e7      	b.n	8006c36 <_dtoa_r+0xb26>
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfc8      	it	gt
 8006c6c:	461d      	movgt	r5, r3
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	bfd8      	it	le
 8006c72:	2501      	movle	r5, #1
 8006c74:	441d      	add	r5, r3
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	ee18 1a10 	vmov	r1, s16
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 fe2b 	bl	80078dc <__lshift>
 8006c86:	4631      	mov	r1, r6
 8006c88:	ee08 0a10 	vmov	s16, r0
 8006c8c:	f000 fe96 	bl	80079bc <__mcmp>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dc91      	bgt.n	8006bb8 <_dtoa_r+0xaa8>
 8006c94:	d102      	bne.n	8006c9c <_dtoa_r+0xb8c>
 8006c96:	f01a 0f01 	tst.w	sl, #1
 8006c9a:	d18d      	bne.n	8006bb8 <_dtoa_r+0xaa8>
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca4:	2a30      	cmp	r2, #48	; 0x30
 8006ca6:	d0fa      	beq.n	8006c9e <_dtoa_r+0xb8e>
 8006ca8:	e6d7      	b.n	8006a5a <_dtoa_r+0x94a>
 8006caa:	9a01      	ldr	r2, [sp, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d184      	bne.n	8006bba <_dtoa_r+0xaaa>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	2331      	movs	r3, #49	; 0x31
 8006cb8:	7013      	strb	r3, [r2, #0]
 8006cba:	e6ce      	b.n	8006a5a <_dtoa_r+0x94a>
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <_dtoa_r+0xbd4>)
 8006cbe:	f7ff ba95 	b.w	80061ec <_dtoa_r+0xdc>
 8006cc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f47f aa6e 	bne.w	80061a6 <_dtoa_r+0x96>
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <_dtoa_r+0xbd8>)
 8006ccc:	f7ff ba8e 	b.w	80061ec <_dtoa_r+0xdc>
 8006cd0:	9b02      	ldr	r3, [sp, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dcae      	bgt.n	8006c34 <_dtoa_r+0xb24>
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	f73f aea8 	bgt.w	8006a2e <_dtoa_r+0x91e>
 8006cde:	e7a9      	b.n	8006c34 <_dtoa_r+0xb24>
 8006ce0:	080090c0 	.word	0x080090c0
 8006ce4:	08008ec0 	.word	0x08008ec0
 8006ce8:	08009041 	.word	0x08009041

08006cec <rshift>:
 8006cec:	6903      	ldr	r3, [r0, #16]
 8006cee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cfa:	f100 0414 	add.w	r4, r0, #20
 8006cfe:	dd45      	ble.n	8006d8c <rshift+0xa0>
 8006d00:	f011 011f 	ands.w	r1, r1, #31
 8006d04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d0c:	d10c      	bne.n	8006d28 <rshift+0x3c>
 8006d0e:	f100 0710 	add.w	r7, r0, #16
 8006d12:	4629      	mov	r1, r5
 8006d14:	42b1      	cmp	r1, r6
 8006d16:	d334      	bcc.n	8006d82 <rshift+0x96>
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	1eea      	subs	r2, r5, #3
 8006d1e:	4296      	cmp	r6, r2
 8006d20:	bf38      	it	cc
 8006d22:	2300      	movcc	r3, #0
 8006d24:	4423      	add	r3, r4
 8006d26:	e015      	b.n	8006d54 <rshift+0x68>
 8006d28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d2c:	f1c1 0820 	rsb	r8, r1, #32
 8006d30:	40cf      	lsrs	r7, r1
 8006d32:	f105 0e04 	add.w	lr, r5, #4
 8006d36:	46a1      	mov	r9, r4
 8006d38:	4576      	cmp	r6, lr
 8006d3a:	46f4      	mov	ip, lr
 8006d3c:	d815      	bhi.n	8006d6a <rshift+0x7e>
 8006d3e:	1a9a      	subs	r2, r3, r2
 8006d40:	0092      	lsls	r2, r2, #2
 8006d42:	3a04      	subs	r2, #4
 8006d44:	3501      	adds	r5, #1
 8006d46:	42ae      	cmp	r6, r5
 8006d48:	bf38      	it	cc
 8006d4a:	2200      	movcc	r2, #0
 8006d4c:	18a3      	adds	r3, r4, r2
 8006d4e:	50a7      	str	r7, [r4, r2]
 8006d50:	b107      	cbz	r7, 8006d54 <rshift+0x68>
 8006d52:	3304      	adds	r3, #4
 8006d54:	1b1a      	subs	r2, r3, r4
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d5c:	bf08      	it	eq
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	6102      	str	r2, [r0, #16]
 8006d62:	bf08      	it	eq
 8006d64:	6143      	streq	r3, [r0, #20]
 8006d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d6a:	f8dc c000 	ldr.w	ip, [ip]
 8006d6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d72:	ea4c 0707 	orr.w	r7, ip, r7
 8006d76:	f849 7b04 	str.w	r7, [r9], #4
 8006d7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d7e:	40cf      	lsrs	r7, r1
 8006d80:	e7da      	b.n	8006d38 <rshift+0x4c>
 8006d82:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d86:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d8a:	e7c3      	b.n	8006d14 <rshift+0x28>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	e7e1      	b.n	8006d54 <rshift+0x68>

08006d90 <__hexdig_fun>:
 8006d90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d802      	bhi.n	8006d9e <__hexdig_fun+0xe>
 8006d98:	3820      	subs	r0, #32
 8006d9a:	b2c0      	uxtb	r0, r0
 8006d9c:	4770      	bx	lr
 8006d9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d801      	bhi.n	8006daa <__hexdig_fun+0x1a>
 8006da6:	3847      	subs	r0, #71	; 0x47
 8006da8:	e7f7      	b.n	8006d9a <__hexdig_fun+0xa>
 8006daa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d801      	bhi.n	8006db6 <__hexdig_fun+0x26>
 8006db2:	3827      	subs	r0, #39	; 0x27
 8006db4:	e7f1      	b.n	8006d9a <__hexdig_fun+0xa>
 8006db6:	2000      	movs	r0, #0
 8006db8:	4770      	bx	lr
	...

08006dbc <__gethex>:
 8006dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	ed2d 8b02 	vpush	{d8}
 8006dc4:	b089      	sub	sp, #36	; 0x24
 8006dc6:	ee08 0a10 	vmov	s16, r0
 8006dca:	9304      	str	r3, [sp, #16]
 8006dcc:	4bb4      	ldr	r3, [pc, #720]	; (80070a0 <__gethex+0x2e4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	468b      	mov	fp, r1
 8006dd6:	4690      	mov	r8, r2
 8006dd8:	f7f9 fa22 	bl	8000220 <strlen>
 8006ddc:	9b01      	ldr	r3, [sp, #4]
 8006dde:	f8db 2000 	ldr.w	r2, [fp]
 8006de2:	4403      	add	r3, r0
 8006de4:	4682      	mov	sl, r0
 8006de6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	1c93      	adds	r3, r2, #2
 8006dee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006df2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006df6:	32fe      	adds	r2, #254	; 0xfe
 8006df8:	18d1      	adds	r1, r2, r3
 8006dfa:	461f      	mov	r7, r3
 8006dfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e00:	9100      	str	r1, [sp, #0]
 8006e02:	2830      	cmp	r0, #48	; 0x30
 8006e04:	d0f8      	beq.n	8006df8 <__gethex+0x3c>
 8006e06:	f7ff ffc3 	bl	8006d90 <__hexdig_fun>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d13a      	bne.n	8006e86 <__gethex+0xca>
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	4652      	mov	r2, sl
 8006e14:	4638      	mov	r0, r7
 8006e16:	f001 fa33 	bl	8008280 <strncmp>
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d168      	bne.n	8006ef2 <__gethex+0x136>
 8006e20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e24:	eb07 060a 	add.w	r6, r7, sl
 8006e28:	f7ff ffb2 	bl	8006d90 <__hexdig_fun>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d062      	beq.n	8006ef6 <__gethex+0x13a>
 8006e30:	4633      	mov	r3, r6
 8006e32:	7818      	ldrb	r0, [r3, #0]
 8006e34:	2830      	cmp	r0, #48	; 0x30
 8006e36:	461f      	mov	r7, r3
 8006e38:	f103 0301 	add.w	r3, r3, #1
 8006e3c:	d0f9      	beq.n	8006e32 <__gethex+0x76>
 8006e3e:	f7ff ffa7 	bl	8006d90 <__hexdig_fun>
 8006e42:	2301      	movs	r3, #1
 8006e44:	fab0 f480 	clz	r4, r0
 8006e48:	0964      	lsrs	r4, r4, #5
 8006e4a:	4635      	mov	r5, r6
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	463a      	mov	r2, r7
 8006e50:	4616      	mov	r6, r2
 8006e52:	3201      	adds	r2, #1
 8006e54:	7830      	ldrb	r0, [r6, #0]
 8006e56:	f7ff ff9b 	bl	8006d90 <__hexdig_fun>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d1f8      	bne.n	8006e50 <__gethex+0x94>
 8006e5e:	9901      	ldr	r1, [sp, #4]
 8006e60:	4652      	mov	r2, sl
 8006e62:	4630      	mov	r0, r6
 8006e64:	f001 fa0c 	bl	8008280 <strncmp>
 8006e68:	b980      	cbnz	r0, 8006e8c <__gethex+0xd0>
 8006e6a:	b94d      	cbnz	r5, 8006e80 <__gethex+0xc4>
 8006e6c:	eb06 050a 	add.w	r5, r6, sl
 8006e70:	462a      	mov	r2, r5
 8006e72:	4616      	mov	r6, r2
 8006e74:	3201      	adds	r2, #1
 8006e76:	7830      	ldrb	r0, [r6, #0]
 8006e78:	f7ff ff8a 	bl	8006d90 <__hexdig_fun>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1f8      	bne.n	8006e72 <__gethex+0xb6>
 8006e80:	1bad      	subs	r5, r5, r6
 8006e82:	00ad      	lsls	r5, r5, #2
 8006e84:	e004      	b.n	8006e90 <__gethex+0xd4>
 8006e86:	2400      	movs	r4, #0
 8006e88:	4625      	mov	r5, r4
 8006e8a:	e7e0      	b.n	8006e4e <__gethex+0x92>
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	d1f7      	bne.n	8006e80 <__gethex+0xc4>
 8006e90:	7833      	ldrb	r3, [r6, #0]
 8006e92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e96:	2b50      	cmp	r3, #80	; 0x50
 8006e98:	d13b      	bne.n	8006f12 <__gethex+0x156>
 8006e9a:	7873      	ldrb	r3, [r6, #1]
 8006e9c:	2b2b      	cmp	r3, #43	; 0x2b
 8006e9e:	d02c      	beq.n	8006efa <__gethex+0x13e>
 8006ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8006ea2:	d02e      	beq.n	8006f02 <__gethex+0x146>
 8006ea4:	1c71      	adds	r1, r6, #1
 8006ea6:	f04f 0900 	mov.w	r9, #0
 8006eaa:	7808      	ldrb	r0, [r1, #0]
 8006eac:	f7ff ff70 	bl	8006d90 <__hexdig_fun>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b18      	cmp	r3, #24
 8006eb6:	d82c      	bhi.n	8006f12 <__gethex+0x156>
 8006eb8:	f1a0 0210 	sub.w	r2, r0, #16
 8006ebc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ec0:	f7ff ff66 	bl	8006d90 <__hexdig_fun>
 8006ec4:	1e43      	subs	r3, r0, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b18      	cmp	r3, #24
 8006eca:	d91d      	bls.n	8006f08 <__gethex+0x14c>
 8006ecc:	f1b9 0f00 	cmp.w	r9, #0
 8006ed0:	d000      	beq.n	8006ed4 <__gethex+0x118>
 8006ed2:	4252      	negs	r2, r2
 8006ed4:	4415      	add	r5, r2
 8006ed6:	f8cb 1000 	str.w	r1, [fp]
 8006eda:	b1e4      	cbz	r4, 8006f16 <__gethex+0x15a>
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2700      	movne	r7, #0
 8006ee4:	2706      	moveq	r7, #6
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	b009      	add	sp, #36	; 0x24
 8006eea:	ecbd 8b02 	vpop	{d8}
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	463e      	mov	r6, r7
 8006ef4:	4625      	mov	r5, r4
 8006ef6:	2401      	movs	r4, #1
 8006ef8:	e7ca      	b.n	8006e90 <__gethex+0xd4>
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	1cb1      	adds	r1, r6, #2
 8006f00:	e7d3      	b.n	8006eaa <__gethex+0xee>
 8006f02:	f04f 0901 	mov.w	r9, #1
 8006f06:	e7fa      	b.n	8006efe <__gethex+0x142>
 8006f08:	230a      	movs	r3, #10
 8006f0a:	fb03 0202 	mla	r2, r3, r2, r0
 8006f0e:	3a10      	subs	r2, #16
 8006f10:	e7d4      	b.n	8006ebc <__gethex+0x100>
 8006f12:	4631      	mov	r1, r6
 8006f14:	e7df      	b.n	8006ed6 <__gethex+0x11a>
 8006f16:	1bf3      	subs	r3, r6, r7
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	2b07      	cmp	r3, #7
 8006f1e:	dc0b      	bgt.n	8006f38 <__gethex+0x17c>
 8006f20:	ee18 0a10 	vmov	r0, s16
 8006f24:	f000 fa7e 	bl	8007424 <_Balloc>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	b940      	cbnz	r0, 8006f3e <__gethex+0x182>
 8006f2c:	4b5d      	ldr	r3, [pc, #372]	; (80070a4 <__gethex+0x2e8>)
 8006f2e:	4602      	mov	r2, r0
 8006f30:	21de      	movs	r1, #222	; 0xde
 8006f32:	485d      	ldr	r0, [pc, #372]	; (80070a8 <__gethex+0x2ec>)
 8006f34:	f001 f9c6 	bl	80082c4 <__assert_func>
 8006f38:	3101      	adds	r1, #1
 8006f3a:	105b      	asrs	r3, r3, #1
 8006f3c:	e7ee      	b.n	8006f1c <__gethex+0x160>
 8006f3e:	f100 0914 	add.w	r9, r0, #20
 8006f42:	f04f 0b00 	mov.w	fp, #0
 8006f46:	f1ca 0301 	rsb	r3, sl, #1
 8006f4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f4e:	f8cd b000 	str.w	fp, [sp]
 8006f52:	9306      	str	r3, [sp, #24]
 8006f54:	42b7      	cmp	r7, r6
 8006f56:	d340      	bcc.n	8006fda <__gethex+0x21e>
 8006f58:	9802      	ldr	r0, [sp, #8]
 8006f5a:	9b00      	ldr	r3, [sp, #0]
 8006f5c:	f840 3b04 	str.w	r3, [r0], #4
 8006f60:	eba0 0009 	sub.w	r0, r0, r9
 8006f64:	1080      	asrs	r0, r0, #2
 8006f66:	0146      	lsls	r6, r0, #5
 8006f68:	6120      	str	r0, [r4, #16]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fb4c 	bl	8007608 <__hi0bits>
 8006f70:	1a30      	subs	r0, r6, r0
 8006f72:	f8d8 6000 	ldr.w	r6, [r8]
 8006f76:	42b0      	cmp	r0, r6
 8006f78:	dd63      	ble.n	8007042 <__gethex+0x286>
 8006f7a:	1b87      	subs	r7, r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fef0 	bl	8007d64 <__any_on>
 8006f84:	4682      	mov	sl, r0
 8006f86:	b1a8      	cbz	r0, 8006fb4 <__gethex+0x1f8>
 8006f88:	1e7b      	subs	r3, r7, #1
 8006f8a:	1159      	asrs	r1, r3, #5
 8006f8c:	f003 021f 	and.w	r2, r3, #31
 8006f90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f94:	f04f 0a01 	mov.w	sl, #1
 8006f98:	fa0a f202 	lsl.w	r2, sl, r2
 8006f9c:	420a      	tst	r2, r1
 8006f9e:	d009      	beq.n	8006fb4 <__gethex+0x1f8>
 8006fa0:	4553      	cmp	r3, sl
 8006fa2:	dd05      	ble.n	8006fb0 <__gethex+0x1f4>
 8006fa4:	1eb9      	subs	r1, r7, #2
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fedc 	bl	8007d64 <__any_on>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d145      	bne.n	800703c <__gethex+0x280>
 8006fb0:	f04f 0a02 	mov.w	sl, #2
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff fe98 	bl	8006cec <rshift>
 8006fbc:	443d      	add	r5, r7
 8006fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fc2:	42ab      	cmp	r3, r5
 8006fc4:	da4c      	bge.n	8007060 <__gethex+0x2a4>
 8006fc6:	ee18 0a10 	vmov	r0, s16
 8006fca:	4621      	mov	r1, r4
 8006fcc:	f000 fa6a 	bl	80074a4 <_Bfree>
 8006fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	27a3      	movs	r7, #163	; 0xa3
 8006fd8:	e785      	b.n	8006ee6 <__gethex+0x12a>
 8006fda:	1e73      	subs	r3, r6, #1
 8006fdc:	9a05      	ldr	r2, [sp, #20]
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d019      	beq.n	800701c <__gethex+0x260>
 8006fe8:	f1bb 0f20 	cmp.w	fp, #32
 8006fec:	d107      	bne.n	8006ffe <__gethex+0x242>
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	9a00      	ldr	r2, [sp, #0]
 8006ff2:	f843 2b04 	str.w	r2, [r3], #4
 8006ff6:	9302      	str	r3, [sp, #8]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	469b      	mov	fp, r3
 8006ffe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007002:	f7ff fec5 	bl	8006d90 <__hexdig_fun>
 8007006:	9b00      	ldr	r3, [sp, #0]
 8007008:	f000 000f 	and.w	r0, r0, #15
 800700c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007010:	4303      	orrs	r3, r0
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	f10b 0b04 	add.w	fp, fp, #4
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	e00d      	b.n	8007038 <__gethex+0x27c>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	9a06      	ldr	r2, [sp, #24]
 8007020:	4413      	add	r3, r2
 8007022:	42bb      	cmp	r3, r7
 8007024:	d3e0      	bcc.n	8006fe8 <__gethex+0x22c>
 8007026:	4618      	mov	r0, r3
 8007028:	9901      	ldr	r1, [sp, #4]
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	4652      	mov	r2, sl
 800702e:	f001 f927 	bl	8008280 <strncmp>
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	2800      	cmp	r0, #0
 8007036:	d1d7      	bne.n	8006fe8 <__gethex+0x22c>
 8007038:	461e      	mov	r6, r3
 800703a:	e78b      	b.n	8006f54 <__gethex+0x198>
 800703c:	f04f 0a03 	mov.w	sl, #3
 8007040:	e7b8      	b.n	8006fb4 <__gethex+0x1f8>
 8007042:	da0a      	bge.n	800705a <__gethex+0x29e>
 8007044:	1a37      	subs	r7, r6, r0
 8007046:	4621      	mov	r1, r4
 8007048:	ee18 0a10 	vmov	r0, s16
 800704c:	463a      	mov	r2, r7
 800704e:	f000 fc45 	bl	80078dc <__lshift>
 8007052:	1bed      	subs	r5, r5, r7
 8007054:	4604      	mov	r4, r0
 8007056:	f100 0914 	add.w	r9, r0, #20
 800705a:	f04f 0a00 	mov.w	sl, #0
 800705e:	e7ae      	b.n	8006fbe <__gethex+0x202>
 8007060:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007064:	42a8      	cmp	r0, r5
 8007066:	dd72      	ble.n	800714e <__gethex+0x392>
 8007068:	1b45      	subs	r5, r0, r5
 800706a:	42ae      	cmp	r6, r5
 800706c:	dc36      	bgt.n	80070dc <__gethex+0x320>
 800706e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d02a      	beq.n	80070cc <__gethex+0x310>
 8007076:	2b03      	cmp	r3, #3
 8007078:	d02c      	beq.n	80070d4 <__gethex+0x318>
 800707a:	2b01      	cmp	r3, #1
 800707c:	d11c      	bne.n	80070b8 <__gethex+0x2fc>
 800707e:	42ae      	cmp	r6, r5
 8007080:	d11a      	bne.n	80070b8 <__gethex+0x2fc>
 8007082:	2e01      	cmp	r6, #1
 8007084:	d112      	bne.n	80070ac <__gethex+0x2f0>
 8007086:	9a04      	ldr	r2, [sp, #16]
 8007088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	2301      	movs	r3, #1
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	f8c9 3000 	str.w	r3, [r9]
 8007096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007098:	2762      	movs	r7, #98	; 0x62
 800709a:	601c      	str	r4, [r3, #0]
 800709c:	e723      	b.n	8006ee6 <__gethex+0x12a>
 800709e:	bf00      	nop
 80070a0:	08009138 	.word	0x08009138
 80070a4:	080090c0 	.word	0x080090c0
 80070a8:	080090d1 	.word	0x080090d1
 80070ac:	1e71      	subs	r1, r6, #1
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fe58 	bl	8007d64 <__any_on>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d1e6      	bne.n	8007086 <__gethex+0x2ca>
 80070b8:	ee18 0a10 	vmov	r0, s16
 80070bc:	4621      	mov	r1, r4
 80070be:	f000 f9f1 	bl	80074a4 <_Bfree>
 80070c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070c4:	2300      	movs	r3, #0
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	2750      	movs	r7, #80	; 0x50
 80070ca:	e70c      	b.n	8006ee6 <__gethex+0x12a>
 80070cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f2      	bne.n	80070b8 <__gethex+0x2fc>
 80070d2:	e7d8      	b.n	8007086 <__gethex+0x2ca>
 80070d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1d5      	bne.n	8007086 <__gethex+0x2ca>
 80070da:	e7ed      	b.n	80070b8 <__gethex+0x2fc>
 80070dc:	1e6f      	subs	r7, r5, #1
 80070de:	f1ba 0f00 	cmp.w	sl, #0
 80070e2:	d131      	bne.n	8007148 <__gethex+0x38c>
 80070e4:	b127      	cbz	r7, 80070f0 <__gethex+0x334>
 80070e6:	4639      	mov	r1, r7
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fe3b 	bl	8007d64 <__any_on>
 80070ee:	4682      	mov	sl, r0
 80070f0:	117b      	asrs	r3, r7, #5
 80070f2:	2101      	movs	r1, #1
 80070f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80070f8:	f007 071f 	and.w	r7, r7, #31
 80070fc:	fa01 f707 	lsl.w	r7, r1, r7
 8007100:	421f      	tst	r7, r3
 8007102:	4629      	mov	r1, r5
 8007104:	4620      	mov	r0, r4
 8007106:	bf18      	it	ne
 8007108:	f04a 0a02 	orrne.w	sl, sl, #2
 800710c:	1b76      	subs	r6, r6, r5
 800710e:	f7ff fded 	bl	8006cec <rshift>
 8007112:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007116:	2702      	movs	r7, #2
 8007118:	f1ba 0f00 	cmp.w	sl, #0
 800711c:	d048      	beq.n	80071b0 <__gethex+0x3f4>
 800711e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d015      	beq.n	8007152 <__gethex+0x396>
 8007126:	2b03      	cmp	r3, #3
 8007128:	d017      	beq.n	800715a <__gethex+0x39e>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d109      	bne.n	8007142 <__gethex+0x386>
 800712e:	f01a 0f02 	tst.w	sl, #2
 8007132:	d006      	beq.n	8007142 <__gethex+0x386>
 8007134:	f8d9 0000 	ldr.w	r0, [r9]
 8007138:	ea4a 0a00 	orr.w	sl, sl, r0
 800713c:	f01a 0f01 	tst.w	sl, #1
 8007140:	d10e      	bne.n	8007160 <__gethex+0x3a4>
 8007142:	f047 0710 	orr.w	r7, r7, #16
 8007146:	e033      	b.n	80071b0 <__gethex+0x3f4>
 8007148:	f04f 0a01 	mov.w	sl, #1
 800714c:	e7d0      	b.n	80070f0 <__gethex+0x334>
 800714e:	2701      	movs	r7, #1
 8007150:	e7e2      	b.n	8007118 <__gethex+0x35c>
 8007152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007154:	f1c3 0301 	rsb	r3, r3, #1
 8007158:	9315      	str	r3, [sp, #84]	; 0x54
 800715a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <__gethex+0x386>
 8007160:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007164:	f104 0314 	add.w	r3, r4, #20
 8007168:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800716c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007170:	f04f 0c00 	mov.w	ip, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f853 2b04 	ldr.w	r2, [r3], #4
 800717a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800717e:	d01c      	beq.n	80071ba <__gethex+0x3fe>
 8007180:	3201      	adds	r2, #1
 8007182:	6002      	str	r2, [r0, #0]
 8007184:	2f02      	cmp	r7, #2
 8007186:	f104 0314 	add.w	r3, r4, #20
 800718a:	d13f      	bne.n	800720c <__gethex+0x450>
 800718c:	f8d8 2000 	ldr.w	r2, [r8]
 8007190:	3a01      	subs	r2, #1
 8007192:	42b2      	cmp	r2, r6
 8007194:	d10a      	bne.n	80071ac <__gethex+0x3f0>
 8007196:	1171      	asrs	r1, r6, #5
 8007198:	2201      	movs	r2, #1
 800719a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800719e:	f006 061f 	and.w	r6, r6, #31
 80071a2:	fa02 f606 	lsl.w	r6, r2, r6
 80071a6:	421e      	tst	r6, r3
 80071a8:	bf18      	it	ne
 80071aa:	4617      	movne	r7, r2
 80071ac:	f047 0720 	orr.w	r7, r7, #32
 80071b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071b2:	601c      	str	r4, [r3, #0]
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	601d      	str	r5, [r3, #0]
 80071b8:	e695      	b.n	8006ee6 <__gethex+0x12a>
 80071ba:	4299      	cmp	r1, r3
 80071bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80071c0:	d8d8      	bhi.n	8007174 <__gethex+0x3b8>
 80071c2:	68a3      	ldr	r3, [r4, #8]
 80071c4:	459b      	cmp	fp, r3
 80071c6:	db19      	blt.n	80071fc <__gethex+0x440>
 80071c8:	6861      	ldr	r1, [r4, #4]
 80071ca:	ee18 0a10 	vmov	r0, s16
 80071ce:	3101      	adds	r1, #1
 80071d0:	f000 f928 	bl	8007424 <_Balloc>
 80071d4:	4681      	mov	r9, r0
 80071d6:	b918      	cbnz	r0, 80071e0 <__gethex+0x424>
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <__gethex+0x488>)
 80071da:	4602      	mov	r2, r0
 80071dc:	2184      	movs	r1, #132	; 0x84
 80071de:	e6a8      	b.n	8006f32 <__gethex+0x176>
 80071e0:	6922      	ldr	r2, [r4, #16]
 80071e2:	3202      	adds	r2, #2
 80071e4:	f104 010c 	add.w	r1, r4, #12
 80071e8:	0092      	lsls	r2, r2, #2
 80071ea:	300c      	adds	r0, #12
 80071ec:	f000 f90c 	bl	8007408 <memcpy>
 80071f0:	4621      	mov	r1, r4
 80071f2:	ee18 0a10 	vmov	r0, s16
 80071f6:	f000 f955 	bl	80074a4 <_Bfree>
 80071fa:	464c      	mov	r4, r9
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007204:	6122      	str	r2, [r4, #16]
 8007206:	2201      	movs	r2, #1
 8007208:	615a      	str	r2, [r3, #20]
 800720a:	e7bb      	b.n	8007184 <__gethex+0x3c8>
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	455a      	cmp	r2, fp
 8007210:	dd0b      	ble.n	800722a <__gethex+0x46e>
 8007212:	2101      	movs	r1, #1
 8007214:	4620      	mov	r0, r4
 8007216:	f7ff fd69 	bl	8006cec <rshift>
 800721a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800721e:	3501      	adds	r5, #1
 8007220:	42ab      	cmp	r3, r5
 8007222:	f6ff aed0 	blt.w	8006fc6 <__gethex+0x20a>
 8007226:	2701      	movs	r7, #1
 8007228:	e7c0      	b.n	80071ac <__gethex+0x3f0>
 800722a:	f016 061f 	ands.w	r6, r6, #31
 800722e:	d0fa      	beq.n	8007226 <__gethex+0x46a>
 8007230:	4453      	add	r3, sl
 8007232:	f1c6 0620 	rsb	r6, r6, #32
 8007236:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800723a:	f000 f9e5 	bl	8007608 <__hi0bits>
 800723e:	42b0      	cmp	r0, r6
 8007240:	dbe7      	blt.n	8007212 <__gethex+0x456>
 8007242:	e7f0      	b.n	8007226 <__gethex+0x46a>
 8007244:	080090c0 	.word	0x080090c0

08007248 <L_shift>:
 8007248:	f1c2 0208 	rsb	r2, r2, #8
 800724c:	0092      	lsls	r2, r2, #2
 800724e:	b570      	push	{r4, r5, r6, lr}
 8007250:	f1c2 0620 	rsb	r6, r2, #32
 8007254:	6843      	ldr	r3, [r0, #4]
 8007256:	6804      	ldr	r4, [r0, #0]
 8007258:	fa03 f506 	lsl.w	r5, r3, r6
 800725c:	432c      	orrs	r4, r5
 800725e:	40d3      	lsrs	r3, r2
 8007260:	6004      	str	r4, [r0, #0]
 8007262:	f840 3f04 	str.w	r3, [r0, #4]!
 8007266:	4288      	cmp	r0, r1
 8007268:	d3f4      	bcc.n	8007254 <L_shift+0xc>
 800726a:	bd70      	pop	{r4, r5, r6, pc}

0800726c <__match>:
 800726c:	b530      	push	{r4, r5, lr}
 800726e:	6803      	ldr	r3, [r0, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	b914      	cbnz	r4, 800727e <__match+0x12>
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	2001      	movs	r0, #1
 800727c:	bd30      	pop	{r4, r5, pc}
 800727e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007282:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007286:	2d19      	cmp	r5, #25
 8007288:	bf98      	it	ls
 800728a:	3220      	addls	r2, #32
 800728c:	42a2      	cmp	r2, r4
 800728e:	d0f0      	beq.n	8007272 <__match+0x6>
 8007290:	2000      	movs	r0, #0
 8007292:	e7f3      	b.n	800727c <__match+0x10>

08007294 <__hexnan>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	680b      	ldr	r3, [r1, #0]
 800729a:	115e      	asrs	r6, r3, #5
 800729c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072a0:	f013 031f 	ands.w	r3, r3, #31
 80072a4:	b087      	sub	sp, #28
 80072a6:	bf18      	it	ne
 80072a8:	3604      	addne	r6, #4
 80072aa:	2500      	movs	r5, #0
 80072ac:	1f37      	subs	r7, r6, #4
 80072ae:	4690      	mov	r8, r2
 80072b0:	6802      	ldr	r2, [r0, #0]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	4682      	mov	sl, r0
 80072b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80072ba:	46b9      	mov	r9, r7
 80072bc:	463c      	mov	r4, r7
 80072be:	9502      	str	r5, [sp, #8]
 80072c0:	46ab      	mov	fp, r5
 80072c2:	7851      	ldrb	r1, [r2, #1]
 80072c4:	1c53      	adds	r3, r2, #1
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	b341      	cbz	r1, 800731c <__hexnan+0x88>
 80072ca:	4608      	mov	r0, r1
 80072cc:	9205      	str	r2, [sp, #20]
 80072ce:	9104      	str	r1, [sp, #16]
 80072d0:	f7ff fd5e 	bl	8006d90 <__hexdig_fun>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d14f      	bne.n	8007378 <__hexnan+0xe4>
 80072d8:	9904      	ldr	r1, [sp, #16]
 80072da:	9a05      	ldr	r2, [sp, #20]
 80072dc:	2920      	cmp	r1, #32
 80072de:	d818      	bhi.n	8007312 <__hexnan+0x7e>
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	459b      	cmp	fp, r3
 80072e4:	dd13      	ble.n	800730e <__hexnan+0x7a>
 80072e6:	454c      	cmp	r4, r9
 80072e8:	d206      	bcs.n	80072f8 <__hexnan+0x64>
 80072ea:	2d07      	cmp	r5, #7
 80072ec:	dc04      	bgt.n	80072f8 <__hexnan+0x64>
 80072ee:	462a      	mov	r2, r5
 80072f0:	4649      	mov	r1, r9
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff ffa8 	bl	8007248 <L_shift>
 80072f8:	4544      	cmp	r4, r8
 80072fa:	d950      	bls.n	800739e <__hexnan+0x10a>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f1a4 0904 	sub.w	r9, r4, #4
 8007302:	f844 3c04 	str.w	r3, [r4, #-4]
 8007306:	f8cd b008 	str.w	fp, [sp, #8]
 800730a:	464c      	mov	r4, r9
 800730c:	461d      	mov	r5, r3
 800730e:	9a03      	ldr	r2, [sp, #12]
 8007310:	e7d7      	b.n	80072c2 <__hexnan+0x2e>
 8007312:	2929      	cmp	r1, #41	; 0x29
 8007314:	d156      	bne.n	80073c4 <__hexnan+0x130>
 8007316:	3202      	adds	r2, #2
 8007318:	f8ca 2000 	str.w	r2, [sl]
 800731c:	f1bb 0f00 	cmp.w	fp, #0
 8007320:	d050      	beq.n	80073c4 <__hexnan+0x130>
 8007322:	454c      	cmp	r4, r9
 8007324:	d206      	bcs.n	8007334 <__hexnan+0xa0>
 8007326:	2d07      	cmp	r5, #7
 8007328:	dc04      	bgt.n	8007334 <__hexnan+0xa0>
 800732a:	462a      	mov	r2, r5
 800732c:	4649      	mov	r1, r9
 800732e:	4620      	mov	r0, r4
 8007330:	f7ff ff8a 	bl	8007248 <L_shift>
 8007334:	4544      	cmp	r4, r8
 8007336:	d934      	bls.n	80073a2 <__hexnan+0x10e>
 8007338:	f1a8 0204 	sub.w	r2, r8, #4
 800733c:	4623      	mov	r3, r4
 800733e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007342:	f842 1f04 	str.w	r1, [r2, #4]!
 8007346:	429f      	cmp	r7, r3
 8007348:	d2f9      	bcs.n	800733e <__hexnan+0xaa>
 800734a:	1b3b      	subs	r3, r7, r4
 800734c:	f023 0303 	bic.w	r3, r3, #3
 8007350:	3304      	adds	r3, #4
 8007352:	3401      	adds	r4, #1
 8007354:	3e03      	subs	r6, #3
 8007356:	42b4      	cmp	r4, r6
 8007358:	bf88      	it	hi
 800735a:	2304      	movhi	r3, #4
 800735c:	4443      	add	r3, r8
 800735e:	2200      	movs	r2, #0
 8007360:	f843 2b04 	str.w	r2, [r3], #4
 8007364:	429f      	cmp	r7, r3
 8007366:	d2fb      	bcs.n	8007360 <__hexnan+0xcc>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	b91b      	cbnz	r3, 8007374 <__hexnan+0xe0>
 800736c:	4547      	cmp	r7, r8
 800736e:	d127      	bne.n	80073c0 <__hexnan+0x12c>
 8007370:	2301      	movs	r3, #1
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	2005      	movs	r0, #5
 8007376:	e026      	b.n	80073c6 <__hexnan+0x132>
 8007378:	3501      	adds	r5, #1
 800737a:	2d08      	cmp	r5, #8
 800737c:	f10b 0b01 	add.w	fp, fp, #1
 8007380:	dd06      	ble.n	8007390 <__hexnan+0xfc>
 8007382:	4544      	cmp	r4, r8
 8007384:	d9c3      	bls.n	800730e <__hexnan+0x7a>
 8007386:	2300      	movs	r3, #0
 8007388:	f844 3c04 	str.w	r3, [r4, #-4]
 800738c:	2501      	movs	r5, #1
 800738e:	3c04      	subs	r4, #4
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	f000 000f 	and.w	r0, r0, #15
 8007396:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	e7b7      	b.n	800730e <__hexnan+0x7a>
 800739e:	2508      	movs	r5, #8
 80073a0:	e7b5      	b.n	800730e <__hexnan+0x7a>
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0df      	beq.n	8007368 <__hexnan+0xd4>
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	f1c3 0320 	rsb	r3, r3, #32
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
 80073b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073b8:	401a      	ands	r2, r3
 80073ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80073be:	e7d3      	b.n	8007368 <__hexnan+0xd4>
 80073c0:	3f04      	subs	r7, #4
 80073c2:	e7d1      	b.n	8007368 <__hexnan+0xd4>
 80073c4:	2004      	movs	r0, #4
 80073c6:	b007      	add	sp, #28
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073cc <_localeconv_r>:
 80073cc:	4800      	ldr	r0, [pc, #0]	; (80073d0 <_localeconv_r+0x4>)
 80073ce:	4770      	bx	lr
 80073d0:	20000164 	.word	0x20000164

080073d4 <malloc>:
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <malloc+0xc>)
 80073d6:	4601      	mov	r1, r0
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	f000 bd67 	b.w	8007eac <_malloc_r>
 80073de:	bf00      	nop
 80073e0:	2000000c 	.word	0x2000000c

080073e4 <__ascii_mbtowc>:
 80073e4:	b082      	sub	sp, #8
 80073e6:	b901      	cbnz	r1, 80073ea <__ascii_mbtowc+0x6>
 80073e8:	a901      	add	r1, sp, #4
 80073ea:	b142      	cbz	r2, 80073fe <__ascii_mbtowc+0x1a>
 80073ec:	b14b      	cbz	r3, 8007402 <__ascii_mbtowc+0x1e>
 80073ee:	7813      	ldrb	r3, [r2, #0]
 80073f0:	600b      	str	r3, [r1, #0]
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	1e10      	subs	r0, r2, #0
 80073f6:	bf18      	it	ne
 80073f8:	2001      	movne	r0, #1
 80073fa:	b002      	add	sp, #8
 80073fc:	4770      	bx	lr
 80073fe:	4610      	mov	r0, r2
 8007400:	e7fb      	b.n	80073fa <__ascii_mbtowc+0x16>
 8007402:	f06f 0001 	mvn.w	r0, #1
 8007406:	e7f8      	b.n	80073fa <__ascii_mbtowc+0x16>

08007408 <memcpy>:
 8007408:	440a      	add	r2, r1
 800740a:	4291      	cmp	r1, r2
 800740c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007410:	d100      	bne.n	8007414 <memcpy+0xc>
 8007412:	4770      	bx	lr
 8007414:	b510      	push	{r4, lr}
 8007416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741e:	4291      	cmp	r1, r2
 8007420:	d1f9      	bne.n	8007416 <memcpy+0xe>
 8007422:	bd10      	pop	{r4, pc}

08007424 <_Balloc>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007428:	4604      	mov	r4, r0
 800742a:	460d      	mov	r5, r1
 800742c:	b976      	cbnz	r6, 800744c <_Balloc+0x28>
 800742e:	2010      	movs	r0, #16
 8007430:	f7ff ffd0 	bl	80073d4 <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	6260      	str	r0, [r4, #36]	; 0x24
 8007438:	b920      	cbnz	r0, 8007444 <_Balloc+0x20>
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <_Balloc+0x78>)
 800743c:	4818      	ldr	r0, [pc, #96]	; (80074a0 <_Balloc+0x7c>)
 800743e:	2166      	movs	r1, #102	; 0x66
 8007440:	f000 ff40 	bl	80082c4 <__assert_func>
 8007444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007448:	6006      	str	r6, [r0, #0]
 800744a:	60c6      	str	r6, [r0, #12]
 800744c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800744e:	68f3      	ldr	r3, [r6, #12]
 8007450:	b183      	cbz	r3, 8007474 <_Balloc+0x50>
 8007452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800745a:	b9b8      	cbnz	r0, 800748c <_Balloc+0x68>
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f605 	lsl.w	r6, r1, r5
 8007462:	1d72      	adds	r2, r6, #5
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fc9d 	bl	8007da6 <_calloc_r>
 800746c:	b160      	cbz	r0, 8007488 <_Balloc+0x64>
 800746e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007472:	e00e      	b.n	8007492 <_Balloc+0x6e>
 8007474:	2221      	movs	r2, #33	; 0x21
 8007476:	2104      	movs	r1, #4
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fc94 	bl	8007da6 <_calloc_r>
 800747e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007480:	60f0      	str	r0, [r6, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <_Balloc+0x2e>
 8007488:	2000      	movs	r0, #0
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007492:	2300      	movs	r3, #0
 8007494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007498:	e7f7      	b.n	800748a <_Balloc+0x66>
 800749a:	bf00      	nop
 800749c:	0800904e 	.word	0x0800904e
 80074a0:	0800914c 	.word	0x0800914c

080074a4 <_Bfree>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Bfree+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7ff ff90 	bl	80073d4 <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6268      	str	r0, [r5, #36]	; 0x24
 80074b8:	b920      	cbnz	r0, 80074c4 <_Bfree+0x20>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <_Bfree+0x3c>)
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <_Bfree+0x40>)
 80074be:	218a      	movs	r1, #138	; 0x8a
 80074c0:	f000 ff00 	bl	80082c4 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	b13c      	cbz	r4, 80074de <_Bfree+0x3a>
 80074ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074d0:	6862      	ldr	r2, [r4, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	0800904e 	.word	0x0800904e
 80074e4:	0800914c 	.word	0x0800914c

080074e8 <__multadd>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	690d      	ldr	r5, [r1, #16]
 80074ee:	4607      	mov	r7, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	461e      	mov	r6, r3
 80074f4:	f101 0c14 	add.w	ip, r1, #20
 80074f8:	2000      	movs	r0, #0
 80074fa:	f8dc 3000 	ldr.w	r3, [ip]
 80074fe:	b299      	uxth	r1, r3
 8007500:	fb02 6101 	mla	r1, r2, r1, r6
 8007504:	0c1e      	lsrs	r6, r3, #16
 8007506:	0c0b      	lsrs	r3, r1, #16
 8007508:	fb02 3306 	mla	r3, r2, r6, r3
 800750c:	b289      	uxth	r1, r1
 800750e:	3001      	adds	r0, #1
 8007510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007514:	4285      	cmp	r5, r0
 8007516:	f84c 1b04 	str.w	r1, [ip], #4
 800751a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800751e:	dcec      	bgt.n	80074fa <__multadd+0x12>
 8007520:	b30e      	cbz	r6, 8007566 <__multadd+0x7e>
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc19      	bgt.n	800755c <__multadd+0x74>
 8007528:	6861      	ldr	r1, [r4, #4]
 800752a:	4638      	mov	r0, r7
 800752c:	3101      	adds	r1, #1
 800752e:	f7ff ff79 	bl	8007424 <_Balloc>
 8007532:	4680      	mov	r8, r0
 8007534:	b928      	cbnz	r0, 8007542 <__multadd+0x5a>
 8007536:	4602      	mov	r2, r0
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <__multadd+0x84>)
 800753a:	480d      	ldr	r0, [pc, #52]	; (8007570 <__multadd+0x88>)
 800753c:	21b5      	movs	r1, #181	; 0xb5
 800753e:	f000 fec1 	bl	80082c4 <__assert_func>
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	f104 010c 	add.w	r1, r4, #12
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	300c      	adds	r0, #12
 800754e:	f7ff ff5b 	bl	8007408 <memcpy>
 8007552:	4621      	mov	r1, r4
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ffa5 	bl	80074a4 <_Bfree>
 800755a:	4644      	mov	r4, r8
 800755c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007560:	3501      	adds	r5, #1
 8007562:	615e      	str	r6, [r3, #20]
 8007564:	6125      	str	r5, [r4, #16]
 8007566:	4620      	mov	r0, r4
 8007568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800756c:	080090c0 	.word	0x080090c0
 8007570:	0800914c 	.word	0x0800914c

08007574 <__s2b>:
 8007574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	4615      	mov	r5, r2
 800757c:	461f      	mov	r7, r3
 800757e:	2209      	movs	r2, #9
 8007580:	3308      	adds	r3, #8
 8007582:	4606      	mov	r6, r0
 8007584:	fb93 f3f2 	sdiv	r3, r3, r2
 8007588:	2100      	movs	r1, #0
 800758a:	2201      	movs	r2, #1
 800758c:	429a      	cmp	r2, r3
 800758e:	db09      	blt.n	80075a4 <__s2b+0x30>
 8007590:	4630      	mov	r0, r6
 8007592:	f7ff ff47 	bl	8007424 <_Balloc>
 8007596:	b940      	cbnz	r0, 80075aa <__s2b+0x36>
 8007598:	4602      	mov	r2, r0
 800759a:	4b19      	ldr	r3, [pc, #100]	; (8007600 <__s2b+0x8c>)
 800759c:	4819      	ldr	r0, [pc, #100]	; (8007604 <__s2b+0x90>)
 800759e:	21ce      	movs	r1, #206	; 0xce
 80075a0:	f000 fe90 	bl	80082c4 <__assert_func>
 80075a4:	0052      	lsls	r2, r2, #1
 80075a6:	3101      	adds	r1, #1
 80075a8:	e7f0      	b.n	800758c <__s2b+0x18>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	6143      	str	r3, [r0, #20]
 80075ae:	2d09      	cmp	r5, #9
 80075b0:	f04f 0301 	mov.w	r3, #1
 80075b4:	6103      	str	r3, [r0, #16]
 80075b6:	dd16      	ble.n	80075e6 <__s2b+0x72>
 80075b8:	f104 0909 	add.w	r9, r4, #9
 80075bc:	46c8      	mov	r8, r9
 80075be:	442c      	add	r4, r5
 80075c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075c4:	4601      	mov	r1, r0
 80075c6:	3b30      	subs	r3, #48	; 0x30
 80075c8:	220a      	movs	r2, #10
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ff8c 	bl	80074e8 <__multadd>
 80075d0:	45a0      	cmp	r8, r4
 80075d2:	d1f5      	bne.n	80075c0 <__s2b+0x4c>
 80075d4:	f1a5 0408 	sub.w	r4, r5, #8
 80075d8:	444c      	add	r4, r9
 80075da:	1b2d      	subs	r5, r5, r4
 80075dc:	1963      	adds	r3, r4, r5
 80075de:	42bb      	cmp	r3, r7
 80075e0:	db04      	blt.n	80075ec <__s2b+0x78>
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	340a      	adds	r4, #10
 80075e8:	2509      	movs	r5, #9
 80075ea:	e7f6      	b.n	80075da <__s2b+0x66>
 80075ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075f0:	4601      	mov	r1, r0
 80075f2:	3b30      	subs	r3, #48	; 0x30
 80075f4:	220a      	movs	r2, #10
 80075f6:	4630      	mov	r0, r6
 80075f8:	f7ff ff76 	bl	80074e8 <__multadd>
 80075fc:	e7ee      	b.n	80075dc <__s2b+0x68>
 80075fe:	bf00      	nop
 8007600:	080090c0 	.word	0x080090c0
 8007604:	0800914c 	.word	0x0800914c

08007608 <__hi0bits>:
 8007608:	0c03      	lsrs	r3, r0, #16
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	b9d3      	cbnz	r3, 8007644 <__hi0bits+0x3c>
 800760e:	0400      	lsls	r0, r0, #16
 8007610:	2310      	movs	r3, #16
 8007612:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007616:	bf04      	itt	eq
 8007618:	0200      	lsleq	r0, r0, #8
 800761a:	3308      	addeq	r3, #8
 800761c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007620:	bf04      	itt	eq
 8007622:	0100      	lsleq	r0, r0, #4
 8007624:	3304      	addeq	r3, #4
 8007626:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800762a:	bf04      	itt	eq
 800762c:	0080      	lsleq	r0, r0, #2
 800762e:	3302      	addeq	r3, #2
 8007630:	2800      	cmp	r0, #0
 8007632:	db05      	blt.n	8007640 <__hi0bits+0x38>
 8007634:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007638:	f103 0301 	add.w	r3, r3, #1
 800763c:	bf08      	it	eq
 800763e:	2320      	moveq	r3, #32
 8007640:	4618      	mov	r0, r3
 8007642:	4770      	bx	lr
 8007644:	2300      	movs	r3, #0
 8007646:	e7e4      	b.n	8007612 <__hi0bits+0xa>

08007648 <__lo0bits>:
 8007648:	6803      	ldr	r3, [r0, #0]
 800764a:	f013 0207 	ands.w	r2, r3, #7
 800764e:	4601      	mov	r1, r0
 8007650:	d00b      	beq.n	800766a <__lo0bits+0x22>
 8007652:	07da      	lsls	r2, r3, #31
 8007654:	d423      	bmi.n	800769e <__lo0bits+0x56>
 8007656:	0798      	lsls	r0, r3, #30
 8007658:	bf49      	itett	mi
 800765a:	085b      	lsrmi	r3, r3, #1
 800765c:	089b      	lsrpl	r3, r3, #2
 800765e:	2001      	movmi	r0, #1
 8007660:	600b      	strmi	r3, [r1, #0]
 8007662:	bf5c      	itt	pl
 8007664:	600b      	strpl	r3, [r1, #0]
 8007666:	2002      	movpl	r0, #2
 8007668:	4770      	bx	lr
 800766a:	b298      	uxth	r0, r3
 800766c:	b9a8      	cbnz	r0, 800769a <__lo0bits+0x52>
 800766e:	0c1b      	lsrs	r3, r3, #16
 8007670:	2010      	movs	r0, #16
 8007672:	b2da      	uxtb	r2, r3
 8007674:	b90a      	cbnz	r2, 800767a <__lo0bits+0x32>
 8007676:	3008      	adds	r0, #8
 8007678:	0a1b      	lsrs	r3, r3, #8
 800767a:	071a      	lsls	r2, r3, #28
 800767c:	bf04      	itt	eq
 800767e:	091b      	lsreq	r3, r3, #4
 8007680:	3004      	addeq	r0, #4
 8007682:	079a      	lsls	r2, r3, #30
 8007684:	bf04      	itt	eq
 8007686:	089b      	lsreq	r3, r3, #2
 8007688:	3002      	addeq	r0, #2
 800768a:	07da      	lsls	r2, r3, #31
 800768c:	d403      	bmi.n	8007696 <__lo0bits+0x4e>
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	f100 0001 	add.w	r0, r0, #1
 8007694:	d005      	beq.n	80076a2 <__lo0bits+0x5a>
 8007696:	600b      	str	r3, [r1, #0]
 8007698:	4770      	bx	lr
 800769a:	4610      	mov	r0, r2
 800769c:	e7e9      	b.n	8007672 <__lo0bits+0x2a>
 800769e:	2000      	movs	r0, #0
 80076a0:	4770      	bx	lr
 80076a2:	2020      	movs	r0, #32
 80076a4:	4770      	bx	lr
	...

080076a8 <__i2b>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	460c      	mov	r4, r1
 80076ac:	2101      	movs	r1, #1
 80076ae:	f7ff feb9 	bl	8007424 <_Balloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	b928      	cbnz	r0, 80076c2 <__i2b+0x1a>
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <__i2b+0x24>)
 80076b8:	4805      	ldr	r0, [pc, #20]	; (80076d0 <__i2b+0x28>)
 80076ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076be:	f000 fe01 	bl	80082c4 <__assert_func>
 80076c2:	2301      	movs	r3, #1
 80076c4:	6144      	str	r4, [r0, #20]
 80076c6:	6103      	str	r3, [r0, #16]
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	080090c0 	.word	0x080090c0
 80076d0:	0800914c 	.word	0x0800914c

080076d4 <__multiply>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4691      	mov	r9, r2
 80076da:	690a      	ldr	r2, [r1, #16]
 80076dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	bfb8      	it	lt
 80076e4:	460b      	movlt	r3, r1
 80076e6:	460c      	mov	r4, r1
 80076e8:	bfbc      	itt	lt
 80076ea:	464c      	movlt	r4, r9
 80076ec:	4699      	movlt	r9, r3
 80076ee:	6927      	ldr	r7, [r4, #16]
 80076f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076f4:	68a3      	ldr	r3, [r4, #8]
 80076f6:	6861      	ldr	r1, [r4, #4]
 80076f8:	eb07 060a 	add.w	r6, r7, sl
 80076fc:	42b3      	cmp	r3, r6
 80076fe:	b085      	sub	sp, #20
 8007700:	bfb8      	it	lt
 8007702:	3101      	addlt	r1, #1
 8007704:	f7ff fe8e 	bl	8007424 <_Balloc>
 8007708:	b930      	cbnz	r0, 8007718 <__multiply+0x44>
 800770a:	4602      	mov	r2, r0
 800770c:	4b44      	ldr	r3, [pc, #272]	; (8007820 <__multiply+0x14c>)
 800770e:	4845      	ldr	r0, [pc, #276]	; (8007824 <__multiply+0x150>)
 8007710:	f240 115d 	movw	r1, #349	; 0x15d
 8007714:	f000 fdd6 	bl	80082c4 <__assert_func>
 8007718:	f100 0514 	add.w	r5, r0, #20
 800771c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007720:	462b      	mov	r3, r5
 8007722:	2200      	movs	r2, #0
 8007724:	4543      	cmp	r3, r8
 8007726:	d321      	bcc.n	800776c <__multiply+0x98>
 8007728:	f104 0314 	add.w	r3, r4, #20
 800772c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007730:	f109 0314 	add.w	r3, r9, #20
 8007734:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	1b3a      	subs	r2, r7, r4
 800773c:	3a15      	subs	r2, #21
 800773e:	f022 0203 	bic.w	r2, r2, #3
 8007742:	3204      	adds	r2, #4
 8007744:	f104 0115 	add.w	r1, r4, #21
 8007748:	428f      	cmp	r7, r1
 800774a:	bf38      	it	cc
 800774c:	2204      	movcc	r2, #4
 800774e:	9201      	str	r2, [sp, #4]
 8007750:	9a02      	ldr	r2, [sp, #8]
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	429a      	cmp	r2, r3
 8007756:	d80c      	bhi.n	8007772 <__multiply+0x9e>
 8007758:	2e00      	cmp	r6, #0
 800775a:	dd03      	ble.n	8007764 <__multiply+0x90>
 800775c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007760:	2b00      	cmp	r3, #0
 8007762:	d05a      	beq.n	800781a <__multiply+0x146>
 8007764:	6106      	str	r6, [r0, #16]
 8007766:	b005      	add	sp, #20
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	f843 2b04 	str.w	r2, [r3], #4
 8007770:	e7d8      	b.n	8007724 <__multiply+0x50>
 8007772:	f8b3 a000 	ldrh.w	sl, [r3]
 8007776:	f1ba 0f00 	cmp.w	sl, #0
 800777a:	d024      	beq.n	80077c6 <__multiply+0xf2>
 800777c:	f104 0e14 	add.w	lr, r4, #20
 8007780:	46a9      	mov	r9, r5
 8007782:	f04f 0c00 	mov.w	ip, #0
 8007786:	f85e 2b04 	ldr.w	r2, [lr], #4
 800778a:	f8d9 1000 	ldr.w	r1, [r9]
 800778e:	fa1f fb82 	uxth.w	fp, r2
 8007792:	b289      	uxth	r1, r1
 8007794:	fb0a 110b 	mla	r1, sl, fp, r1
 8007798:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800779c:	f8d9 2000 	ldr.w	r2, [r9]
 80077a0:	4461      	add	r1, ip
 80077a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80077aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077ae:	b289      	uxth	r1, r1
 80077b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077b4:	4577      	cmp	r7, lr
 80077b6:	f849 1b04 	str.w	r1, [r9], #4
 80077ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077be:	d8e2      	bhi.n	8007786 <__multiply+0xb2>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	f845 c002 	str.w	ip, [r5, r2]
 80077c6:	9a03      	ldr	r2, [sp, #12]
 80077c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077cc:	3304      	adds	r3, #4
 80077ce:	f1b9 0f00 	cmp.w	r9, #0
 80077d2:	d020      	beq.n	8007816 <__multiply+0x142>
 80077d4:	6829      	ldr	r1, [r5, #0]
 80077d6:	f104 0c14 	add.w	ip, r4, #20
 80077da:	46ae      	mov	lr, r5
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	f8bc b000 	ldrh.w	fp, [ip]
 80077e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077e8:	fb09 220b 	mla	r2, r9, fp, r2
 80077ec:	4492      	add	sl, r2
 80077ee:	b289      	uxth	r1, r1
 80077f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077f4:	f84e 1b04 	str.w	r1, [lr], #4
 80077f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077fc:	f8be 1000 	ldrh.w	r1, [lr]
 8007800:	0c12      	lsrs	r2, r2, #16
 8007802:	fb09 1102 	mla	r1, r9, r2, r1
 8007806:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800780a:	4567      	cmp	r7, ip
 800780c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007810:	d8e6      	bhi.n	80077e0 <__multiply+0x10c>
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	50a9      	str	r1, [r5, r2]
 8007816:	3504      	adds	r5, #4
 8007818:	e79a      	b.n	8007750 <__multiply+0x7c>
 800781a:	3e01      	subs	r6, #1
 800781c:	e79c      	b.n	8007758 <__multiply+0x84>
 800781e:	bf00      	nop
 8007820:	080090c0 	.word	0x080090c0
 8007824:	0800914c 	.word	0x0800914c

08007828 <__pow5mult>:
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800782c:	4615      	mov	r5, r2
 800782e:	f012 0203 	ands.w	r2, r2, #3
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	d007      	beq.n	8007848 <__pow5mult+0x20>
 8007838:	4c25      	ldr	r4, [pc, #148]	; (80078d0 <__pow5mult+0xa8>)
 800783a:	3a01      	subs	r2, #1
 800783c:	2300      	movs	r3, #0
 800783e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007842:	f7ff fe51 	bl	80074e8 <__multadd>
 8007846:	4607      	mov	r7, r0
 8007848:	10ad      	asrs	r5, r5, #2
 800784a:	d03d      	beq.n	80078c8 <__pow5mult+0xa0>
 800784c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800784e:	b97c      	cbnz	r4, 8007870 <__pow5mult+0x48>
 8007850:	2010      	movs	r0, #16
 8007852:	f7ff fdbf 	bl	80073d4 <malloc>
 8007856:	4602      	mov	r2, r0
 8007858:	6270      	str	r0, [r6, #36]	; 0x24
 800785a:	b928      	cbnz	r0, 8007868 <__pow5mult+0x40>
 800785c:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <__pow5mult+0xac>)
 800785e:	481e      	ldr	r0, [pc, #120]	; (80078d8 <__pow5mult+0xb0>)
 8007860:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007864:	f000 fd2e 	bl	80082c4 <__assert_func>
 8007868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800786c:	6004      	str	r4, [r0, #0]
 800786e:	60c4      	str	r4, [r0, #12]
 8007870:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007878:	b94c      	cbnz	r4, 800788e <__pow5mult+0x66>
 800787a:	f240 2171 	movw	r1, #625	; 0x271
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff ff12 	bl	80076a8 <__i2b>
 8007884:	2300      	movs	r3, #0
 8007886:	f8c8 0008 	str.w	r0, [r8, #8]
 800788a:	4604      	mov	r4, r0
 800788c:	6003      	str	r3, [r0, #0]
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	07eb      	lsls	r3, r5, #31
 8007894:	d50a      	bpl.n	80078ac <__pow5mult+0x84>
 8007896:	4639      	mov	r1, r7
 8007898:	4622      	mov	r2, r4
 800789a:	4630      	mov	r0, r6
 800789c:	f7ff ff1a 	bl	80076d4 <__multiply>
 80078a0:	4639      	mov	r1, r7
 80078a2:	4680      	mov	r8, r0
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff fdfd 	bl	80074a4 <_Bfree>
 80078aa:	4647      	mov	r7, r8
 80078ac:	106d      	asrs	r5, r5, #1
 80078ae:	d00b      	beq.n	80078c8 <__pow5mult+0xa0>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	b938      	cbnz	r0, 80078c4 <__pow5mult+0x9c>
 80078b4:	4622      	mov	r2, r4
 80078b6:	4621      	mov	r1, r4
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff ff0b 	bl	80076d4 <__multiply>
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	f8c0 9000 	str.w	r9, [r0]
 80078c4:	4604      	mov	r4, r0
 80078c6:	e7e4      	b.n	8007892 <__pow5mult+0x6a>
 80078c8:	4638      	mov	r0, r7
 80078ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ce:	bf00      	nop
 80078d0:	08009298 	.word	0x08009298
 80078d4:	0800904e 	.word	0x0800904e
 80078d8:	0800914c 	.word	0x0800914c

080078dc <__lshift>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	460c      	mov	r4, r1
 80078e2:	6849      	ldr	r1, [r1, #4]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	4607      	mov	r7, r0
 80078ee:	4691      	mov	r9, r2
 80078f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078f4:	f108 0601 	add.w	r6, r8, #1
 80078f8:	42b3      	cmp	r3, r6
 80078fa:	db0b      	blt.n	8007914 <__lshift+0x38>
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff fd91 	bl	8007424 <_Balloc>
 8007902:	4605      	mov	r5, r0
 8007904:	b948      	cbnz	r0, 800791a <__lshift+0x3e>
 8007906:	4602      	mov	r2, r0
 8007908:	4b2a      	ldr	r3, [pc, #168]	; (80079b4 <__lshift+0xd8>)
 800790a:	482b      	ldr	r0, [pc, #172]	; (80079b8 <__lshift+0xdc>)
 800790c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007910:	f000 fcd8 	bl	80082c4 <__assert_func>
 8007914:	3101      	adds	r1, #1
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	e7ee      	b.n	80078f8 <__lshift+0x1c>
 800791a:	2300      	movs	r3, #0
 800791c:	f100 0114 	add.w	r1, r0, #20
 8007920:	f100 0210 	add.w	r2, r0, #16
 8007924:	4618      	mov	r0, r3
 8007926:	4553      	cmp	r3, sl
 8007928:	db37      	blt.n	800799a <__lshift+0xbe>
 800792a:	6920      	ldr	r0, [r4, #16]
 800792c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007930:	f104 0314 	add.w	r3, r4, #20
 8007934:	f019 091f 	ands.w	r9, r9, #31
 8007938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800793c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007940:	d02f      	beq.n	80079a2 <__lshift+0xc6>
 8007942:	f1c9 0e20 	rsb	lr, r9, #32
 8007946:	468a      	mov	sl, r1
 8007948:	f04f 0c00 	mov.w	ip, #0
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	fa02 f209 	lsl.w	r2, r2, r9
 8007952:	ea42 020c 	orr.w	r2, r2, ip
 8007956:	f84a 2b04 	str.w	r2, [sl], #4
 800795a:	f853 2b04 	ldr.w	r2, [r3], #4
 800795e:	4298      	cmp	r0, r3
 8007960:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007964:	d8f2      	bhi.n	800794c <__lshift+0x70>
 8007966:	1b03      	subs	r3, r0, r4
 8007968:	3b15      	subs	r3, #21
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	3304      	adds	r3, #4
 8007970:	f104 0215 	add.w	r2, r4, #21
 8007974:	4290      	cmp	r0, r2
 8007976:	bf38      	it	cc
 8007978:	2304      	movcc	r3, #4
 800797a:	f841 c003 	str.w	ip, [r1, r3]
 800797e:	f1bc 0f00 	cmp.w	ip, #0
 8007982:	d001      	beq.n	8007988 <__lshift+0xac>
 8007984:	f108 0602 	add.w	r6, r8, #2
 8007988:	3e01      	subs	r6, #1
 800798a:	4638      	mov	r0, r7
 800798c:	612e      	str	r6, [r5, #16]
 800798e:	4621      	mov	r1, r4
 8007990:	f7ff fd88 	bl	80074a4 <_Bfree>
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	f842 0f04 	str.w	r0, [r2, #4]!
 800799e:	3301      	adds	r3, #1
 80079a0:	e7c1      	b.n	8007926 <__lshift+0x4a>
 80079a2:	3904      	subs	r1, #4
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ac:	4298      	cmp	r0, r3
 80079ae:	d8f9      	bhi.n	80079a4 <__lshift+0xc8>
 80079b0:	e7ea      	b.n	8007988 <__lshift+0xac>
 80079b2:	bf00      	nop
 80079b4:	080090c0 	.word	0x080090c0
 80079b8:	0800914c 	.word	0x0800914c

080079bc <__mcmp>:
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	6902      	ldr	r2, [r0, #16]
 80079c0:	690c      	ldr	r4, [r1, #16]
 80079c2:	1b12      	subs	r2, r2, r4
 80079c4:	d10e      	bne.n	80079e4 <__mcmp+0x28>
 80079c6:	f100 0314 	add.w	r3, r0, #20
 80079ca:	3114      	adds	r1, #20
 80079cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079dc:	42a5      	cmp	r5, r4
 80079de:	d003      	beq.n	80079e8 <__mcmp+0x2c>
 80079e0:	d305      	bcc.n	80079ee <__mcmp+0x32>
 80079e2:	2201      	movs	r2, #1
 80079e4:	4610      	mov	r0, r2
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	4283      	cmp	r3, r0
 80079ea:	d3f3      	bcc.n	80079d4 <__mcmp+0x18>
 80079ec:	e7fa      	b.n	80079e4 <__mcmp+0x28>
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	e7f7      	b.n	80079e4 <__mcmp+0x28>

080079f4 <__mdiff>:
 80079f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	4606      	mov	r6, r0
 80079fc:	4611      	mov	r1, r2
 80079fe:	4620      	mov	r0, r4
 8007a00:	4690      	mov	r8, r2
 8007a02:	f7ff ffdb 	bl	80079bc <__mcmp>
 8007a06:	1e05      	subs	r5, r0, #0
 8007a08:	d110      	bne.n	8007a2c <__mdiff+0x38>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fd09 	bl	8007424 <_Balloc>
 8007a12:	b930      	cbnz	r0, 8007a22 <__mdiff+0x2e>
 8007a14:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <__mdiff+0x10c>)
 8007a16:	4602      	mov	r2, r0
 8007a18:	f240 2132 	movw	r1, #562	; 0x232
 8007a1c:	4839      	ldr	r0, [pc, #228]	; (8007b04 <__mdiff+0x110>)
 8007a1e:	f000 fc51 	bl	80082c4 <__assert_func>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	bfa4      	itt	ge
 8007a2e:	4643      	movge	r3, r8
 8007a30:	46a0      	movge	r8, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a38:	bfa6      	itte	ge
 8007a3a:	461c      	movge	r4, r3
 8007a3c:	2500      	movge	r5, #0
 8007a3e:	2501      	movlt	r5, #1
 8007a40:	f7ff fcf0 	bl	8007424 <_Balloc>
 8007a44:	b920      	cbnz	r0, 8007a50 <__mdiff+0x5c>
 8007a46:	4b2e      	ldr	r3, [pc, #184]	; (8007b00 <__mdiff+0x10c>)
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a4e:	e7e5      	b.n	8007a1c <__mdiff+0x28>
 8007a50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a54:	6926      	ldr	r6, [r4, #16]
 8007a56:	60c5      	str	r5, [r0, #12]
 8007a58:	f104 0914 	add.w	r9, r4, #20
 8007a5c:	f108 0514 	add.w	r5, r8, #20
 8007a60:	f100 0e14 	add.w	lr, r0, #20
 8007a64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a6c:	f108 0210 	add.w	r2, r8, #16
 8007a70:	46f2      	mov	sl, lr
 8007a72:	2100      	movs	r1, #0
 8007a74:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a7c:	fa1f f883 	uxth.w	r8, r3
 8007a80:	fa11 f18b 	uxtah	r1, r1, fp
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	eba1 0808 	sub.w	r8, r1, r8
 8007a8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a92:	fa1f f888 	uxth.w	r8, r8
 8007a96:	1419      	asrs	r1, r3, #16
 8007a98:	454e      	cmp	r6, r9
 8007a9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a9e:	f84a 3b04 	str.w	r3, [sl], #4
 8007aa2:	d8e7      	bhi.n	8007a74 <__mdiff+0x80>
 8007aa4:	1b33      	subs	r3, r6, r4
 8007aa6:	3b15      	subs	r3, #21
 8007aa8:	f023 0303 	bic.w	r3, r3, #3
 8007aac:	3304      	adds	r3, #4
 8007aae:	3415      	adds	r4, #21
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	bf38      	it	cc
 8007ab4:	2304      	movcc	r3, #4
 8007ab6:	441d      	add	r5, r3
 8007ab8:	4473      	add	r3, lr
 8007aba:	469e      	mov	lr, r3
 8007abc:	462e      	mov	r6, r5
 8007abe:	4566      	cmp	r6, ip
 8007ac0:	d30e      	bcc.n	8007ae0 <__mdiff+0xec>
 8007ac2:	f10c 0203 	add.w	r2, ip, #3
 8007ac6:	1b52      	subs	r2, r2, r5
 8007ac8:	f022 0203 	bic.w	r2, r2, #3
 8007acc:	3d03      	subs	r5, #3
 8007ace:	45ac      	cmp	ip, r5
 8007ad0:	bf38      	it	cc
 8007ad2:	2200      	movcc	r2, #0
 8007ad4:	441a      	add	r2, r3
 8007ad6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ada:	b17b      	cbz	r3, 8007afc <__mdiff+0x108>
 8007adc:	6107      	str	r7, [r0, #16]
 8007ade:	e7a3      	b.n	8007a28 <__mdiff+0x34>
 8007ae0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ae4:	fa11 f288 	uxtah	r2, r1, r8
 8007ae8:	1414      	asrs	r4, r2, #16
 8007aea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007aee:	b292      	uxth	r2, r2
 8007af0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007af4:	f84e 2b04 	str.w	r2, [lr], #4
 8007af8:	1421      	asrs	r1, r4, #16
 8007afa:	e7e0      	b.n	8007abe <__mdiff+0xca>
 8007afc:	3f01      	subs	r7, #1
 8007afe:	e7ea      	b.n	8007ad6 <__mdiff+0xe2>
 8007b00:	080090c0 	.word	0x080090c0
 8007b04:	0800914c 	.word	0x0800914c

08007b08 <__ulp>:
 8007b08:	b082      	sub	sp, #8
 8007b0a:	ed8d 0b00 	vstr	d0, [sp]
 8007b0e:	9b01      	ldr	r3, [sp, #4]
 8007b10:	4912      	ldr	r1, [pc, #72]	; (8007b5c <__ulp+0x54>)
 8007b12:	4019      	ands	r1, r3
 8007b14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007b18:	2900      	cmp	r1, #0
 8007b1a:	dd05      	ble.n	8007b28 <__ulp+0x20>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	ec43 2b10 	vmov	d0, r2, r3
 8007b24:	b002      	add	sp, #8
 8007b26:	4770      	bx	lr
 8007b28:	4249      	negs	r1, r1
 8007b2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	da04      	bge.n	8007b46 <__ulp+0x3e>
 8007b3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007b40:	fa41 f300 	asr.w	r3, r1, r0
 8007b44:	e7ec      	b.n	8007b20 <__ulp+0x18>
 8007b46:	f1a0 0114 	sub.w	r1, r0, #20
 8007b4a:	291e      	cmp	r1, #30
 8007b4c:	bfda      	itte	le
 8007b4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007b52:	fa20 f101 	lsrle.w	r1, r0, r1
 8007b56:	2101      	movgt	r1, #1
 8007b58:	460a      	mov	r2, r1
 8007b5a:	e7e1      	b.n	8007b20 <__ulp+0x18>
 8007b5c:	7ff00000 	.word	0x7ff00000

08007b60 <__b2d>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	6905      	ldr	r5, [r0, #16]
 8007b64:	f100 0714 	add.w	r7, r0, #20
 8007b68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b6c:	1f2e      	subs	r6, r5, #4
 8007b6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff fd48 	bl	8007608 <__hi0bits>
 8007b78:	f1c0 0320 	rsb	r3, r0, #32
 8007b7c:	280a      	cmp	r0, #10
 8007b7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007bfc <__b2d+0x9c>
 8007b82:	600b      	str	r3, [r1, #0]
 8007b84:	dc14      	bgt.n	8007bb0 <__b2d+0x50>
 8007b86:	f1c0 0e0b 	rsb	lr, r0, #11
 8007b8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007b8e:	42b7      	cmp	r7, r6
 8007b90:	ea41 030c 	orr.w	r3, r1, ip
 8007b94:	bf34      	ite	cc
 8007b96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b9a:	2100      	movcs	r1, #0
 8007b9c:	3015      	adds	r0, #21
 8007b9e:	fa04 f000 	lsl.w	r0, r4, r0
 8007ba2:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ba6:	ea40 0201 	orr.w	r2, r0, r1
 8007baa:	ec43 2b10 	vmov	d0, r2, r3
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	42b7      	cmp	r7, r6
 8007bb2:	bf3a      	itte	cc
 8007bb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007bbc:	2100      	movcs	r1, #0
 8007bbe:	380b      	subs	r0, #11
 8007bc0:	d017      	beq.n	8007bf2 <__b2d+0x92>
 8007bc2:	f1c0 0c20 	rsb	ip, r0, #32
 8007bc6:	fa04 f500 	lsl.w	r5, r4, r0
 8007bca:	42be      	cmp	r6, r7
 8007bcc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007bd0:	ea45 0504 	orr.w	r5, r5, r4
 8007bd4:	bf8c      	ite	hi
 8007bd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007bda:	2400      	movls	r4, #0
 8007bdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007be0:	fa01 f000 	lsl.w	r0, r1, r0
 8007be4:	fa24 f40c 	lsr.w	r4, r4, ip
 8007be8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bec:	ea40 0204 	orr.w	r2, r0, r4
 8007bf0:	e7db      	b.n	8007baa <__b2d+0x4a>
 8007bf2:	ea44 030c 	orr.w	r3, r4, ip
 8007bf6:	460a      	mov	r2, r1
 8007bf8:	e7d7      	b.n	8007baa <__b2d+0x4a>
 8007bfa:	bf00      	nop
 8007bfc:	3ff00000 	.word	0x3ff00000

08007c00 <__d2b>:
 8007c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4689      	mov	r9, r1
 8007c06:	2101      	movs	r1, #1
 8007c08:	ec57 6b10 	vmov	r6, r7, d0
 8007c0c:	4690      	mov	r8, r2
 8007c0e:	f7ff fc09 	bl	8007424 <_Balloc>
 8007c12:	4604      	mov	r4, r0
 8007c14:	b930      	cbnz	r0, 8007c24 <__d2b+0x24>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <__d2b+0xb0>)
 8007c1a:	4826      	ldr	r0, [pc, #152]	; (8007cb4 <__d2b+0xb4>)
 8007c1c:	f240 310a 	movw	r1, #778	; 0x30a
 8007c20:	f000 fb50 	bl	80082c4 <__assert_func>
 8007c24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c2c:	bb35      	cbnz	r5, 8007c7c <__d2b+0x7c>
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	d028      	beq.n	8007c86 <__d2b+0x86>
 8007c34:	4668      	mov	r0, sp
 8007c36:	9600      	str	r6, [sp, #0]
 8007c38:	f7ff fd06 	bl	8007648 <__lo0bits>
 8007c3c:	9900      	ldr	r1, [sp, #0]
 8007c3e:	b300      	cbz	r0, 8007c82 <__d2b+0x82>
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	f1c0 0320 	rsb	r3, r0, #32
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	40c2      	lsrs	r2, r0
 8007c4e:	6163      	str	r3, [r4, #20]
 8007c50:	9201      	str	r2, [sp, #4]
 8007c52:	9b01      	ldr	r3, [sp, #4]
 8007c54:	61a3      	str	r3, [r4, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bf14      	ite	ne
 8007c5a:	2202      	movne	r2, #2
 8007c5c:	2201      	moveq	r2, #1
 8007c5e:	6122      	str	r2, [r4, #16]
 8007c60:	b1d5      	cbz	r5, 8007c98 <__d2b+0x98>
 8007c62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c66:	4405      	add	r5, r0
 8007c68:	f8c9 5000 	str.w	r5, [r9]
 8007c6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c70:	f8c8 0000 	str.w	r0, [r8]
 8007c74:	4620      	mov	r0, r4
 8007c76:	b003      	add	sp, #12
 8007c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c80:	e7d5      	b.n	8007c2e <__d2b+0x2e>
 8007c82:	6161      	str	r1, [r4, #20]
 8007c84:	e7e5      	b.n	8007c52 <__d2b+0x52>
 8007c86:	a801      	add	r0, sp, #4
 8007c88:	f7ff fcde 	bl	8007648 <__lo0bits>
 8007c8c:	9b01      	ldr	r3, [sp, #4]
 8007c8e:	6163      	str	r3, [r4, #20]
 8007c90:	2201      	movs	r2, #1
 8007c92:	6122      	str	r2, [r4, #16]
 8007c94:	3020      	adds	r0, #32
 8007c96:	e7e3      	b.n	8007c60 <__d2b+0x60>
 8007c98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ca0:	f8c9 0000 	str.w	r0, [r9]
 8007ca4:	6918      	ldr	r0, [r3, #16]
 8007ca6:	f7ff fcaf 	bl	8007608 <__hi0bits>
 8007caa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cae:	e7df      	b.n	8007c70 <__d2b+0x70>
 8007cb0:	080090c0 	.word	0x080090c0
 8007cb4:	0800914c 	.word	0x0800914c

08007cb8 <__ratio>:
 8007cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4688      	mov	r8, r1
 8007cbe:	4669      	mov	r1, sp
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	f7ff ff4d 	bl	8007b60 <__b2d>
 8007cc6:	a901      	add	r1, sp, #4
 8007cc8:	4640      	mov	r0, r8
 8007cca:	ec55 4b10 	vmov	r4, r5, d0
 8007cce:	f7ff ff47 	bl	8007b60 <__b2d>
 8007cd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cda:	eba3 0c02 	sub.w	ip, r3, r2
 8007cde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ce8:	ec51 0b10 	vmov	r0, r1, d0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfd6      	itet	le
 8007cf0:	460a      	movle	r2, r1
 8007cf2:	462a      	movgt	r2, r5
 8007cf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	462f      	mov	r7, r5
 8007cfc:	bfd4      	ite	le
 8007cfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d06:	4620      	mov	r0, r4
 8007d08:	ee10 2a10 	vmov	r2, s0
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 fdc4 	bl	800089c <__aeabi_ddiv>
 8007d14:	ec41 0b10 	vmov	d0, r0, r1
 8007d18:	b003      	add	sp, #12
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d1e <__copybits>:
 8007d1e:	3901      	subs	r1, #1
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	1149      	asrs	r1, r1, #5
 8007d24:	6914      	ldr	r4, [r2, #16]
 8007d26:	3101      	adds	r1, #1
 8007d28:	f102 0314 	add.w	r3, r2, #20
 8007d2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d34:	1f05      	subs	r5, r0, #4
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	d30c      	bcc.n	8007d54 <__copybits+0x36>
 8007d3a:	1aa3      	subs	r3, r4, r2
 8007d3c:	3b11      	subs	r3, #17
 8007d3e:	f023 0303 	bic.w	r3, r3, #3
 8007d42:	3211      	adds	r2, #17
 8007d44:	42a2      	cmp	r2, r4
 8007d46:	bf88      	it	hi
 8007d48:	2300      	movhi	r3, #0
 8007d4a:	4418      	add	r0, r3
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4288      	cmp	r0, r1
 8007d50:	d305      	bcc.n	8007d5e <__copybits+0x40>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d58:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d5c:	e7eb      	b.n	8007d36 <__copybits+0x18>
 8007d5e:	f840 3b04 	str.w	r3, [r0], #4
 8007d62:	e7f4      	b.n	8007d4e <__copybits+0x30>

08007d64 <__any_on>:
 8007d64:	f100 0214 	add.w	r2, r0, #20
 8007d68:	6900      	ldr	r0, [r0, #16]
 8007d6a:	114b      	asrs	r3, r1, #5
 8007d6c:	4298      	cmp	r0, r3
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	db11      	blt.n	8007d96 <__any_on+0x32>
 8007d72:	dd0a      	ble.n	8007d8a <__any_on+0x26>
 8007d74:	f011 011f 	ands.w	r1, r1, #31
 8007d78:	d007      	beq.n	8007d8a <__any_on+0x26>
 8007d7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d7e:	fa24 f001 	lsr.w	r0, r4, r1
 8007d82:	fa00 f101 	lsl.w	r1, r0, r1
 8007d86:	428c      	cmp	r4, r1
 8007d88:	d10b      	bne.n	8007da2 <__any_on+0x3e>
 8007d8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d803      	bhi.n	8007d9a <__any_on+0x36>
 8007d92:	2000      	movs	r0, #0
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	4603      	mov	r3, r0
 8007d98:	e7f7      	b.n	8007d8a <__any_on+0x26>
 8007d9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	d0f5      	beq.n	8007d8e <__any_on+0x2a>
 8007da2:	2001      	movs	r0, #1
 8007da4:	e7f6      	b.n	8007d94 <__any_on+0x30>

08007da6 <_calloc_r>:
 8007da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007da8:	fba1 2402 	umull	r2, r4, r1, r2
 8007dac:	b94c      	cbnz	r4, 8007dc2 <_calloc_r+0x1c>
 8007dae:	4611      	mov	r1, r2
 8007db0:	9201      	str	r2, [sp, #4]
 8007db2:	f000 f87b 	bl	8007eac <_malloc_r>
 8007db6:	9a01      	ldr	r2, [sp, #4]
 8007db8:	4605      	mov	r5, r0
 8007dba:	b930      	cbnz	r0, 8007dca <_calloc_r+0x24>
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	b003      	add	sp, #12
 8007dc0:	bd30      	pop	{r4, r5, pc}
 8007dc2:	220c      	movs	r2, #12
 8007dc4:	6002      	str	r2, [r0, #0]
 8007dc6:	2500      	movs	r5, #0
 8007dc8:	e7f8      	b.n	8007dbc <_calloc_r+0x16>
 8007dca:	4621      	mov	r1, r4
 8007dcc:	f7fc fbbe 	bl	800454c <memset>
 8007dd0:	e7f4      	b.n	8007dbc <_calloc_r+0x16>
	...

08007dd4 <_free_r>:
 8007dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd6:	2900      	cmp	r1, #0
 8007dd8:	d044      	beq.n	8007e64 <_free_r+0x90>
 8007dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dde:	9001      	str	r0, [sp, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f1a1 0404 	sub.w	r4, r1, #4
 8007de6:	bfb8      	it	lt
 8007de8:	18e4      	addlt	r4, r4, r3
 8007dea:	f000 fab5 	bl	8008358 <__malloc_lock>
 8007dee:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <_free_r+0x94>)
 8007df0:	9801      	ldr	r0, [sp, #4]
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	b933      	cbnz	r3, 8007e04 <_free_r+0x30>
 8007df6:	6063      	str	r3, [r4, #4]
 8007df8:	6014      	str	r4, [r2, #0]
 8007dfa:	b003      	add	sp, #12
 8007dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e00:	f000 bab0 	b.w	8008364 <__malloc_unlock>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d908      	bls.n	8007e1a <_free_r+0x46>
 8007e08:	6825      	ldr	r5, [r4, #0]
 8007e0a:	1961      	adds	r1, r4, r5
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf01      	itttt	eq
 8007e10:	6819      	ldreq	r1, [r3, #0]
 8007e12:	685b      	ldreq	r3, [r3, #4]
 8007e14:	1949      	addeq	r1, r1, r5
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	e7ed      	b.n	8007df6 <_free_r+0x22>
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	b10b      	cbz	r3, 8007e24 <_free_r+0x50>
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d9fa      	bls.n	8007e1a <_free_r+0x46>
 8007e24:	6811      	ldr	r1, [r2, #0]
 8007e26:	1855      	adds	r5, r2, r1
 8007e28:	42a5      	cmp	r5, r4
 8007e2a:	d10b      	bne.n	8007e44 <_free_r+0x70>
 8007e2c:	6824      	ldr	r4, [r4, #0]
 8007e2e:	4421      	add	r1, r4
 8007e30:	1854      	adds	r4, r2, r1
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	d1e0      	bne.n	8007dfa <_free_r+0x26>
 8007e38:	681c      	ldr	r4, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	6053      	str	r3, [r2, #4]
 8007e3e:	4421      	add	r1, r4
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	e7da      	b.n	8007dfa <_free_r+0x26>
 8007e44:	d902      	bls.n	8007e4c <_free_r+0x78>
 8007e46:	230c      	movs	r3, #12
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	e7d6      	b.n	8007dfa <_free_r+0x26>
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	1961      	adds	r1, r4, r5
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf04      	itt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	6063      	str	r3, [r4, #4]
 8007e5a:	bf04      	itt	eq
 8007e5c:	1949      	addeq	r1, r1, r5
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	6054      	str	r4, [r2, #4]
 8007e62:	e7ca      	b.n	8007dfa <_free_r+0x26>
 8007e64:	b003      	add	sp, #12
 8007e66:	bd30      	pop	{r4, r5, pc}
 8007e68:	20000758 	.word	0x20000758

08007e6c <sbrk_aligned>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4e0e      	ldr	r6, [pc, #56]	; (8007ea8 <sbrk_aligned+0x3c>)
 8007e70:	460c      	mov	r4, r1
 8007e72:	6831      	ldr	r1, [r6, #0]
 8007e74:	4605      	mov	r5, r0
 8007e76:	b911      	cbnz	r1, 8007e7e <sbrk_aligned+0x12>
 8007e78:	f000 f9f2 	bl	8008260 <_sbrk_r>
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f9ed 	bl	8008260 <_sbrk_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d00a      	beq.n	8007ea0 <sbrk_aligned+0x34>
 8007e8a:	1cc4      	adds	r4, r0, #3
 8007e8c:	f024 0403 	bic.w	r4, r4, #3
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d007      	beq.n	8007ea4 <sbrk_aligned+0x38>
 8007e94:	1a21      	subs	r1, r4, r0
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 f9e2 	bl	8008260 <_sbrk_r>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <sbrk_aligned+0x38>
 8007ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	2000075c 	.word	0x2000075c

08007eac <_malloc_r>:
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	1ccd      	adds	r5, r1, #3
 8007eb2:	f025 0503 	bic.w	r5, r5, #3
 8007eb6:	3508      	adds	r5, #8
 8007eb8:	2d0c      	cmp	r5, #12
 8007eba:	bf38      	it	cc
 8007ebc:	250c      	movcc	r5, #12
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	db01      	blt.n	8007ec8 <_malloc_r+0x1c>
 8007ec4:	42a9      	cmp	r1, r5
 8007ec6:	d905      	bls.n	8007ed4 <_malloc_r+0x28>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	2600      	movs	r6, #0
 8007ece:	4630      	mov	r0, r6
 8007ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed4:	4e2e      	ldr	r6, [pc, #184]	; (8007f90 <_malloc_r+0xe4>)
 8007ed6:	f000 fa3f 	bl	8008358 <__malloc_lock>
 8007eda:	6833      	ldr	r3, [r6, #0]
 8007edc:	461c      	mov	r4, r3
 8007ede:	bb34      	cbnz	r4, 8007f2e <_malloc_r+0x82>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f7ff ffc2 	bl	8007e6c <sbrk_aligned>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	4604      	mov	r4, r0
 8007eec:	d14d      	bne.n	8007f8a <_malloc_r+0xde>
 8007eee:	6834      	ldr	r4, [r6, #0]
 8007ef0:	4626      	mov	r6, r4
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d140      	bne.n	8007f78 <_malloc_r+0xcc>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4638      	mov	r0, r7
 8007efc:	eb04 0803 	add.w	r8, r4, r3
 8007f00:	f000 f9ae 	bl	8008260 <_sbrk_r>
 8007f04:	4580      	cmp	r8, r0
 8007f06:	d13a      	bne.n	8007f7e <_malloc_r+0xd2>
 8007f08:	6821      	ldr	r1, [r4, #0]
 8007f0a:	3503      	adds	r5, #3
 8007f0c:	1a6d      	subs	r5, r5, r1
 8007f0e:	f025 0503 	bic.w	r5, r5, #3
 8007f12:	3508      	adds	r5, #8
 8007f14:	2d0c      	cmp	r5, #12
 8007f16:	bf38      	it	cc
 8007f18:	250c      	movcc	r5, #12
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7ff ffa5 	bl	8007e6c <sbrk_aligned>
 8007f22:	3001      	adds	r0, #1
 8007f24:	d02b      	beq.n	8007f7e <_malloc_r+0xd2>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	442b      	add	r3, r5
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	e00e      	b.n	8007f4c <_malloc_r+0xa0>
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	1b52      	subs	r2, r2, r5
 8007f32:	d41e      	bmi.n	8007f72 <_malloc_r+0xc6>
 8007f34:	2a0b      	cmp	r2, #11
 8007f36:	d916      	bls.n	8007f66 <_malloc_r+0xba>
 8007f38:	1961      	adds	r1, r4, r5
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	6025      	str	r5, [r4, #0]
 8007f3e:	bf18      	it	ne
 8007f40:	6059      	strne	r1, [r3, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	bf08      	it	eq
 8007f46:	6031      	streq	r1, [r6, #0]
 8007f48:	5162      	str	r2, [r4, r5]
 8007f4a:	604b      	str	r3, [r1, #4]
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f104 060b 	add.w	r6, r4, #11
 8007f52:	f000 fa07 	bl	8008364 <__malloc_unlock>
 8007f56:	f026 0607 	bic.w	r6, r6, #7
 8007f5a:	1d23      	adds	r3, r4, #4
 8007f5c:	1af2      	subs	r2, r6, r3
 8007f5e:	d0b6      	beq.n	8007ece <_malloc_r+0x22>
 8007f60:	1b9b      	subs	r3, r3, r6
 8007f62:	50a3      	str	r3, [r4, r2]
 8007f64:	e7b3      	b.n	8007ece <_malloc_r+0x22>
 8007f66:	6862      	ldr	r2, [r4, #4]
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	bf0c      	ite	eq
 8007f6c:	6032      	streq	r2, [r6, #0]
 8007f6e:	605a      	strne	r2, [r3, #4]
 8007f70:	e7ec      	b.n	8007f4c <_malloc_r+0xa0>
 8007f72:	4623      	mov	r3, r4
 8007f74:	6864      	ldr	r4, [r4, #4]
 8007f76:	e7b2      	b.n	8007ede <_malloc_r+0x32>
 8007f78:	4634      	mov	r4, r6
 8007f7a:	6876      	ldr	r6, [r6, #4]
 8007f7c:	e7b9      	b.n	8007ef2 <_malloc_r+0x46>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4638      	mov	r0, r7
 8007f84:	f000 f9ee 	bl	8008364 <__malloc_unlock>
 8007f88:	e7a1      	b.n	8007ece <_malloc_r+0x22>
 8007f8a:	6025      	str	r5, [r4, #0]
 8007f8c:	e7de      	b.n	8007f4c <_malloc_r+0xa0>
 8007f8e:	bf00      	nop
 8007f90:	20000758 	.word	0x20000758

08007f94 <__ssputs_r>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	688e      	ldr	r6, [r1, #8]
 8007f9a:	429e      	cmp	r6, r3
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	4690      	mov	r8, r2
 8007fa2:	461f      	mov	r7, r3
 8007fa4:	d838      	bhi.n	8008018 <__ssputs_r+0x84>
 8007fa6:	898a      	ldrh	r2, [r1, #12]
 8007fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fac:	d032      	beq.n	8008014 <__ssputs_r+0x80>
 8007fae:	6825      	ldr	r5, [r4, #0]
 8007fb0:	6909      	ldr	r1, [r1, #16]
 8007fb2:	eba5 0901 	sub.w	r9, r5, r1
 8007fb6:	6965      	ldr	r5, [r4, #20]
 8007fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	444b      	add	r3, r9
 8007fc4:	106d      	asrs	r5, r5, #1
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	bf38      	it	cc
 8007fca:	461d      	movcc	r5, r3
 8007fcc:	0553      	lsls	r3, r2, #21
 8007fce:	d531      	bpl.n	8008034 <__ssputs_r+0xa0>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7ff ff6b 	bl	8007eac <_malloc_r>
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	b950      	cbnz	r0, 8007ff0 <__ssputs_r+0x5c>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	f8ca 3000 	str.w	r3, [sl]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	6921      	ldr	r1, [r4, #16]
 8007ff2:	464a      	mov	r2, r9
 8007ff4:	f7ff fa08 	bl	8007408 <memcpy>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	6126      	str	r6, [r4, #16]
 8008006:	6165      	str	r5, [r4, #20]
 8008008:	444e      	add	r6, r9
 800800a:	eba5 0509 	sub.w	r5, r5, r9
 800800e:	6026      	str	r6, [r4, #0]
 8008010:	60a5      	str	r5, [r4, #8]
 8008012:	463e      	mov	r6, r7
 8008014:	42be      	cmp	r6, r7
 8008016:	d900      	bls.n	800801a <__ssputs_r+0x86>
 8008018:	463e      	mov	r6, r7
 800801a:	6820      	ldr	r0, [r4, #0]
 800801c:	4632      	mov	r2, r6
 800801e:	4641      	mov	r1, r8
 8008020:	f000 f980 	bl	8008324 <memmove>
 8008024:	68a3      	ldr	r3, [r4, #8]
 8008026:	1b9b      	subs	r3, r3, r6
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	4433      	add	r3, r6
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	2000      	movs	r0, #0
 8008032:	e7db      	b.n	8007fec <__ssputs_r+0x58>
 8008034:	462a      	mov	r2, r5
 8008036:	f000 f99b 	bl	8008370 <_realloc_r>
 800803a:	4606      	mov	r6, r0
 800803c:	2800      	cmp	r0, #0
 800803e:	d1e1      	bne.n	8008004 <__ssputs_r+0x70>
 8008040:	6921      	ldr	r1, [r4, #16]
 8008042:	4650      	mov	r0, sl
 8008044:	f7ff fec6 	bl	8007dd4 <_free_r>
 8008048:	e7c7      	b.n	8007fda <__ssputs_r+0x46>
	...

0800804c <_svfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	4698      	mov	r8, r3
 8008052:	898b      	ldrh	r3, [r1, #12]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	b09d      	sub	sp, #116	; 0x74
 8008058:	4607      	mov	r7, r0
 800805a:	460d      	mov	r5, r1
 800805c:	4614      	mov	r4, r2
 800805e:	d50e      	bpl.n	800807e <_svfiprintf_r+0x32>
 8008060:	690b      	ldr	r3, [r1, #16]
 8008062:	b963      	cbnz	r3, 800807e <_svfiprintf_r+0x32>
 8008064:	2140      	movs	r1, #64	; 0x40
 8008066:	f7ff ff21 	bl	8007eac <_malloc_r>
 800806a:	6028      	str	r0, [r5, #0]
 800806c:	6128      	str	r0, [r5, #16]
 800806e:	b920      	cbnz	r0, 800807a <_svfiprintf_r+0x2e>
 8008070:	230c      	movs	r3, #12
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	e0d1      	b.n	800821e <_svfiprintf_r+0x1d2>
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	616b      	str	r3, [r5, #20]
 800807e:	2300      	movs	r3, #0
 8008080:	9309      	str	r3, [sp, #36]	; 0x24
 8008082:	2320      	movs	r3, #32
 8008084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008088:	f8cd 800c 	str.w	r8, [sp, #12]
 800808c:	2330      	movs	r3, #48	; 0x30
 800808e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008238 <_svfiprintf_r+0x1ec>
 8008092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008096:	f04f 0901 	mov.w	r9, #1
 800809a:	4623      	mov	r3, r4
 800809c:	469a      	mov	sl, r3
 800809e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a2:	b10a      	cbz	r2, 80080a8 <_svfiprintf_r+0x5c>
 80080a4:	2a25      	cmp	r2, #37	; 0x25
 80080a6:	d1f9      	bne.n	800809c <_svfiprintf_r+0x50>
 80080a8:	ebba 0b04 	subs.w	fp, sl, r4
 80080ac:	d00b      	beq.n	80080c6 <_svfiprintf_r+0x7a>
 80080ae:	465b      	mov	r3, fp
 80080b0:	4622      	mov	r2, r4
 80080b2:	4629      	mov	r1, r5
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff ff6d 	bl	8007f94 <__ssputs_r>
 80080ba:	3001      	adds	r0, #1
 80080bc:	f000 80aa 	beq.w	8008214 <_svfiprintf_r+0x1c8>
 80080c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c2:	445a      	add	r2, fp
 80080c4:	9209      	str	r2, [sp, #36]	; 0x24
 80080c6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80a2 	beq.w	8008214 <_svfiprintf_r+0x1c8>
 80080d0:	2300      	movs	r3, #0
 80080d2:	f04f 32ff 	mov.w	r2, #4294967295
 80080d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080da:	f10a 0a01 	add.w	sl, sl, #1
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080e6:	931a      	str	r3, [sp, #104]	; 0x68
 80080e8:	4654      	mov	r4, sl
 80080ea:	2205      	movs	r2, #5
 80080ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f0:	4851      	ldr	r0, [pc, #324]	; (8008238 <_svfiprintf_r+0x1ec>)
 80080f2:	f7f8 f89d 	bl	8000230 <memchr>
 80080f6:	9a04      	ldr	r2, [sp, #16]
 80080f8:	b9d8      	cbnz	r0, 8008132 <_svfiprintf_r+0xe6>
 80080fa:	06d0      	lsls	r0, r2, #27
 80080fc:	bf44      	itt	mi
 80080fe:	2320      	movmi	r3, #32
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008104:	0711      	lsls	r1, r2, #28
 8008106:	bf44      	itt	mi
 8008108:	232b      	movmi	r3, #43	; 0x2b
 800810a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800810e:	f89a 3000 	ldrb.w	r3, [sl]
 8008112:	2b2a      	cmp	r3, #42	; 0x2a
 8008114:	d015      	beq.n	8008142 <_svfiprintf_r+0xf6>
 8008116:	9a07      	ldr	r2, [sp, #28]
 8008118:	4654      	mov	r4, sl
 800811a:	2000      	movs	r0, #0
 800811c:	f04f 0c0a 	mov.w	ip, #10
 8008120:	4621      	mov	r1, r4
 8008122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008126:	3b30      	subs	r3, #48	; 0x30
 8008128:	2b09      	cmp	r3, #9
 800812a:	d94e      	bls.n	80081ca <_svfiprintf_r+0x17e>
 800812c:	b1b0      	cbz	r0, 800815c <_svfiprintf_r+0x110>
 800812e:	9207      	str	r2, [sp, #28]
 8008130:	e014      	b.n	800815c <_svfiprintf_r+0x110>
 8008132:	eba0 0308 	sub.w	r3, r0, r8
 8008136:	fa09 f303 	lsl.w	r3, r9, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	46a2      	mov	sl, r4
 8008140:	e7d2      	b.n	80080e8 <_svfiprintf_r+0x9c>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	1d19      	adds	r1, r3, #4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	9103      	str	r1, [sp, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfbb      	ittet	lt
 800814e:	425b      	neglt	r3, r3
 8008150:	f042 0202 	orrlt.w	r2, r2, #2
 8008154:	9307      	strge	r3, [sp, #28]
 8008156:	9307      	strlt	r3, [sp, #28]
 8008158:	bfb8      	it	lt
 800815a:	9204      	strlt	r2, [sp, #16]
 800815c:	7823      	ldrb	r3, [r4, #0]
 800815e:	2b2e      	cmp	r3, #46	; 0x2e
 8008160:	d10c      	bne.n	800817c <_svfiprintf_r+0x130>
 8008162:	7863      	ldrb	r3, [r4, #1]
 8008164:	2b2a      	cmp	r3, #42	; 0x2a
 8008166:	d135      	bne.n	80081d4 <_svfiprintf_r+0x188>
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	1d1a      	adds	r2, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	9203      	str	r2, [sp, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	bfb8      	it	lt
 8008174:	f04f 33ff 	movlt.w	r3, #4294967295
 8008178:	3402      	adds	r4, #2
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008248 <_svfiprintf_r+0x1fc>
 8008180:	7821      	ldrb	r1, [r4, #0]
 8008182:	2203      	movs	r2, #3
 8008184:	4650      	mov	r0, sl
 8008186:	f7f8 f853 	bl	8000230 <memchr>
 800818a:	b140      	cbz	r0, 800819e <_svfiprintf_r+0x152>
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	eba0 000a 	sub.w	r0, r0, sl
 8008192:	fa03 f000 	lsl.w	r0, r3, r0
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	4303      	orrs	r3, r0
 800819a:	3401      	adds	r4, #1
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a2:	4826      	ldr	r0, [pc, #152]	; (800823c <_svfiprintf_r+0x1f0>)
 80081a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081a8:	2206      	movs	r2, #6
 80081aa:	f7f8 f841 	bl	8000230 <memchr>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d038      	beq.n	8008224 <_svfiprintf_r+0x1d8>
 80081b2:	4b23      	ldr	r3, [pc, #140]	; (8008240 <_svfiprintf_r+0x1f4>)
 80081b4:	bb1b      	cbnz	r3, 80081fe <_svfiprintf_r+0x1b2>
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	3307      	adds	r3, #7
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	3308      	adds	r3, #8
 80081c0:	9303      	str	r3, [sp, #12]
 80081c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c4:	4433      	add	r3, r6
 80081c6:	9309      	str	r3, [sp, #36]	; 0x24
 80081c8:	e767      	b.n	800809a <_svfiprintf_r+0x4e>
 80081ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ce:	460c      	mov	r4, r1
 80081d0:	2001      	movs	r0, #1
 80081d2:	e7a5      	b.n	8008120 <_svfiprintf_r+0xd4>
 80081d4:	2300      	movs	r3, #0
 80081d6:	3401      	adds	r4, #1
 80081d8:	9305      	str	r3, [sp, #20]
 80081da:	4619      	mov	r1, r3
 80081dc:	f04f 0c0a 	mov.w	ip, #10
 80081e0:	4620      	mov	r0, r4
 80081e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e6:	3a30      	subs	r2, #48	; 0x30
 80081e8:	2a09      	cmp	r2, #9
 80081ea:	d903      	bls.n	80081f4 <_svfiprintf_r+0x1a8>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0c5      	beq.n	800817c <_svfiprintf_r+0x130>
 80081f0:	9105      	str	r1, [sp, #20]
 80081f2:	e7c3      	b.n	800817c <_svfiprintf_r+0x130>
 80081f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f8:	4604      	mov	r4, r0
 80081fa:	2301      	movs	r3, #1
 80081fc:	e7f0      	b.n	80081e0 <_svfiprintf_r+0x194>
 80081fe:	ab03      	add	r3, sp, #12
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	462a      	mov	r2, r5
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <_svfiprintf_r+0x1f8>)
 8008206:	a904      	add	r1, sp, #16
 8008208:	4638      	mov	r0, r7
 800820a:	f7fc fa47 	bl	800469c <_printf_float>
 800820e:	1c42      	adds	r2, r0, #1
 8008210:	4606      	mov	r6, r0
 8008212:	d1d6      	bne.n	80081c2 <_svfiprintf_r+0x176>
 8008214:	89ab      	ldrh	r3, [r5, #12]
 8008216:	065b      	lsls	r3, r3, #25
 8008218:	f53f af2c 	bmi.w	8008074 <_svfiprintf_r+0x28>
 800821c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800821e:	b01d      	add	sp, #116	; 0x74
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	ab03      	add	r3, sp, #12
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	462a      	mov	r2, r5
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <_svfiprintf_r+0x1f8>)
 800822c:	a904      	add	r1, sp, #16
 800822e:	4638      	mov	r0, r7
 8008230:	f7fc fcd8 	bl	8004be4 <_printf_i>
 8008234:	e7eb      	b.n	800820e <_svfiprintf_r+0x1c2>
 8008236:	bf00      	nop
 8008238:	080092a4 	.word	0x080092a4
 800823c:	080092ae 	.word	0x080092ae
 8008240:	0800469d 	.word	0x0800469d
 8008244:	08007f95 	.word	0x08007f95
 8008248:	080092aa 	.word	0x080092aa
 800824c:	00000000 	.word	0x00000000

08008250 <nan>:
 8008250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008258 <nan+0x8>
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	00000000 	.word	0x00000000
 800825c:	7ff80000 	.word	0x7ff80000

08008260 <_sbrk_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d06      	ldr	r5, [pc, #24]	; (800827c <_sbrk_r+0x1c>)
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	f7f9 fcc0 	bl	8001bf0 <_sbrk>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_sbrk_r+0x1a>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_sbrk_r+0x1a>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	20000760 	.word	0x20000760

08008280 <strncmp>:
 8008280:	b510      	push	{r4, lr}
 8008282:	b17a      	cbz	r2, 80082a4 <strncmp+0x24>
 8008284:	4603      	mov	r3, r0
 8008286:	3901      	subs	r1, #1
 8008288:	1884      	adds	r4, r0, r2
 800828a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800828e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008292:	4290      	cmp	r0, r2
 8008294:	d101      	bne.n	800829a <strncmp+0x1a>
 8008296:	42a3      	cmp	r3, r4
 8008298:	d101      	bne.n	800829e <strncmp+0x1e>
 800829a:	1a80      	subs	r0, r0, r2
 800829c:	bd10      	pop	{r4, pc}
 800829e:	2800      	cmp	r0, #0
 80082a0:	d1f3      	bne.n	800828a <strncmp+0xa>
 80082a2:	e7fa      	b.n	800829a <strncmp+0x1a>
 80082a4:	4610      	mov	r0, r2
 80082a6:	e7f9      	b.n	800829c <strncmp+0x1c>

080082a8 <__ascii_wctomb>:
 80082a8:	b149      	cbz	r1, 80082be <__ascii_wctomb+0x16>
 80082aa:	2aff      	cmp	r2, #255	; 0xff
 80082ac:	bf85      	ittet	hi
 80082ae:	238a      	movhi	r3, #138	; 0x8a
 80082b0:	6003      	strhi	r3, [r0, #0]
 80082b2:	700a      	strbls	r2, [r1, #0]
 80082b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80082b8:	bf98      	it	ls
 80082ba:	2001      	movls	r0, #1
 80082bc:	4770      	bx	lr
 80082be:	4608      	mov	r0, r1
 80082c0:	4770      	bx	lr
	...

080082c4 <__assert_func>:
 80082c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082c6:	4614      	mov	r4, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <__assert_func+0x2c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4605      	mov	r5, r0
 80082d0:	68d8      	ldr	r0, [r3, #12]
 80082d2:	b14c      	cbz	r4, 80082e8 <__assert_func+0x24>
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <__assert_func+0x30>)
 80082d6:	9100      	str	r1, [sp, #0]
 80082d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082dc:	4906      	ldr	r1, [pc, #24]	; (80082f8 <__assert_func+0x34>)
 80082de:	462b      	mov	r3, r5
 80082e0:	f000 f80e 	bl	8008300 <fiprintf>
 80082e4:	f000 fa8c 	bl	8008800 <abort>
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <__assert_func+0x38>)
 80082ea:	461c      	mov	r4, r3
 80082ec:	e7f3      	b.n	80082d6 <__assert_func+0x12>
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c
 80082f4:	080092b5 	.word	0x080092b5
 80082f8:	080092c2 	.word	0x080092c2
 80082fc:	080092f0 	.word	0x080092f0

08008300 <fiprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b503      	push	{r0, r1, lr}
 8008304:	4601      	mov	r1, r0
 8008306:	ab03      	add	r3, sp, #12
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <fiprintf+0x20>)
 800830a:	f853 2b04 	ldr.w	r2, [r3], #4
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f000 f885 	bl	8008420 <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	2000000c 	.word	0x2000000c

08008324 <memmove>:
 8008324:	4288      	cmp	r0, r1
 8008326:	b510      	push	{r4, lr}
 8008328:	eb01 0402 	add.w	r4, r1, r2
 800832c:	d902      	bls.n	8008334 <memmove+0x10>
 800832e:	4284      	cmp	r4, r0
 8008330:	4623      	mov	r3, r4
 8008332:	d807      	bhi.n	8008344 <memmove+0x20>
 8008334:	1e43      	subs	r3, r0, #1
 8008336:	42a1      	cmp	r1, r4
 8008338:	d008      	beq.n	800834c <memmove+0x28>
 800833a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800833e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008342:	e7f8      	b.n	8008336 <memmove+0x12>
 8008344:	4402      	add	r2, r0
 8008346:	4601      	mov	r1, r0
 8008348:	428a      	cmp	r2, r1
 800834a:	d100      	bne.n	800834e <memmove+0x2a>
 800834c:	bd10      	pop	{r4, pc}
 800834e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008356:	e7f7      	b.n	8008348 <memmove+0x24>

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_lock+0x8>)
 800835a:	f000 bc11 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20000764 	.word	0x20000764

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_unlock+0x8>)
 8008366:	f000 bc0c 	b.w	8008b82 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20000764 	.word	0x20000764

08008370 <_realloc_r>:
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	4680      	mov	r8, r0
 8008376:	4614      	mov	r4, r2
 8008378:	460e      	mov	r6, r1
 800837a:	b921      	cbnz	r1, 8008386 <_realloc_r+0x16>
 800837c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	4611      	mov	r1, r2
 8008382:	f7ff bd93 	b.w	8007eac <_malloc_r>
 8008386:	b92a      	cbnz	r2, 8008394 <_realloc_r+0x24>
 8008388:	f7ff fd24 	bl	8007dd4 <_free_r>
 800838c:	4625      	mov	r5, r4
 800838e:	4628      	mov	r0, r5
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	f000 fc5c 	bl	8008c50 <_malloc_usable_size_r>
 8008398:	4284      	cmp	r4, r0
 800839a:	4607      	mov	r7, r0
 800839c:	d802      	bhi.n	80083a4 <_realloc_r+0x34>
 800839e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083a2:	d812      	bhi.n	80083ca <_realloc_r+0x5a>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7ff fd80 	bl	8007eac <_malloc_r>
 80083ac:	4605      	mov	r5, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0ed      	beq.n	800838e <_realloc_r+0x1e>
 80083b2:	42bc      	cmp	r4, r7
 80083b4:	4622      	mov	r2, r4
 80083b6:	4631      	mov	r1, r6
 80083b8:	bf28      	it	cs
 80083ba:	463a      	movcs	r2, r7
 80083bc:	f7ff f824 	bl	8007408 <memcpy>
 80083c0:	4631      	mov	r1, r6
 80083c2:	4640      	mov	r0, r8
 80083c4:	f7ff fd06 	bl	8007dd4 <_free_r>
 80083c8:	e7e1      	b.n	800838e <_realloc_r+0x1e>
 80083ca:	4635      	mov	r5, r6
 80083cc:	e7df      	b.n	800838e <_realloc_r+0x1e>

080083ce <__sfputc_r>:
 80083ce:	6893      	ldr	r3, [r2, #8]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	b410      	push	{r4}
 80083d6:	6093      	str	r3, [r2, #8]
 80083d8:	da08      	bge.n	80083ec <__sfputc_r+0x1e>
 80083da:	6994      	ldr	r4, [r2, #24]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	db01      	blt.n	80083e4 <__sfputc_r+0x16>
 80083e0:	290a      	cmp	r1, #10
 80083e2:	d103      	bne.n	80083ec <__sfputc_r+0x1e>
 80083e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e8:	f000 b94a 	b.w	8008680 <__swbuf_r>
 80083ec:	6813      	ldr	r3, [r2, #0]
 80083ee:	1c58      	adds	r0, r3, #1
 80083f0:	6010      	str	r0, [r2, #0]
 80083f2:	7019      	strb	r1, [r3, #0]
 80083f4:	4608      	mov	r0, r1
 80083f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <__sfputs_r>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	4606      	mov	r6, r0
 8008400:	460f      	mov	r7, r1
 8008402:	4614      	mov	r4, r2
 8008404:	18d5      	adds	r5, r2, r3
 8008406:	42ac      	cmp	r4, r5
 8008408:	d101      	bne.n	800840e <__sfputs_r+0x12>
 800840a:	2000      	movs	r0, #0
 800840c:	e007      	b.n	800841e <__sfputs_r+0x22>
 800840e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008412:	463a      	mov	r2, r7
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff ffda 	bl	80083ce <__sfputc_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	d1f3      	bne.n	8008406 <__sfputs_r+0xa>
 800841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008420 <_vfiprintf_r>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	460d      	mov	r5, r1
 8008426:	b09d      	sub	sp, #116	; 0x74
 8008428:	4614      	mov	r4, r2
 800842a:	4698      	mov	r8, r3
 800842c:	4606      	mov	r6, r0
 800842e:	b118      	cbz	r0, 8008438 <_vfiprintf_r+0x18>
 8008430:	6983      	ldr	r3, [r0, #24]
 8008432:	b90b      	cbnz	r3, 8008438 <_vfiprintf_r+0x18>
 8008434:	f000 fb06 	bl	8008a44 <__sinit>
 8008438:	4b89      	ldr	r3, [pc, #548]	; (8008660 <_vfiprintf_r+0x240>)
 800843a:	429d      	cmp	r5, r3
 800843c:	d11b      	bne.n	8008476 <_vfiprintf_r+0x56>
 800843e:	6875      	ldr	r5, [r6, #4]
 8008440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008442:	07d9      	lsls	r1, r3, #31
 8008444:	d405      	bmi.n	8008452 <_vfiprintf_r+0x32>
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	059a      	lsls	r2, r3, #22
 800844a:	d402      	bmi.n	8008452 <_vfiprintf_r+0x32>
 800844c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800844e:	f000 fb97 	bl	8008b80 <__retarget_lock_acquire_recursive>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	071b      	lsls	r3, r3, #28
 8008456:	d501      	bpl.n	800845c <_vfiprintf_r+0x3c>
 8008458:	692b      	ldr	r3, [r5, #16]
 800845a:	b9eb      	cbnz	r3, 8008498 <_vfiprintf_r+0x78>
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f960 	bl	8008724 <__swsetup_r>
 8008464:	b1c0      	cbz	r0, 8008498 <_vfiprintf_r+0x78>
 8008466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008468:	07dc      	lsls	r4, r3, #31
 800846a:	d50e      	bpl.n	800848a <_vfiprintf_r+0x6a>
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b01d      	add	sp, #116	; 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	4b7b      	ldr	r3, [pc, #492]	; (8008664 <_vfiprintf_r+0x244>)
 8008478:	429d      	cmp	r5, r3
 800847a:	d101      	bne.n	8008480 <_vfiprintf_r+0x60>
 800847c:	68b5      	ldr	r5, [r6, #8]
 800847e:	e7df      	b.n	8008440 <_vfiprintf_r+0x20>
 8008480:	4b79      	ldr	r3, [pc, #484]	; (8008668 <_vfiprintf_r+0x248>)
 8008482:	429d      	cmp	r5, r3
 8008484:	bf08      	it	eq
 8008486:	68f5      	ldreq	r5, [r6, #12]
 8008488:	e7da      	b.n	8008440 <_vfiprintf_r+0x20>
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	0598      	lsls	r0, r3, #22
 800848e:	d4ed      	bmi.n	800846c <_vfiprintf_r+0x4c>
 8008490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008492:	f000 fb76 	bl	8008b82 <__retarget_lock_release_recursive>
 8008496:	e7e9      	b.n	800846c <_vfiprintf_r+0x4c>
 8008498:	2300      	movs	r3, #0
 800849a:	9309      	str	r3, [sp, #36]	; 0x24
 800849c:	2320      	movs	r3, #32
 800849e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a6:	2330      	movs	r3, #48	; 0x30
 80084a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800866c <_vfiprintf_r+0x24c>
 80084ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084b0:	f04f 0901 	mov.w	r9, #1
 80084b4:	4623      	mov	r3, r4
 80084b6:	469a      	mov	sl, r3
 80084b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084bc:	b10a      	cbz	r2, 80084c2 <_vfiprintf_r+0xa2>
 80084be:	2a25      	cmp	r2, #37	; 0x25
 80084c0:	d1f9      	bne.n	80084b6 <_vfiprintf_r+0x96>
 80084c2:	ebba 0b04 	subs.w	fp, sl, r4
 80084c6:	d00b      	beq.n	80084e0 <_vfiprintf_r+0xc0>
 80084c8:	465b      	mov	r3, fp
 80084ca:	4622      	mov	r2, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ff94 	bl	80083fc <__sfputs_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	f000 80aa 	beq.w	800862e <_vfiprintf_r+0x20e>
 80084da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084dc:	445a      	add	r2, fp
 80084de:	9209      	str	r2, [sp, #36]	; 0x24
 80084e0:	f89a 3000 	ldrb.w	r3, [sl]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80a2 	beq.w	800862e <_vfiprintf_r+0x20e>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f4:	f10a 0a01 	add.w	sl, sl, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008500:	931a      	str	r3, [sp, #104]	; 0x68
 8008502:	4654      	mov	r4, sl
 8008504:	2205      	movs	r2, #5
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	4858      	ldr	r0, [pc, #352]	; (800866c <_vfiprintf_r+0x24c>)
 800850c:	f7f7 fe90 	bl	8000230 <memchr>
 8008510:	9a04      	ldr	r2, [sp, #16]
 8008512:	b9d8      	cbnz	r0, 800854c <_vfiprintf_r+0x12c>
 8008514:	06d1      	lsls	r1, r2, #27
 8008516:	bf44      	itt	mi
 8008518:	2320      	movmi	r3, #32
 800851a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800851e:	0713      	lsls	r3, r2, #28
 8008520:	bf44      	itt	mi
 8008522:	232b      	movmi	r3, #43	; 0x2b
 8008524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008528:	f89a 3000 	ldrb.w	r3, [sl]
 800852c:	2b2a      	cmp	r3, #42	; 0x2a
 800852e:	d015      	beq.n	800855c <_vfiprintf_r+0x13c>
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	4654      	mov	r4, sl
 8008534:	2000      	movs	r0, #0
 8008536:	f04f 0c0a 	mov.w	ip, #10
 800853a:	4621      	mov	r1, r4
 800853c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008540:	3b30      	subs	r3, #48	; 0x30
 8008542:	2b09      	cmp	r3, #9
 8008544:	d94e      	bls.n	80085e4 <_vfiprintf_r+0x1c4>
 8008546:	b1b0      	cbz	r0, 8008576 <_vfiprintf_r+0x156>
 8008548:	9207      	str	r2, [sp, #28]
 800854a:	e014      	b.n	8008576 <_vfiprintf_r+0x156>
 800854c:	eba0 0308 	sub.w	r3, r0, r8
 8008550:	fa09 f303 	lsl.w	r3, r9, r3
 8008554:	4313      	orrs	r3, r2
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	46a2      	mov	sl, r4
 800855a:	e7d2      	b.n	8008502 <_vfiprintf_r+0xe2>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d19      	adds	r1, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9103      	str	r1, [sp, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfbb      	ittet	lt
 8008568:	425b      	neglt	r3, r3
 800856a:	f042 0202 	orrlt.w	r2, r2, #2
 800856e:	9307      	strge	r3, [sp, #28]
 8008570:	9307      	strlt	r3, [sp, #28]
 8008572:	bfb8      	it	lt
 8008574:	9204      	strlt	r2, [sp, #16]
 8008576:	7823      	ldrb	r3, [r4, #0]
 8008578:	2b2e      	cmp	r3, #46	; 0x2e
 800857a:	d10c      	bne.n	8008596 <_vfiprintf_r+0x176>
 800857c:	7863      	ldrb	r3, [r4, #1]
 800857e:	2b2a      	cmp	r3, #42	; 0x2a
 8008580:	d135      	bne.n	80085ee <_vfiprintf_r+0x1ce>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	9203      	str	r2, [sp, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfb8      	it	lt
 800858e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008592:	3402      	adds	r4, #2
 8008594:	9305      	str	r3, [sp, #20]
 8008596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800867c <_vfiprintf_r+0x25c>
 800859a:	7821      	ldrb	r1, [r4, #0]
 800859c:	2203      	movs	r2, #3
 800859e:	4650      	mov	r0, sl
 80085a0:	f7f7 fe46 	bl	8000230 <memchr>
 80085a4:	b140      	cbz	r0, 80085b8 <_vfiprintf_r+0x198>
 80085a6:	2340      	movs	r3, #64	; 0x40
 80085a8:	eba0 000a 	sub.w	r0, r0, sl
 80085ac:	fa03 f000 	lsl.w	r0, r3, r0
 80085b0:	9b04      	ldr	r3, [sp, #16]
 80085b2:	4303      	orrs	r3, r0
 80085b4:	3401      	adds	r4, #1
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085bc:	482c      	ldr	r0, [pc, #176]	; (8008670 <_vfiprintf_r+0x250>)
 80085be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c2:	2206      	movs	r2, #6
 80085c4:	f7f7 fe34 	bl	8000230 <memchr>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d03f      	beq.n	800864c <_vfiprintf_r+0x22c>
 80085cc:	4b29      	ldr	r3, [pc, #164]	; (8008674 <_vfiprintf_r+0x254>)
 80085ce:	bb1b      	cbnz	r3, 8008618 <_vfiprintf_r+0x1f8>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	3307      	adds	r3, #7
 80085d4:	f023 0307 	bic.w	r3, r3, #7
 80085d8:	3308      	adds	r3, #8
 80085da:	9303      	str	r3, [sp, #12]
 80085dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085de:	443b      	add	r3, r7
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
 80085e2:	e767      	b.n	80084b4 <_vfiprintf_r+0x94>
 80085e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e8:	460c      	mov	r4, r1
 80085ea:	2001      	movs	r0, #1
 80085ec:	e7a5      	b.n	800853a <_vfiprintf_r+0x11a>
 80085ee:	2300      	movs	r3, #0
 80085f0:	3401      	adds	r4, #1
 80085f2:	9305      	str	r3, [sp, #20]
 80085f4:	4619      	mov	r1, r3
 80085f6:	f04f 0c0a 	mov.w	ip, #10
 80085fa:	4620      	mov	r0, r4
 80085fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008600:	3a30      	subs	r2, #48	; 0x30
 8008602:	2a09      	cmp	r2, #9
 8008604:	d903      	bls.n	800860e <_vfiprintf_r+0x1ee>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0c5      	beq.n	8008596 <_vfiprintf_r+0x176>
 800860a:	9105      	str	r1, [sp, #20]
 800860c:	e7c3      	b.n	8008596 <_vfiprintf_r+0x176>
 800860e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008612:	4604      	mov	r4, r0
 8008614:	2301      	movs	r3, #1
 8008616:	e7f0      	b.n	80085fa <_vfiprintf_r+0x1da>
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	462a      	mov	r2, r5
 800861e:	4b16      	ldr	r3, [pc, #88]	; (8008678 <_vfiprintf_r+0x258>)
 8008620:	a904      	add	r1, sp, #16
 8008622:	4630      	mov	r0, r6
 8008624:	f7fc f83a 	bl	800469c <_printf_float>
 8008628:	4607      	mov	r7, r0
 800862a:	1c78      	adds	r0, r7, #1
 800862c:	d1d6      	bne.n	80085dc <_vfiprintf_r+0x1bc>
 800862e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008630:	07d9      	lsls	r1, r3, #31
 8008632:	d405      	bmi.n	8008640 <_vfiprintf_r+0x220>
 8008634:	89ab      	ldrh	r3, [r5, #12]
 8008636:	059a      	lsls	r2, r3, #22
 8008638:	d402      	bmi.n	8008640 <_vfiprintf_r+0x220>
 800863a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800863c:	f000 faa1 	bl	8008b82 <__retarget_lock_release_recursive>
 8008640:	89ab      	ldrh	r3, [r5, #12]
 8008642:	065b      	lsls	r3, r3, #25
 8008644:	f53f af12 	bmi.w	800846c <_vfiprintf_r+0x4c>
 8008648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800864a:	e711      	b.n	8008470 <_vfiprintf_r+0x50>
 800864c:	ab03      	add	r3, sp, #12
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	462a      	mov	r2, r5
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <_vfiprintf_r+0x258>)
 8008654:	a904      	add	r1, sp, #16
 8008656:	4630      	mov	r0, r6
 8008658:	f7fc fac4 	bl	8004be4 <_printf_i>
 800865c:	e7e4      	b.n	8008628 <_vfiprintf_r+0x208>
 800865e:	bf00      	nop
 8008660:	08009314 	.word	0x08009314
 8008664:	08009334 	.word	0x08009334
 8008668:	080092f4 	.word	0x080092f4
 800866c:	080092a4 	.word	0x080092a4
 8008670:	080092ae 	.word	0x080092ae
 8008674:	0800469d 	.word	0x0800469d
 8008678:	080083fd 	.word	0x080083fd
 800867c:	080092aa 	.word	0x080092aa

08008680 <__swbuf_r>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	460e      	mov	r6, r1
 8008684:	4614      	mov	r4, r2
 8008686:	4605      	mov	r5, r0
 8008688:	b118      	cbz	r0, 8008692 <__swbuf_r+0x12>
 800868a:	6983      	ldr	r3, [r0, #24]
 800868c:	b90b      	cbnz	r3, 8008692 <__swbuf_r+0x12>
 800868e:	f000 f9d9 	bl	8008a44 <__sinit>
 8008692:	4b21      	ldr	r3, [pc, #132]	; (8008718 <__swbuf_r+0x98>)
 8008694:	429c      	cmp	r4, r3
 8008696:	d12b      	bne.n	80086f0 <__swbuf_r+0x70>
 8008698:	686c      	ldr	r4, [r5, #4]
 800869a:	69a3      	ldr	r3, [r4, #24]
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	071a      	lsls	r2, r3, #28
 80086a2:	d52f      	bpl.n	8008704 <__swbuf_r+0x84>
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	b36b      	cbz	r3, 8008704 <__swbuf_r+0x84>
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	1ac0      	subs	r0, r0, r3
 80086ae:	6963      	ldr	r3, [r4, #20]
 80086b0:	b2f6      	uxtb	r6, r6
 80086b2:	4283      	cmp	r3, r0
 80086b4:	4637      	mov	r7, r6
 80086b6:	dc04      	bgt.n	80086c2 <__swbuf_r+0x42>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 f92e 	bl	800891c <_fflush_r>
 80086c0:	bb30      	cbnz	r0, 8008710 <__swbuf_r+0x90>
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	60a3      	str	r3, [r4, #8]
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	701e      	strb	r6, [r3, #0]
 80086d0:	6963      	ldr	r3, [r4, #20]
 80086d2:	3001      	adds	r0, #1
 80086d4:	4283      	cmp	r3, r0
 80086d6:	d004      	beq.n	80086e2 <__swbuf_r+0x62>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	07db      	lsls	r3, r3, #31
 80086dc:	d506      	bpl.n	80086ec <__swbuf_r+0x6c>
 80086de:	2e0a      	cmp	r6, #10
 80086e0:	d104      	bne.n	80086ec <__swbuf_r+0x6c>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 f919 	bl	800891c <_fflush_r>
 80086ea:	b988      	cbnz	r0, 8008710 <__swbuf_r+0x90>
 80086ec:	4638      	mov	r0, r7
 80086ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <__swbuf_r+0x9c>)
 80086f2:	429c      	cmp	r4, r3
 80086f4:	d101      	bne.n	80086fa <__swbuf_r+0x7a>
 80086f6:	68ac      	ldr	r4, [r5, #8]
 80086f8:	e7cf      	b.n	800869a <__swbuf_r+0x1a>
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <__swbuf_r+0xa0>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	bf08      	it	eq
 8008700:	68ec      	ldreq	r4, [r5, #12]
 8008702:	e7ca      	b.n	800869a <__swbuf_r+0x1a>
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f000 f80c 	bl	8008724 <__swsetup_r>
 800870c:	2800      	cmp	r0, #0
 800870e:	d0cb      	beq.n	80086a8 <__swbuf_r+0x28>
 8008710:	f04f 37ff 	mov.w	r7, #4294967295
 8008714:	e7ea      	b.n	80086ec <__swbuf_r+0x6c>
 8008716:	bf00      	nop
 8008718:	08009314 	.word	0x08009314
 800871c:	08009334 	.word	0x08009334
 8008720:	080092f4 	.word	0x080092f4

08008724 <__swsetup_r>:
 8008724:	4b32      	ldr	r3, [pc, #200]	; (80087f0 <__swsetup_r+0xcc>)
 8008726:	b570      	push	{r4, r5, r6, lr}
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	4606      	mov	r6, r0
 800872c:	460c      	mov	r4, r1
 800872e:	b125      	cbz	r5, 800873a <__swsetup_r+0x16>
 8008730:	69ab      	ldr	r3, [r5, #24]
 8008732:	b913      	cbnz	r3, 800873a <__swsetup_r+0x16>
 8008734:	4628      	mov	r0, r5
 8008736:	f000 f985 	bl	8008a44 <__sinit>
 800873a:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <__swsetup_r+0xd0>)
 800873c:	429c      	cmp	r4, r3
 800873e:	d10f      	bne.n	8008760 <__swsetup_r+0x3c>
 8008740:	686c      	ldr	r4, [r5, #4]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008748:	0719      	lsls	r1, r3, #28
 800874a:	d42c      	bmi.n	80087a6 <__swsetup_r+0x82>
 800874c:	06dd      	lsls	r5, r3, #27
 800874e:	d411      	bmi.n	8008774 <__swsetup_r+0x50>
 8008750:	2309      	movs	r3, #9
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	f04f 30ff 	mov.w	r0, #4294967295
 800875e:	e03e      	b.n	80087de <__swsetup_r+0xba>
 8008760:	4b25      	ldr	r3, [pc, #148]	; (80087f8 <__swsetup_r+0xd4>)
 8008762:	429c      	cmp	r4, r3
 8008764:	d101      	bne.n	800876a <__swsetup_r+0x46>
 8008766:	68ac      	ldr	r4, [r5, #8]
 8008768:	e7eb      	b.n	8008742 <__swsetup_r+0x1e>
 800876a:	4b24      	ldr	r3, [pc, #144]	; (80087fc <__swsetup_r+0xd8>)
 800876c:	429c      	cmp	r4, r3
 800876e:	bf08      	it	eq
 8008770:	68ec      	ldreq	r4, [r5, #12]
 8008772:	e7e6      	b.n	8008742 <__swsetup_r+0x1e>
 8008774:	0758      	lsls	r0, r3, #29
 8008776:	d512      	bpl.n	800879e <__swsetup_r+0x7a>
 8008778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877a:	b141      	cbz	r1, 800878e <__swsetup_r+0x6a>
 800877c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008780:	4299      	cmp	r1, r3
 8008782:	d002      	beq.n	800878a <__swsetup_r+0x66>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff fb25 	bl	8007dd4 <_free_r>
 800878a:	2300      	movs	r3, #0
 800878c:	6363      	str	r3, [r4, #52]	; 0x34
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008794:	81a3      	strh	r3, [r4, #12]
 8008796:	2300      	movs	r3, #0
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b94b      	cbnz	r3, 80087be <__swsetup_r+0x9a>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b4:	d003      	beq.n	80087be <__swsetup_r+0x9a>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 fa09 	bl	8008bd0 <__smakebuf_r>
 80087be:	89a0      	ldrh	r0, [r4, #12]
 80087c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087c4:	f010 0301 	ands.w	r3, r0, #1
 80087c8:	d00a      	beq.n	80087e0 <__swsetup_r+0xbc>
 80087ca:	2300      	movs	r3, #0
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	6963      	ldr	r3, [r4, #20]
 80087d0:	425b      	negs	r3, r3
 80087d2:	61a3      	str	r3, [r4, #24]
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	b943      	cbnz	r3, 80087ea <__swsetup_r+0xc6>
 80087d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087dc:	d1ba      	bne.n	8008754 <__swsetup_r+0x30>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	0781      	lsls	r1, r0, #30
 80087e2:	bf58      	it	pl
 80087e4:	6963      	ldrpl	r3, [r4, #20]
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	e7f4      	b.n	80087d4 <__swsetup_r+0xb0>
 80087ea:	2000      	movs	r0, #0
 80087ec:	e7f7      	b.n	80087de <__swsetup_r+0xba>
 80087ee:	bf00      	nop
 80087f0:	2000000c 	.word	0x2000000c
 80087f4:	08009314 	.word	0x08009314
 80087f8:	08009334 	.word	0x08009334
 80087fc:	080092f4 	.word	0x080092f4

08008800 <abort>:
 8008800:	b508      	push	{r3, lr}
 8008802:	2006      	movs	r0, #6
 8008804:	f000 fa54 	bl	8008cb0 <raise>
 8008808:	2001      	movs	r0, #1
 800880a:	f7f9 f979 	bl	8001b00 <_exit>
	...

08008810 <__sflush_r>:
 8008810:	898a      	ldrh	r2, [r1, #12]
 8008812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	0710      	lsls	r0, r2, #28
 800881a:	460c      	mov	r4, r1
 800881c:	d458      	bmi.n	80088d0 <__sflush_r+0xc0>
 800881e:	684b      	ldr	r3, [r1, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc05      	bgt.n	8008830 <__sflush_r+0x20>
 8008824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc02      	bgt.n	8008830 <__sflush_r+0x20>
 800882a:	2000      	movs	r0, #0
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	2e00      	cmp	r6, #0
 8008834:	d0f9      	beq.n	800882a <__sflush_r+0x1a>
 8008836:	2300      	movs	r3, #0
 8008838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800883c:	682f      	ldr	r7, [r5, #0]
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	d032      	beq.n	80088a8 <__sflush_r+0x98>
 8008842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	075a      	lsls	r2, r3, #29
 8008848:	d505      	bpl.n	8008856 <__sflush_r+0x46>
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	1ac0      	subs	r0, r0, r3
 800884e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008850:	b10b      	cbz	r3, 8008856 <__sflush_r+0x46>
 8008852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008854:	1ac0      	subs	r0, r0, r3
 8008856:	2300      	movs	r3, #0
 8008858:	4602      	mov	r2, r0
 800885a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	4628      	mov	r0, r5
 8008860:	47b0      	blx	r6
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	d106      	bne.n	8008876 <__sflush_r+0x66>
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	291d      	cmp	r1, #29
 800886c:	d82c      	bhi.n	80088c8 <__sflush_r+0xb8>
 800886e:	4a2a      	ldr	r2, [pc, #168]	; (8008918 <__sflush_r+0x108>)
 8008870:	40ca      	lsrs	r2, r1
 8008872:	07d6      	lsls	r6, r2, #31
 8008874:	d528      	bpl.n	80088c8 <__sflush_r+0xb8>
 8008876:	2200      	movs	r2, #0
 8008878:	6062      	str	r2, [r4, #4]
 800887a:	04d9      	lsls	r1, r3, #19
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	d504      	bpl.n	800888c <__sflush_r+0x7c>
 8008882:	1c42      	adds	r2, r0, #1
 8008884:	d101      	bne.n	800888a <__sflush_r+0x7a>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b903      	cbnz	r3, 800888c <__sflush_r+0x7c>
 800888a:	6560      	str	r0, [r4, #84]	; 0x54
 800888c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800888e:	602f      	str	r7, [r5, #0]
 8008890:	2900      	cmp	r1, #0
 8008892:	d0ca      	beq.n	800882a <__sflush_r+0x1a>
 8008894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008898:	4299      	cmp	r1, r3
 800889a:	d002      	beq.n	80088a2 <__sflush_r+0x92>
 800889c:	4628      	mov	r0, r5
 800889e:	f7ff fa99 	bl	8007dd4 <_free_r>
 80088a2:	2000      	movs	r0, #0
 80088a4:	6360      	str	r0, [r4, #52]	; 0x34
 80088a6:	e7c1      	b.n	800882c <__sflush_r+0x1c>
 80088a8:	6a21      	ldr	r1, [r4, #32]
 80088aa:	2301      	movs	r3, #1
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b0      	blx	r6
 80088b0:	1c41      	adds	r1, r0, #1
 80088b2:	d1c7      	bne.n	8008844 <__sflush_r+0x34>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c4      	beq.n	8008844 <__sflush_r+0x34>
 80088ba:	2b1d      	cmp	r3, #29
 80088bc:	d001      	beq.n	80088c2 <__sflush_r+0xb2>
 80088be:	2b16      	cmp	r3, #22
 80088c0:	d101      	bne.n	80088c6 <__sflush_r+0xb6>
 80088c2:	602f      	str	r7, [r5, #0]
 80088c4:	e7b1      	b.n	800882a <__sflush_r+0x1a>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	e7ad      	b.n	800882c <__sflush_r+0x1c>
 80088d0:	690f      	ldr	r7, [r1, #16]
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	d0a9      	beq.n	800882a <__sflush_r+0x1a>
 80088d6:	0793      	lsls	r3, r2, #30
 80088d8:	680e      	ldr	r6, [r1, #0]
 80088da:	bf08      	it	eq
 80088dc:	694b      	ldreq	r3, [r1, #20]
 80088de:	600f      	str	r7, [r1, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2300      	movne	r3, #0
 80088e4:	eba6 0807 	sub.w	r8, r6, r7
 80088e8:	608b      	str	r3, [r1, #8]
 80088ea:	f1b8 0f00 	cmp.w	r8, #0
 80088ee:	dd9c      	ble.n	800882a <__sflush_r+0x1a>
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088f4:	4643      	mov	r3, r8
 80088f6:	463a      	mov	r2, r7
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc06      	bgt.n	800890e <__sflush_r+0xfe>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e78e      	b.n	800882c <__sflush_r+0x1c>
 800890e:	4407      	add	r7, r0
 8008910:	eba8 0800 	sub.w	r8, r8, r0
 8008914:	e7e9      	b.n	80088ea <__sflush_r+0xda>
 8008916:	bf00      	nop
 8008918:	20400001 	.word	0x20400001

0800891c <_fflush_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	690b      	ldr	r3, [r1, #16]
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b913      	cbnz	r3, 800892c <_fflush_r+0x10>
 8008926:	2500      	movs	r5, #0
 8008928:	4628      	mov	r0, r5
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	b118      	cbz	r0, 8008936 <_fflush_r+0x1a>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	b90b      	cbnz	r3, 8008936 <_fflush_r+0x1a>
 8008932:	f000 f887 	bl	8008a44 <__sinit>
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <_fflush_r+0x6c>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d11b      	bne.n	8008974 <_fflush_r+0x58>
 800893c:	686c      	ldr	r4, [r5, #4]
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <_fflush_r+0xa>
 8008946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008948:	07d0      	lsls	r0, r2, #31
 800894a:	d404      	bmi.n	8008956 <_fflush_r+0x3a>
 800894c:	0599      	lsls	r1, r3, #22
 800894e:	d402      	bmi.n	8008956 <_fflush_r+0x3a>
 8008950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008952:	f000 f915 	bl	8008b80 <__retarget_lock_acquire_recursive>
 8008956:	4628      	mov	r0, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7ff ff59 	bl	8008810 <__sflush_r>
 800895e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008960:	07da      	lsls	r2, r3, #31
 8008962:	4605      	mov	r5, r0
 8008964:	d4e0      	bmi.n	8008928 <_fflush_r+0xc>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059b      	lsls	r3, r3, #22
 800896a:	d4dd      	bmi.n	8008928 <_fflush_r+0xc>
 800896c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800896e:	f000 f908 	bl	8008b82 <__retarget_lock_release_recursive>
 8008972:	e7d9      	b.n	8008928 <_fflush_r+0xc>
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <_fflush_r+0x70>)
 8008976:	429c      	cmp	r4, r3
 8008978:	d101      	bne.n	800897e <_fflush_r+0x62>
 800897a:	68ac      	ldr	r4, [r5, #8]
 800897c:	e7df      	b.n	800893e <_fflush_r+0x22>
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <_fflush_r+0x74>)
 8008980:	429c      	cmp	r4, r3
 8008982:	bf08      	it	eq
 8008984:	68ec      	ldreq	r4, [r5, #12]
 8008986:	e7da      	b.n	800893e <_fflush_r+0x22>
 8008988:	08009314 	.word	0x08009314
 800898c:	08009334 	.word	0x08009334
 8008990:	080092f4 	.word	0x080092f4

08008994 <std>:
 8008994:	2300      	movs	r3, #0
 8008996:	b510      	push	{r4, lr}
 8008998:	4604      	mov	r4, r0
 800899a:	e9c0 3300 	strd	r3, r3, [r0]
 800899e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089a2:	6083      	str	r3, [r0, #8]
 80089a4:	8181      	strh	r1, [r0, #12]
 80089a6:	6643      	str	r3, [r0, #100]	; 0x64
 80089a8:	81c2      	strh	r2, [r0, #14]
 80089aa:	6183      	str	r3, [r0, #24]
 80089ac:	4619      	mov	r1, r3
 80089ae:	2208      	movs	r2, #8
 80089b0:	305c      	adds	r0, #92	; 0x5c
 80089b2:	f7fb fdcb 	bl	800454c <memset>
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <std+0x38>)
 80089b8:	6263      	str	r3, [r4, #36]	; 0x24
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <std+0x3c>)
 80089bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <std+0x40>)
 80089c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <std+0x44>)
 80089c4:	6224      	str	r4, [r4, #32]
 80089c6:	6323      	str	r3, [r4, #48]	; 0x30
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop
 80089cc:	08008ce9 	.word	0x08008ce9
 80089d0:	08008d0b 	.word	0x08008d0b
 80089d4:	08008d43 	.word	0x08008d43
 80089d8:	08008d67 	.word	0x08008d67

080089dc <_cleanup_r>:
 80089dc:	4901      	ldr	r1, [pc, #4]	; (80089e4 <_cleanup_r+0x8>)
 80089de:	f000 b8af 	b.w	8008b40 <_fwalk_reent>
 80089e2:	bf00      	nop
 80089e4:	0800891d 	.word	0x0800891d

080089e8 <__sfmoreglue>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	2268      	movs	r2, #104	; 0x68
 80089ec:	1e4d      	subs	r5, r1, #1
 80089ee:	4355      	muls	r5, r2
 80089f0:	460e      	mov	r6, r1
 80089f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089f6:	f7ff fa59 	bl	8007eac <_malloc_r>
 80089fa:	4604      	mov	r4, r0
 80089fc:	b140      	cbz	r0, 8008a10 <__sfmoreglue+0x28>
 80089fe:	2100      	movs	r1, #0
 8008a00:	e9c0 1600 	strd	r1, r6, [r0]
 8008a04:	300c      	adds	r0, #12
 8008a06:	60a0      	str	r0, [r4, #8]
 8008a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a0c:	f7fb fd9e 	bl	800454c <memset>
 8008a10:	4620      	mov	r0, r4
 8008a12:	bd70      	pop	{r4, r5, r6, pc}

08008a14 <__sfp_lock_acquire>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__sfp_lock_acquire+0x8>)
 8008a16:	f000 b8b3 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000765 	.word	0x20000765

08008a20 <__sfp_lock_release>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__sfp_lock_release+0x8>)
 8008a22:	f000 b8ae 	b.w	8008b82 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000765 	.word	0x20000765

08008a2c <__sinit_lock_acquire>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__sinit_lock_acquire+0x8>)
 8008a2e:	f000 b8a7 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000766 	.word	0x20000766

08008a38 <__sinit_lock_release>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sinit_lock_release+0x8>)
 8008a3a:	f000 b8a2 	b.w	8008b82 <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000766 	.word	0x20000766

08008a44 <__sinit>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	4604      	mov	r4, r0
 8008a48:	f7ff fff0 	bl	8008a2c <__sinit_lock_acquire>
 8008a4c:	69a3      	ldr	r3, [r4, #24]
 8008a4e:	b11b      	cbz	r3, 8008a58 <__sinit+0x14>
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f7ff bff0 	b.w	8008a38 <__sinit_lock_release>
 8008a58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <__sinit+0x68>)
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <__sinit+0x6c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	bf04      	itt	eq
 8008a6a:	2301      	moveq	r3, #1
 8008a6c:	61a3      	streq	r3, [r4, #24]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 f820 	bl	8008ab4 <__sfp>
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 f81c 	bl	8008ab4 <__sfp>
 8008a7c:	60a0      	str	r0, [r4, #8]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f818 	bl	8008ab4 <__sfp>
 8008a84:	2200      	movs	r2, #0
 8008a86:	60e0      	str	r0, [r4, #12]
 8008a88:	2104      	movs	r1, #4
 8008a8a:	6860      	ldr	r0, [r4, #4]
 8008a8c:	f7ff ff82 	bl	8008994 <std>
 8008a90:	68a0      	ldr	r0, [r4, #8]
 8008a92:	2201      	movs	r2, #1
 8008a94:	2109      	movs	r1, #9
 8008a96:	f7ff ff7d 	bl	8008994 <std>
 8008a9a:	68e0      	ldr	r0, [r4, #12]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	2112      	movs	r1, #18
 8008aa0:	f7ff ff78 	bl	8008994 <std>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61a3      	str	r3, [r4, #24]
 8008aa8:	e7d2      	b.n	8008a50 <__sinit+0xc>
 8008aaa:	bf00      	nop
 8008aac:	08008eac 	.word	0x08008eac
 8008ab0:	080089dd 	.word	0x080089dd

08008ab4 <__sfp>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	f7ff ffac 	bl	8008a14 <__sfp_lock_acquire>
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <__sfp+0x84>)
 8008abe:	681e      	ldr	r6, [r3, #0]
 8008ac0:	69b3      	ldr	r3, [r6, #24]
 8008ac2:	b913      	cbnz	r3, 8008aca <__sfp+0x16>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ffbd 	bl	8008a44 <__sinit>
 8008aca:	3648      	adds	r6, #72	; 0x48
 8008acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	d503      	bpl.n	8008adc <__sfp+0x28>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	b30b      	cbz	r3, 8008b1c <__sfp+0x68>
 8008ad8:	6836      	ldr	r6, [r6, #0]
 8008ada:	e7f7      	b.n	8008acc <__sfp+0x18>
 8008adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae0:	b9d5      	cbnz	r5, 8008b18 <__sfp+0x64>
 8008ae2:	4b16      	ldr	r3, [pc, #88]	; (8008b3c <__sfp+0x88>)
 8008ae4:	60e3      	str	r3, [r4, #12]
 8008ae6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008aea:	6665      	str	r5, [r4, #100]	; 0x64
 8008aec:	f000 f847 	bl	8008b7e <__retarget_lock_init_recursive>
 8008af0:	f7ff ff96 	bl	8008a20 <__sfp_lock_release>
 8008af4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008af8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008afc:	6025      	str	r5, [r4, #0]
 8008afe:	61a5      	str	r5, [r4, #24]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4629      	mov	r1, r5
 8008b04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b08:	f7fb fd20 	bl	800454c <memset>
 8008b0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b14:	4620      	mov	r0, r4
 8008b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b18:	3468      	adds	r4, #104	; 0x68
 8008b1a:	e7d9      	b.n	8008ad0 <__sfp+0x1c>
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff62 	bl	80089e8 <__sfmoreglue>
 8008b24:	4604      	mov	r4, r0
 8008b26:	6030      	str	r0, [r6, #0]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1d5      	bne.n	8008ad8 <__sfp+0x24>
 8008b2c:	f7ff ff78 	bl	8008a20 <__sfp_lock_release>
 8008b30:	230c      	movs	r3, #12
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	e7ee      	b.n	8008b14 <__sfp+0x60>
 8008b36:	bf00      	nop
 8008b38:	08008eac 	.word	0x08008eac
 8008b3c:	ffff0001 	.word	0xffff0001

08008b40 <_fwalk_reent>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4606      	mov	r6, r0
 8008b46:	4688      	mov	r8, r1
 8008b48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b4c:	2700      	movs	r7, #0
 8008b4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b52:	f1b9 0901 	subs.w	r9, r9, #1
 8008b56:	d505      	bpl.n	8008b64 <_fwalk_reent+0x24>
 8008b58:	6824      	ldr	r4, [r4, #0]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d1f7      	bne.n	8008b4e <_fwalk_reent+0xe>
 8008b5e:	4638      	mov	r0, r7
 8008b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b64:	89ab      	ldrh	r3, [r5, #12]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d907      	bls.n	8008b7a <_fwalk_reent+0x3a>
 8008b6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	d003      	beq.n	8008b7a <_fwalk_reent+0x3a>
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	47c0      	blx	r8
 8008b78:	4307      	orrs	r7, r0
 8008b7a:	3568      	adds	r5, #104	; 0x68
 8008b7c:	e7e9      	b.n	8008b52 <_fwalk_reent+0x12>

08008b7e <__retarget_lock_init_recursive>:
 8008b7e:	4770      	bx	lr

08008b80 <__retarget_lock_acquire_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <__retarget_lock_release_recursive>:
 8008b82:	4770      	bx	lr

08008b84 <__swhatbuf_r>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	460e      	mov	r6, r1
 8008b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	b096      	sub	sp, #88	; 0x58
 8008b90:	4614      	mov	r4, r2
 8008b92:	461d      	mov	r5, r3
 8008b94:	da08      	bge.n	8008ba8 <__swhatbuf_r+0x24>
 8008b96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	061a      	lsls	r2, r3, #24
 8008ba0:	d410      	bmi.n	8008bc4 <__swhatbuf_r+0x40>
 8008ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba6:	e00e      	b.n	8008bc6 <__swhatbuf_r+0x42>
 8008ba8:	466a      	mov	r2, sp
 8008baa:	f000 f903 	bl	8008db4 <_fstat_r>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	dbf1      	blt.n	8008b96 <__swhatbuf_r+0x12>
 8008bb2:	9a01      	ldr	r2, [sp, #4]
 8008bb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bbc:	425a      	negs	r2, r3
 8008bbe:	415a      	adcs	r2, r3
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	e7ee      	b.n	8008ba2 <__swhatbuf_r+0x1e>
 8008bc4:	2340      	movs	r3, #64	; 0x40
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	b016      	add	sp, #88	; 0x58
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bd0 <__smakebuf_r>:
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bd4:	079d      	lsls	r5, r3, #30
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d507      	bpl.n	8008bec <__smakebuf_r+0x1c>
 8008bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	2301      	movs	r3, #1
 8008be6:	6163      	str	r3, [r4, #20]
 8008be8:	b002      	add	sp, #8
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	ab01      	add	r3, sp, #4
 8008bee:	466a      	mov	r2, sp
 8008bf0:	f7ff ffc8 	bl	8008b84 <__swhatbuf_r>
 8008bf4:	9900      	ldr	r1, [sp, #0]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff f957 	bl	8007eac <_malloc_r>
 8008bfe:	b948      	cbnz	r0, 8008c14 <__smakebuf_r+0x44>
 8008c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c04:	059a      	lsls	r2, r3, #22
 8008c06:	d4ef      	bmi.n	8008be8 <__smakebuf_r+0x18>
 8008c08:	f023 0303 	bic.w	r3, r3, #3
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	e7e3      	b.n	8008bdc <__smakebuf_r+0xc>
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <__smakebuf_r+0x7c>)
 8008c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	6020      	str	r0, [r4, #0]
 8008c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	9b00      	ldr	r3, [sp, #0]
 8008c24:	6163      	str	r3, [r4, #20]
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	6120      	str	r0, [r4, #16]
 8008c2a:	b15b      	cbz	r3, 8008c44 <__smakebuf_r+0x74>
 8008c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c30:	4630      	mov	r0, r6
 8008c32:	f000 f8d1 	bl	8008dd8 <_isatty_r>
 8008c36:	b128      	cbz	r0, 8008c44 <__smakebuf_r+0x74>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	89a0      	ldrh	r0, [r4, #12]
 8008c46:	4305      	orrs	r5, r0
 8008c48:	81a5      	strh	r5, [r4, #12]
 8008c4a:	e7cd      	b.n	8008be8 <__smakebuf_r+0x18>
 8008c4c:	080089dd 	.word	0x080089dd

08008c50 <_malloc_usable_size_r>:
 8008c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c54:	1f18      	subs	r0, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfbc      	itt	lt
 8008c5a:	580b      	ldrlt	r3, [r1, r0]
 8008c5c:	18c0      	addlt	r0, r0, r3
 8008c5e:	4770      	bx	lr

08008c60 <_raise_r>:
 8008c60:	291f      	cmp	r1, #31
 8008c62:	b538      	push	{r3, r4, r5, lr}
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	d904      	bls.n	8008c74 <_raise_r+0x14>
 8008c6a:	2316      	movs	r3, #22
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c76:	b112      	cbz	r2, 8008c7e <_raise_r+0x1e>
 8008c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c7c:	b94b      	cbnz	r3, 8008c92 <_raise_r+0x32>
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 f830 	bl	8008ce4 <_getpid_r>
 8008c84:	462a      	mov	r2, r5
 8008c86:	4601      	mov	r1, r0
 8008c88:	4620      	mov	r0, r4
 8008c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c8e:	f000 b817 	b.w	8008cc0 <_kill_r>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00a      	beq.n	8008cac <_raise_r+0x4c>
 8008c96:	1c59      	adds	r1, r3, #1
 8008c98:	d103      	bne.n	8008ca2 <_raise_r+0x42>
 8008c9a:	2316      	movs	r3, #22
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7e7      	b.n	8008c72 <_raise_r+0x12>
 8008ca2:	2400      	movs	r4, #0
 8008ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ca8:	4628      	mov	r0, r5
 8008caa:	4798      	blx	r3
 8008cac:	2000      	movs	r0, #0
 8008cae:	e7e0      	b.n	8008c72 <_raise_r+0x12>

08008cb0 <raise>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <raise+0xc>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	f7ff bfd3 	b.w	8008c60 <_raise_r>
 8008cba:	bf00      	nop
 8008cbc:	2000000c 	.word	0x2000000c

08008cc0 <_kill_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4d07      	ldr	r5, [pc, #28]	; (8008ce0 <_kill_r+0x20>)
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	4608      	mov	r0, r1
 8008cca:	4611      	mov	r1, r2
 8008ccc:	602b      	str	r3, [r5, #0]
 8008cce:	f7f8 ff07 	bl	8001ae0 <_kill>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d102      	bne.n	8008cdc <_kill_r+0x1c>
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	b103      	cbz	r3, 8008cdc <_kill_r+0x1c>
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	bd38      	pop	{r3, r4, r5, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000760 	.word	0x20000760

08008ce4 <_getpid_r>:
 8008ce4:	f7f8 bef4 	b.w	8001ad0 <_getpid>

08008ce8 <__sread>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	f000 f894 	bl	8008e1c <_read_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	bfab      	itete	ge
 8008cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cfc:	181b      	addge	r3, r3, r0
 8008cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d02:	bfac      	ite	ge
 8008d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d06:	81a3      	strhlt	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__swrite>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	461f      	mov	r7, r3
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	05db      	lsls	r3, r3, #23
 8008d14:	4605      	mov	r5, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	4616      	mov	r6, r2
 8008d1a:	d505      	bpl.n	8008d28 <__swrite+0x1e>
 8008d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d20:	2302      	movs	r3, #2
 8008d22:	2200      	movs	r2, #0
 8008d24:	f000 f868 	bl	8008df8 <_lseek_r>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	4632      	mov	r2, r6
 8008d36:	463b      	mov	r3, r7
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	f000 b817 	b.w	8008d70 <_write_r>

08008d42 <__sseek>:
 8008d42:	b510      	push	{r4, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4a:	f000 f855 	bl	8008df8 <_lseek_r>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	bf15      	itete	ne
 8008d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strheq	r3, [r4, #12]
 8008d60:	bf18      	it	ne
 8008d62:	81a3      	strhne	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__sclose>:
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 b813 	b.w	8008d94 <_close_r>
	...

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	; (8008d90 <_write_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f8 fee5 	bl	8001b4e <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20000760 	.word	0x20000760

08008d94 <_close_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d06      	ldr	r5, [pc, #24]	; (8008db0 <_close_r+0x1c>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7f8 fef1 	bl	8001b86 <_close>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_close_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_close_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000760 	.word	0x20000760

08008db4 <_fstat_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	; (8008dd4 <_fstat_r+0x20>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f7f8 feec 	bl	8001b9e <_fstat>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	d102      	bne.n	8008dd0 <_fstat_r+0x1c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b103      	cbz	r3, 8008dd0 <_fstat_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000760 	.word	0x20000760

08008dd8 <_isatty_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d06      	ldr	r5, [pc, #24]	; (8008df4 <_isatty_r+0x1c>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f8 feeb 	bl	8001bbe <_isatty>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_isatty_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_isatty_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000760 	.word	0x20000760

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_lseek_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f8 fee4 	bl	8001bd4 <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20000760 	.word	0x20000760

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	; (8008e3c <_read_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f8 fe72 	bl	8001b14 <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000760 	.word	0x20000760

08008e40 <_init>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	bf00      	nop
 8008e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e46:	bc08      	pop	{r3}
 8008e48:	469e      	mov	lr, r3
 8008e4a:	4770      	bx	lr

08008e4c <_fini>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr
